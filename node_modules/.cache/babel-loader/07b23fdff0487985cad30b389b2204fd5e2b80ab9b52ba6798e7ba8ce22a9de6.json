{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      selectedEmployee: null,\n      selectedDate: null,\n      employeeTable: true,\n      hours: true,\n      Search: \"\"\n    };\n  },\n  computed: {\n    userDetails() {\n      return this.$store.state.userData && this.$store.state.userData.length > 0 ? this.$store.state.userData[0] : null;\n    },\n    employeeList() {\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n            const key = employee.empId;\n            if (!acc[key]) {\n              acc[key] = {\n                empId: employee.empId,\n                empName: employee.empName,\n                empRole: employee.empRole,\n                attendances: []\n              };\n            }\n            acc[key].attendances.push(employee);\n            return acc;\n          }, {});\n          const uniqueEmployees = Object.values(groupedEmployees);\n          return uniqueEmployees;\n        }\n      }\n      return [];\n    },\n    workingHoursData() {\n      const attendanceDates = {};\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          if (!attendanceDates[attendance.date]) {\n            attendanceDates[attendance.date] = {\n              date: attendance.date,\n              firstIntime: null,\n              lastOuttime: null,\n              totalDifference: 0\n            };\n          }\n\n          // Update firstIntime if it's not set or earlier than the current intime\n          if (attendance.inTime && (!attendanceDates[attendance.date].firstIntime || attendance.inTime < attendanceDates[attendance.date].firstIntime)) {\n            attendanceDates[attendance.date].firstIntime = attendance.inTime;\n          }\n\n          // Update lastOuttime if it's not set or later than the current outtime\n          if (attendance.outTime && (!attendanceDates[attendance.date].lastOuttime || attendance.outTime > attendanceDates[attendance.date].lastOuttime)) {\n            attendanceDates[attendance.date].lastOuttime = attendance.outTime;\n          }\n\n          // Calculate total difference if both intime and outtime are available\n          if (attendance.inTime && attendance.outTime) {\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[attendance.date].totalDifference += diff;\n          }\n        });\n      });\n      return Object.values(attendanceDates).map(dateInfo => {\n        // Calculate total hours and total minutes\n        const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n        const totalMinutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n        return {\n          date: dateInfo.date,\n          firstIntime: dateInfo.firstIntime && dateInfo.firstIntime[0],\n          // Get the first intime\n          lastOuttime: dateInfo.lastOuttime && dateInfo.lastOuttime[dateInfo.lastOuttime.length - 1],\n          // Get the last outtime\n          totalHours: totalHours,\n          totalMinutes: totalMinutes\n        };\n      }).filter(record => record.date.includes(this.Search));\n    }\n  }\n};","map":{"version":3,"names":["data","selectedEmployee","selectedDate","employeeTable","hours","Search","computed","userDetails","$store","state","userData","length","employeeList","userId","filteredEmployees","filter","employee","empId","groupedEmployees","reduce","acc","key","empName","empRole","attendances","push","uniqueEmployees","Object","values","workingHoursData","attendanceDates","forEach","attendance","date","firstIntime","lastOuttime","totalDifference","inTime","outTime","intimeDate","Date","outtimeDate","diff","Math","abs","map","dateInfo","totalHours","floor","totalMinutes","record","includes"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\AttendenceHrms.vue"],"sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n   <div><input type=\"text\" v-model=\"Search\" placeholder=\"Search\"></div>\r\n        <table  class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Intime</th>\r\n              <th>Outtime</th>\r\n              <th>Total Working Hours</th>\r\n\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(record, index) in workingHoursData\" :key=\"index\" >\r\n              <td>{{ record.date }}</td>\r\n              <td>{{ record.Intime }}</td>\r\n              <td>{{ record.Outtime }}</td>\r\n              <td >{{ record.totalHours }} hrs {{ record.totalMinutes }} mins</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedEmployee: null,\r\n      selectedDate: null,\r\n      employeeTable: true,\r\n      hours:true,\r\n      Search:\"\"\r\n    };\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.state.userData && this.$store.state.userData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n  if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n    const userId = this.userDetails ? this.userDetails.userId : null;\r\n    if (userId) {\r\n      const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\r\n      const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n        const key = employee.empId;\r\n        if (!acc[key]) {\r\n          acc[key] = {\r\n            empId: employee.empId,\r\n            empName: employee.empName,\r\n            empRole: employee.empRole, \r\n            attendances: []\r\n          };\r\n        }\r\n        acc[key].attendances.push(employee);\r\n        return acc;\r\n      }, {});\r\n      const uniqueEmployees = Object.values(groupedEmployees);\r\n      return uniqueEmployees;\r\n    }\r\n  }\r\n  return [];\r\n},\r\nworkingHoursData() {\r\n  const attendanceDates = {};\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      if (!attendanceDates[attendance.date]) {\r\n        attendanceDates[attendance.date] = {\r\n          date: attendance.date,\r\n          firstIntime: null,\r\n          lastOuttime: null,\r\n          totalDifference: 0 \r\n        };\r\n      }\r\n\r\n      // Update firstIntime if it's not set or earlier than the current intime\r\n      if (attendance.inTime && (!attendanceDates[attendance.date].firstIntime || attendance.inTime < attendanceDates[attendance.date].firstIntime)) {\r\n        attendanceDates[attendance.date].firstIntime = attendance.inTime;\r\n      }\r\n\r\n      // Update lastOuttime if it's not set or later than the current outtime\r\n      if (attendance.outTime && (!attendanceDates[attendance.date].lastOuttime || attendance.outTime > attendanceDates[attendance.date].lastOuttime)) {\r\n        attendanceDates[attendance.date].lastOuttime = attendance.outTime;\r\n      }\r\n\r\n      // Calculate total difference if both intime and outtime are available\r\n      if (attendance.inTime && attendance.outTime) {\r\n        const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n        const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[attendance.date].totalDifference += diff;\r\n      }\r\n    });\r\n  });\r\n\r\n  return Object.values(attendanceDates).map(dateInfo => {\r\n    // Calculate total hours and total minutes\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n    return {\r\n      date: dateInfo.date,\r\n      firstIntime: dateInfo.firstIntime && dateInfo.firstIntime[0], // Get the first intime\r\n      lastOuttime: dateInfo.lastOuttime && dateInfo.lastOuttime[dateInfo.lastOuttime.length - 1], // Get the last outtime\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  }).filter(record => record.date.includes(this.Search));\r\n}\r\n\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\ntbody tr:nth-child(odd) {\r\n  background: #ccc;\r\n}\r\n\r\ntable tr:hover td {\r\n  background: #839192;\r\n  color: #000;\r\n  transition: all 0.3s ease-in;\r\n  cursor: pointer;\r\n}\r\n.table th {\r\n  padding-left: 200px;\r\n  border-bottom: 1px solid black, 3px double black;  \r\n\r\n}\r\n\r\n .table td{\r\n  padding-left: 20px;\r\nfont-family:Arial, Helvetica, sans-serif\r\n} \r\nth{\r\n  font-family: 'Arial';\r\n}\r\n.green-text {\r\n    color: green;\r\n}\r\n\r\n.red-text {\r\n    color: red;\r\n}\r\n\r\n\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}