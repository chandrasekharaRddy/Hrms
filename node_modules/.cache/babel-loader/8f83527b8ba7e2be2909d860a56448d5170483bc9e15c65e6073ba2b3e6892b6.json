{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart, registerables } from 'chart.js/auto';\nChart.register(...registerables);\nimport axios from 'axios';\nexport default {\n  name: 'BarGraph',\n  data() {\n    return {\n      selectedEmployee: null,\n      employeeTable: true,\n      workingHours: false,\n      hours: true,\n      currentPage: 1,\n      rowsPerPage: 5,\n      Search: \"\",\n      punchValues: {\n        Intime1: null,\n        Intime2: null,\n        Outtime1: null,\n        Outtime2: null,\n        Intime3: [],\n        Outtime3: []\n      },\n      showDetails: false,\n      teamMembers: true,\n      leaveData: [],\n      chart1: null,\n      chartData1: {\n        labels: ['Vamsi', 'Ramesh', 'siva', 'Sriraag', 'Sandeep', 'Hemanth', 'Nithish'],\n        datasets: [{\n          label: 'January',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'Febuaury',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'March',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'April',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'May',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'June',\n          data: [0, 0, 0, 0, 0, 0]\n        }]\n      },\n      chartOptions1: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Attendance'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      },\n      chart2: null,\n      chartData2: {\n        labels: ['Vamsi', 'Ramesh', 'siva', 'Sriraag', 'Sandeep', 'Hemanth', 'Nithish'],\n        datasets: [{\n          label: 'ActualHours',\n          data: [9, 9, 9, 9, 9, 9]\n        }, {\n          label: 'WorkedHours',\n          data: [0, 0, 0, 0, 0, 0]\n        }]\n      },\n      chartOptions2: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Attendance'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      },\n      chart: null,\n      chartData3: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n        datasets: [{\n          label: 'earlyEntry',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'ontime',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'late',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'earlyleave',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'overtime',\n          data: [0, 0, 0, 0, 0, 0]\n        }]\n      },\n      chartOptions3: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Attendance'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  },\n  computed: {\n    userDetails() {\n      return this.$store.state.userData && this.$store.state.userData.length > 0 ? this.$store.state.userData[0] : null;\n    },\n    employeeList() {\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n            const key = employee.empId;\n            if (!acc[key]) {\n              acc[key] = {\n                empId: employee.empId,\n                empName: employee.empName,\n                empRole: employee.empRole,\n                empdate: employee.date,\n                attendances: []\n              };\n            }\n            acc[key].attendances.push(employee);\n            return acc;\n          }, {});\n          const uniqueEmployees = Object.values(groupedEmployees);\n          return uniqueEmployees;\n        }\n      }\n      return [];\n    },\n    filteredEmployeeList() {\n      return this.employeeList.filter(employee => employee.empName.toLowerCase());\n    },\n    filteredWorkingHoursData() {\n      if (this.selectedEmployee) {\n        const attendanceDates = {};\n        this.selectedEmployee.attendances.forEach(attendance => {\n          if (!attendanceDates[attendance.date]) {\n            attendanceDates[attendance.date] = {\n              date: attendance.date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[attendance.date].Intime.push(attendance.inTime);\n          if (attendance.outTime) {\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[attendance.date].totalDifference += diff;\n            attendanceDates[attendance.date].Outtime.push(attendance.outTime);\n          }\n        });\n        const filteredData = Object.values(attendanceDates).map(dateInfo => {\n          const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n          const minutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n          return {\n            date: dateInfo.date,\n            Intime: dateInfo.Intime,\n            Outtime: dateInfo.Outtime,\n            totalHours: hours,\n            totalMinutes: minutes\n          };\n        }).filter(record => record.date.includes(this.Search));\n        return filteredData;\n      } else {\n        return [];\n      }\n    },\n    WeekHours() {\n      if (this.filteredWorkingHoursData.length > 0) {\n        const totalHours = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / 5;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.filteredWorkingHoursData.length;\n        console.log(totallength);\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\n      }\n      return null;\n    },\n    MonthHours() {\n      if (this.filteredWorkingHoursData.length > 0) {\n        const totalHours = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.filteredWorkingHoursData.length;\n        console.log(totallength);\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\n      }\n      return null;\n    },\n    getteam() {\n      return this.$store.getters.getTeamMembers;\n    }\n  },\n  mounted() {\n    this.getChart1();\n  },\n  created() {\n    this.UpdatedTeamGraph();\n  },\n  methods: {\n    showEmployeeDetails(employee) {\n      this.selectedEmployee = employee;\n      this.workingHours = true;\n      this.employeeTable = false;\n      this.showDetails = true;\n      this.teamMembers = false;\n      this.getLeaveTable();\n      this.filterTeamAttendance();\n      this.avgTeamCheckIn();\n      this.avgTeamCheckOut();\n      this.teamAvgHours();\n      this.TeamOnTime();\n      this.updateEntry();\n      this.getChart3();\n    },\n    updateEntry() {\n      if (this.selectedEmployee) {\n        const attendanceDates = {};\n        this.selectedEmployee.attendances.forEach(attendance => {\n          if (!attendanceDates[attendance.date]) {\n            attendanceDates[attendance.date] = {\n              date: attendance.date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[attendance.date].Intime.push(attendance.inTime);\n          if (attendance.outTime) {\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[attendance.date].totalDifference += diff;\n            attendanceDates[attendance.date].Outtime.push(attendance.outTime);\n          }\n        });\n        const earlyEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\n          }\n          return count;\n        }, 0);\n        const onTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n          }\n          return count;\n        }, 0);\n        const lateEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n          }\n          return count;\n        }, 0);\n        const overTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n          }\n          return count;\n        }, 0);\n        const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n          }\n          return count;\n        }, 0);\n        console.log(earlyEntry3);\n        console.log(onTime3);\n        console.log(lateEntry3);\n        console.log(earlyLeave3);\n        console.log(overTime3);\n        // this.chartData4.datasets[0].data[2] = earlyEntry3;\n        // this.chartData4.datasets[1].data[2] = onTime3;\n        // this.chartData4.datasets[2].data[2] = lateEntry3;\n        // this.chartData4.datasets[3].data[2] = earlyLeave3;\n        // this.chartData4.datasets[4].data[2] = overTime3;\n\n        const earlyEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\n          }\n          return count;\n        }, 0);\n        const onTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n          }\n          return count;\n        }, 0);\n        const lateEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n          }\n          return count;\n        }, 0);\n        const overTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n          }\n          return count;\n        }, 0);\n        const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n          }\n          return count;\n        }, 0);\n        console.log(earlyEntry4);\n        console.log(onTime4);\n        console.log(lateEntry4);\n        console.log(earlyLeave4);\n        console.log(overTime4);\n        this.chartData3.datasets[0].data[3] = earlyEntry4;\n        this.chartData3.datasets[1].data[3] = onTime4;\n        this.chartData3.datasets[2].data[3] = lateEntry4;\n        this.chartData3.datasets[3].data[3] = earlyLeave4;\n        this.chartData3.datasets[4].data[3] = overTime4;\n        const filteredData = Object.values(attendanceDates).map(dateInfo => {\n          const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n          const minutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n          return {\n            date: dateInfo.date,\n            Intime: dateInfo.Intime,\n            Outtime: dateInfo.Outtime,\n            totalHours: hours,\n            totalMinutes: minutes\n          };\n        }).filter(record => record.date.includes(this.Search));\n        return filteredData;\n      } else {\n        return [];\n      }\n    },\n    getChart3() {\n      const ctx = this.$refs.myChart3.getContext('2d');\n      this.chart = new Chart(ctx, {\n        type: 'bar',\n        data: this.chartData3,\n        options: this.chartOptions3\n      });\n    },\n    filterTeamAttendance() {\n      if (this.filteredWorkingHoursData.length > 0) {\n        const record = this.filteredWorkingHoursData[0];\n        this.punchValues.Intime1 = record.Intime[0];\n        this.punchValues.Intime2 = record.Intime[1];\n        this.punchValues.Outtime1 = record.Outtime[0];\n        this.punchValues.Outtime2 = record.Outtime[1];\n        this.punchValues.Intime3 = record.Intime[2] || [];\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\n      }\n    },\n    getPunchDetails(record) {\n      this.punchValues.Intime1 = record.Intime[0];\n      this.punchValues.Intime2 = record.Intime[1];\n      this.punchValues.Outtime1 = record.Outtime[0];\n      this.punchValues.Outtime2 = record.Outtime[1];\n      this.punchValues.Intime3 = record.Intime[2] || [];\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\n    },\n    getLeaveTable() {\n      const empId = this.selectedEmployee.empId;\n      axios.get('https://localhost:7188/api/User/getleave').then(response => {\n        this.leaveData = response.data.filter(leave => leave.emp_id === empId);\n        console.log(\"🚀 ~ getLeaveTable ~  this.leaveData:\", this.leaveData);\n      }).catch(error => {\n        console.error('Error fetching leave data:', error);\n      });\n    },\n    async updateStatus(index) {\n      try {\n        const leaveId = this.leaveData[index].leave_id;\n        const status = 'Approved';\n        const response = await axios.put('https://localhost:7188/api/User/updatestatus', {\n          leave_id: leaveId,\n          status: status\n        });\n        console.log(response.data);\n        this.leaveData[index].status = status;\n      } catch (error) {\n        console.error('Error updating leave status:', error);\n      }\n    },\n    async DenyLeave(index) {\n      try {\n        const leaveId = this.leaveData[index].leave_id;\n        const status = 'Deny';\n        const response = await axios.put('https://localhost:7188/api/User/updatestatus', {\n          leave_id: leaveId,\n          status: status\n        });\n        console.log(response.data);\n        this.leaveData[index].status = status;\n      } catch (error) {\n        console.error('Error updating leave status:', error);\n      }\n    },\n    getChart1() {\n      const ctx = this.$refs.myChart1.getContext('2d');\n      this.chart1 = new Chart(ctx, {\n        type: 'bar',\n        data: this.chartData1,\n        options: this.chartOptions1\n      });\n      this.getChart2();\n    },\n    getChart2() {\n      const ctx = this.$refs.myChart2.getContext('2d');\n      this.chart2 = new Chart(ctx, {\n        type: 'bar',\n        data: this.chartData2,\n        options: this.chartOptions2\n      });\n    },\n    UpdatedTeamGraph() {\n      this.filterWorkteam();\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\n          const updateDataset = (empId, monthIndex, dataIndex) => {\n            const filteredEmployee = filteredEmployees.filter(employee => employee.empId === empId);\n            const presentDays = filteredEmployee.reduce((count, employee) => {\n              const date = new Date(employee.date);\n              const month = date.getMonth();\n              if (month === monthIndex) {\n                return count + 1 / 2;\n              }\n              return count;\n            }, 0);\n            this.chartData1.datasets[dataIndex].data[empId - 3] = presentDays;\n          };\n          [3, 4, 5, 6, 7, 8, 9].forEach(empId => {\n            updateDataset(empId, 2, 2);\n            updateDataset(empId, 3, 3);\n          });\n        }\n      }\n      return [];\n    },\n    filterWorkteam() {\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n            const key = employee.empId;\n            if (!acc[key]) {\n              acc[key] = {\n                empId: employee.empId,\n                empName: employee.empName,\n                empRole: employee.empRole,\n                empDate: employee.date,\n                attendances: []\n              };\n            }\n            acc[key].attendances.push(employee);\n            return acc;\n          }, {});\n          const uniqueEmployees = Object.values(groupedEmployees);\n          const filteredData = uniqueEmployees.map(employee => {\n            const lastAttendance = employee.attendances[employee.attendances.length - 1];\n            if (!lastAttendance) {\n              console.log(`No attendance found for employee with empId ${employee.empId}.`);\n              return null;\n            }\n            const intimeDate = new Date(`01/01/2000 ${lastAttendance.inTime}`);\n            const outtimeDate = lastAttendance.outTime ? new Date(`01/01/2000 ${lastAttendance.outTime}`) : new Date();\n            const totalDifference = Math.abs(outtimeDate - intimeDate);\n            const hours = Math.min(Math.floor(totalDifference / (1000 * 60 * 60)), 9);\n            const minutes = Math.min(Math.floor(totalDifference % (1000 * 60 * 60) / (1000 * 60)), 9);\n            return {\n              empId: employee.empId,\n              lastAttendanceDate: lastAttendance.date,\n              totalDifference: totalDifference,\n              totalHours: hours,\n              totalMinutes: minutes\n            };\n          });\n          console.log(\"🚀 ~ filteredData:\", filteredData);\n          const chartData = this.chartData2.datasets[1].data;\n          chartData[0] = filteredData.find(emp => emp.empId === 3).totalHours;\n          chartData[1] = filteredData.find(emp => emp.empId === 4).totalHours;\n          chartData[2] = filteredData.find(emp => emp.empId === 5).totalHours;\n          chartData[3] = filteredData.find(emp => emp.empId === 6).totalHours;\n          chartData[4] = filteredData.find(emp => emp.empId === 7).totalHours;\n          this.chartData2.datasets[1].data = chartData;\n          return filteredData;\n        }\n      }\n      return [];\n    },\n    avgTeamCheckIn() {\n      if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\n        console.log(\"Employee or attendances not found.\");\n        return;\n      }\n      let totalFilteredTime = 0;\n      let filteredEntryCount = 0;\n      this.selectedEmployee.attendances.forEach(attendance => {\n        const {\n          inTime\n        } = attendance;\n        const timeParts = inTime.split(':').map(part => parseInt(part, 10));\n        const hour = timeParts[0];\n        const minute = timeParts[1];\n        const second = timeParts[2];\n        if (hour >= 8 && hour < 10) {\n          totalFilteredTime += hour * 3600 * 1000 + minute * 60 * 1000 + second * 1000;\n          filteredEntryCount++;\n        }\n      });\n      const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\n      const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\n      const averageMinute = Math.floor(averageTimeMilliseconds % (1000 * 60 * 60) / (1000 * 60));\n      const averageSecond = Math.floor(averageTimeMilliseconds % (1000 * 60) / 1000);\n      const averageSecondPadded = String(averageSecond).padStart(2, '0');\n      const averageCheckIn = `${averageHour}:${averageMinute}:${averageSecondPadded}`;\n      console.log(\"🚀 ~ TeamaverageCheckIn :\", averageCheckIn);\n      this.TeamsummaryavgcheckIn = averageCheckIn;\n      return averageCheckIn;\n    },\n    avgTeamCheckOut() {\n      if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\n        console.log(\"Employee or attendances not found.\");\n        return;\n      }\n      let totalFilteredTime = 0;\n      let filteredEntryCount = 0;\n      this.selectedEmployee.attendances.forEach(attendance => {\n        const {\n          outTime\n        } = attendance;\n        if (outTime) {\n          const timeParts = outTime.split(':').map(part => parseInt(part, 10));\n          const hour = timeParts[0];\n          const minute = timeParts[1];\n          const second = timeParts[2];\n          if (hour >= 17 && hour < 18) {\n            totalFilteredTime += hour * 3600 * 1000 + minute * 60 * 1000 + second * 1000;\n            filteredEntryCount++;\n          }\n        }\n      });\n      const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\n      const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\n      const averageMinute = Math.floor(averageTimeMilliseconds % (1000 * 60 * 60) / (1000 * 60));\n      const averageSecond = Math.floor(averageTimeMilliseconds % (1000 * 60) / 1000);\n      const averageSecondPadded = String(averageSecond).padStart(2, '0');\n      const averageCheckOut = `${averageHour}:${averageMinute}:${averageSecondPadded}`;\n      console.log(\"🚀 ~ averageCheckOut :\", averageCheckOut);\n      this.TeamsummaryavgcheckOut = averageCheckOut;\n      return averageCheckOut;\n    },\n    teamAvgHours() {\n      if (this.selectedEmployee) {\n        const attendanceDates = {};\n        this.selectedEmployee.attendances.forEach(attendance => {\n          if (!attendanceDates[attendance.date]) {\n            attendanceDates[attendance.date] = {\n              date: attendance.date,\n              totalDifference: 0\n            };\n          }\n          if (attendance.outTime) {\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[attendance.date].totalDifference += diff;\n          }\n        });\n        const filteredData = Object.values(attendanceDates).map(dateInfo => {\n          const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n          return {\n            date: dateInfo.date,\n            totalHours: hours\n          };\n        }).filter(record => record.date.includes(this.Search));\n        const totalAttendanceDates = filteredData.length;\n        const totalHours = filteredData.reduce((sum, record) => sum + record.totalHours, 0);\n        const averageTotalHours = totalAttendanceDates > 0 ? totalHours / totalAttendanceDates : 0;\n        console.log(\"Average Total Hours:\", averageTotalHours.toFixed(2) + 'hrs');\n        this.Teamsummaryavghrs = averageTotalHours.toFixed(2);\n        return averageTotalHours;\n      } else {\n        return 0;\n      }\n    },\n    TeamOnTime() {\n      if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\n        console.log(\"Employee or attendances not found.\");\n        return;\n      }\n      let onTimeCount = 0;\n      let totalEntriesCount = 0;\n      this.selectedEmployee.attendances.forEach(attendance => {\n        const {\n          inTime\n        } = attendance;\n        const timeParts = inTime.split(':').map(part => parseInt(part, 10));\n        const hour = timeParts[0];\n        const minute = timeParts[1];\n        totalEntriesCount++;\n        if (hour === 9 && minute === 0 || hour === 8 && minute >= 55 && hour < 9) {\n          onTimeCount++;\n        }\n      });\n      const onTimePercentage = Math.round(onTimeCount / totalEntriesCount * 100);\n      console.log(\"🚀 ~ onTimePercentage:\", onTimePercentage + '%');\n      this.TeamonTimePercentage = onTimePercentage;\n      return onTimePercentage;\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","axios","name","data","selectedEmployee","employeeTable","workingHours","hours","currentPage","rowsPerPage","Search","punchValues","Intime1","Intime2","Outtime1","Outtime2","Intime3","Outtime3","showDetails","teamMembers","leaveData","chart1","chartData1","labels","datasets","label","chartOptions1","responsive","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","chart2","chartData2","chartOptions2","chart","chartData3","chartOptions3","computed","userDetails","$store","state","userData","length","employeeList","userId","filteredEmployees","filter","employee","empId","groupedEmployees","reduce","acc","key","empName","empRole","empdate","date","attendances","push","uniqueEmployees","Object","values","filteredEmployeeList","toLowerCase","filteredWorkingHoursData","attendanceDates","forEach","attendance","Intime","Outtime","totalDifference","inTime","outTime","intimeDate","Date","outtimeDate","diff","Math","abs","filteredData","map","dateInfo","floor","minutes","totalHours","totalMinutes","record","includes","WeekHours","curr","totalInMinutes","averageInMinutes","averageHours","averageMinutes","totallength","console","log","MonthHours","getteam","getters","getTeamMembers","mounted","getChart1","created","UpdatedTeamGraph","methods","showEmployeeDetails","getLeaveTable","filterTeamAttendance","avgTeamCheckIn","avgTeamCheckOut","teamAvgHours","TeamOnTime","updateEntry","getChart3","earlyEntry3","count","getMonth","time","onTime3","lateEntry3","overTime3","earlyLeave3","earlyEntry4","onTime4","lateEntry4","overTime4","earlyLeave4","ctx","$refs","myChart3","getContext","type","options","getPunchDetails","get","then","response","leave","emp_id","catch","error","updateStatus","index","leaveId","leave_id","status","put","DenyLeave","myChart1","getChart2","myChart2","filterWorkteam","updateDataset","monthIndex","dataIndex","filteredEmployee","presentDays","month","empDate","lastAttendance","min","lastAttendanceDate","chartData","find","emp","totalFilteredTime","filteredEntryCount","timeParts","split","part","parseInt","hour","minute","second","averageTimeMilliseconds","averageHour","averageMinute","averageSecond","averageSecondPadded","String","padStart","averageCheckIn","TeamsummaryavgcheckIn","averageCheckOut","TeamsummaryavgcheckOut","totalAttendanceDates","sum","averageTotalHours","toFixed","Teamsummaryavghrs","onTimeCount","totalEntriesCount","onTimePercentage","round","TeamonTimePercentage"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\teamMembers.vue"],"sourcesContent":["\r\n<template>\r\n  <div class=\"mainHeading\">\r\n    <p>HRMS- Human Resource Management System</p>\r\n  </div>\r\n  \r\n  <div class=\"TeamsContainer\"  v-if=\"teamMembers\">\r\n    <h2 class=\"TeamHeading\">Team</h2>\r\n        <div class=\"flex-container\">\r\n    <v-card v-for=\"(employee, index) in filteredEmployeeList\" :key=\"index\" @click=\"showEmployeeDetails(employee)\" class=\"card\">\r\n      <v-card-title class=\"fontImage\"><i class=\"fa-solid fa-circle-user\"></i></v-card-title>\r\n      <v-card-text class=\"ParaText\">\r\n        <p style=\"color:#00A4CCFF\"> {{ employee.empName}}</p>\r\n        <p style=\"color: #F95700FF\"> {{ employee.empRole}}</p>\r\n      </v-card-text>\r\n    </v-card>\r\n  </div>\r\n  <div class=\"TeamGraph\">\r\n    <div class=\"TeamMonth\">\r\n      <div class=\"bargraph1\">\r\n      <canvas ref=\"myChart1\"></canvas>\r\n    </div>\r\n    </div>\r\n    <div class=\"TeamDay\">\r\n      <div class=\"bargraph1\">\r\n      <canvas ref=\"myChart2\"></canvas>\r\n    </div>\r\n    </div>\r\n  </div>\r\n      </div>\r\n      <div class=\"mainContainer\" v-if=\"showDetails\">\r\n      <div class=\"upperContainer\">\r\n      <div class=\"summmaryContainer\">\r\n        <h4 class=\"summaryHeading\">Summary:</h4>\r\n        <div class=\"upperValue\">\r\n          <div class=\"avgAttend\">\r\n            <i class='bx bxs-time attend'></i>\r\n            <h6 class=\"attendHeading\">Avg Hours</h6>\r\n             <div class=\"avgSummaryHrs\">{{ this.Teamsummaryavghrs+'hrs' }}</div>\r\n          </div>\r\n          <div class=\"avgCheckin\">\r\n            <i class='bx bxs-log-in-circle attend'></i>\r\n            <h6 class=\"attendHeading\">Avg Check-in</h6>\r\n            <div class=\"avgSummaryHrs\">{{ this.TeamsummaryavgcheckIn }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"downvalue\">\r\n          <div class=\"avgOntime\">\r\n            <i class='bx bxs-time-five attend' ></i>\r\n            <h6 class=\"attendHeading\">On-time</h6>\r\n            <div class=\"avgSummaryHrs\">{{ this.TeamonTimePercentage +\"%\" }}</div>\r\n          </div>\r\n          <div class=\"avgCheckout\">\r\n            <i class='bx bxs-log-out-circle attend' ></i>\r\n            <h6 class=\"attendHeading\">Avg Check-out</h6>\r\n            <div class=\"avgSummaryHrs\">{{ this.TeamsummaryavgcheckOut }}</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"statisticsContainer\">\r\n        <h4 class=\"statisticsHeading\">Statistics:</h4>\r\n       <div class=\"statsticsbar\">\r\n  </div>\r\n      </div>\r\n      <div class=\"punchContainer\">\r\n        <h4 class=\"dateactivityHeading\">Date Activity:</h4>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Intime1 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Outtime1 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime2 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime2 }}</p>\r\n        </div>\r\n        <div v-if=\"punchValues.Intime3 && punchValues.Intime3.length > 1\" >\r\n          <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime3 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime3 }}</p>\r\n        </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"downContainer\">\r\n      <div class=\"attendanceTable\">\r\n        <div><input type=\"text\" placeholder=\"Search\" class=\"searchElement\" v-model=\"Search\"></div>\r\n      <div class=\"attendanceday\">\r\n        <table class=\"table table-bordered\">\r\n<thead>\r\n  <tr>\r\n    <th>Date</th>\r\n    <th>Intime</th>\r\n    <th>Outtime</th>\r\n    <th>WorkingHours</th>\r\n  </tr>\r\n</thead>\r\n<tbody>\r\n  <tr v-for=\"(record, index) in filteredWorkingHoursData\" :key=\"index\" @click=\"getPunchDetails(record)\">\r\n              <td>{{ record.date }}</td>\r\n              <td>{{ record.Intime[0] }}</td>\r\n              <td>{{ record.Outtime[1] }}</td>\r\n              <td>{{ record.totalHours }} hrs {{ record.totalMinutes }} mins</td>\r\n            </tr>\r\n</tbody>\r\n      </table>\r\n      </div>\r\n    </div>\r\n    <div class=\"barDrawing\">\r\n      <div class=\"bargraph1\">\r\n      <canvas ref=\"myChart3\"></canvas>\r\n    </div>\r\n    </div>\r\n    </div>  \r\n  </div>\r\n      <div class=\"sidebar\">\r\n    <div class=\"nav\">\r\n      <div class=\"menu\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-home'></i>\r\n              <RouterLink to=\"/navigation\" class=\"text\"> Home</RouterLink>\r\n            </a>\r\n          </li>\r\n          <li class=\"active\" v-if=\"getteam\">\r\n            <a href=\"#\">\r\n              <i class=\"fa-solid fa-users\"></i>\r\n              <RouterLink to=\"/members\" class=\"text\"> Team Members</RouterLink>\r\n            </a>\r\n          </li>\r\n          <li class=\"active\">\r\n            <a href=\"#\">\r\n              <i class='bx bxs-calendar'></i>\r\n\r\n              <RouterLink to=\"/attendence\" class=\"text\">Attendence</RouterLink>\r\n            </a>\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n      <div class=\"menu\" id=\"logout\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-info-circle'></i>\r\n              <span class=\"text\">Help</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-log-out'></i>\r\n              <RouterLink to=\"/\" class=\"text\" @click=\"logout\"> Logout</RouterLink>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Chart, registerables } from 'chart.js/auto';\r\nChart.register(...registerables);\r\nimport axios from 'axios'\r\nexport default {\r\n  name: 'BarGraph',\r\n  data() {\r\n    return {\r\n      selectedEmployee: null,\r\n      employeeTable: true,\r\n      workingHours: false,\r\n      hours: true,\r\n      currentPage: 1,\r\n      rowsPerPage: 5,\r\n      Search: \"\",\r\n      punchValues: {\r\n        Intime1: null,\r\n        Intime2: null,\r\n        Outtime1: null,\r\n        Outtime2: null,\r\n        Intime3: [],\r\n        Outtime3: []\r\n      },\r\n      showDetails:false,\r\n      teamMembers:true,\r\n      leaveData:[],\r\n      chart1: null, \r\n      chartData1: {\r\n        labels: ['Vamsi', 'Ramesh', 'siva', 'Sriraag', 'Sandeep', 'Hemanth','Nithish'],\r\n        datasets: [\r\n          {\r\n          label: 'January',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'Febuaury',\r\n          data: [0,0,0,0,0,0]\r\n        },\r\n        {\r\n          label: 'March',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'April',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'May',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'June',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n      ]\r\n      },\r\n      chartOptions1: {\r\n         responsive: true,\r\n          maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n            \r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      },\r\n      chart2: null, \r\n      chartData2: {\r\n        labels: ['Vamsi', 'Ramesh', 'siva', 'Sriraag', 'Sandeep', 'Hemanth','Nithish'],\r\n        datasets: [\r\n          {\r\n          label: 'ActualHours',\r\n          data: [9,9,9,9,9,9],\r\n        },\r\n        {\r\n          label: 'WorkedHours',\r\n          data: [0,0,0,0,0,0]\r\n        },\r\n        \r\n      ]\r\n      },\r\n      chartOptions2: {\r\n         responsive: true,\r\n          maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n          },\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      },\r\n      chart: null, \r\n      chartData3: {\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n        datasets: [\r\n          {\r\n          label: 'earlyEntry',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'ontime',\r\n          data: [0,0,0,0,0,0]\r\n        },\r\n        {\r\n          label: 'late',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'earlyleave',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'overtime',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n      ]\r\n      },\r\n      chartOptions3: {\r\n         responsive: true,\r\n          maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n            \r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      }\r\n     \r\n    };\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.state.userData && this.$store.state.userData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n        const userId = this.userDetails ? this.userDetails.userId : null;\r\n        if (userId) {\r\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\r\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n            const key = employee.empId;\r\n            if (!acc[key]) {\r\n              acc[key] = {\r\n                empId: employee.empId,\r\n                empName: employee.empName,\r\n                empRole: employee.empRole,\r\n                empdate:employee.date,\r\n                attendances: []\r\n              };\r\n            }\r\n            acc[key].attendances.push(employee);\r\n            return acc;\r\n          }, {});\r\n          const uniqueEmployees = Object.values(groupedEmployees);\r\n          return uniqueEmployees;\r\n      }\r\n      }\r\n      return [];\r\n    },\r\n    filteredEmployeeList() {\r\n      return this.employeeList.filter(employee =>\r\n        employee.empName.toLowerCase(),\r\n      );\r\n    },\r\n    filteredWorkingHoursData() {\r\n  if (this.selectedEmployee) {\r\n    const attendanceDates = {};\r\n    this.selectedEmployee.attendances.forEach(attendance => {\r\n      if (!attendanceDates[attendance.date]) {\r\n        attendanceDates[attendance.date] = {\r\n          date: attendance.date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0\r\n        };\r\n      }\r\n      attendanceDates[attendance.date].Intime.push(attendance.inTime);\r\n      if (attendance.outTime) {\r\n        const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n        const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[attendance.date].totalDifference += diff;\r\n        attendanceDates[attendance.date].Outtime.push(attendance.outTime);\r\n      } \r\n    });\r\n    const filteredData = Object.values(attendanceDates).map(dateInfo => {\r\n      const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n      const minutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n      return {\r\n        date: dateInfo.date,\r\n        Intime: dateInfo.Intime,\r\n        Outtime: dateInfo.Outtime,\r\n        totalHours: hours,\r\n        totalMinutes: minutes\r\n      };\r\n    }).filter(record => record.date.includes(this.Search));\r\n    return filteredData;\r\n  } else {\r\n    return [];\r\n  }\r\n},\r\n    WeekHours() {\r\n      if (this.filteredWorkingHoursData.length > 0) {\r\n        const totalHours = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / 5;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.filteredWorkingHoursData.length;\r\n         console.log(totallength);\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n      }\r\n      return null;\r\n    },\r\n    MonthHours() {\r\n      if (this.filteredWorkingHoursData.length > 0) {\r\n        const totalHours = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.filteredWorkingHoursData.length;\r\n         console.log(totallength);\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n\r\n      }\r\n      return null;\r\n    },\r\n    getteam() {\r\n      return this.$store.getters.getTeamMembers;\r\n    },\r\n  },\r\n  mounted(){\r\n    this.getChart1();\r\n  },\r\n  created(){\r\n    this.UpdatedTeamGraph();\r\n  },\r\n  methods: {\r\n    showEmployeeDetails(employee) { \r\n      this.selectedEmployee = employee;\r\n      this.workingHours = true;\r\n      this.employeeTable = false;\r\n    this.showDetails=true;\r\n    this.teamMembers=false\r\n    this.getLeaveTable();\r\n    this.filterTeamAttendance();\r\n    this.avgTeamCheckIn();\r\n    this.avgTeamCheckOut();\r\n    this.teamAvgHours();\r\n    this.TeamOnTime();\r\n    this.updateEntry();\r\n    this.getChart3();\r\n\r\n    \r\n    },\r\n    \r\n    updateEntry(){\r\n      if (this.selectedEmployee) {\r\n    const attendanceDates = {};\r\n    this.selectedEmployee.attendances.forEach(attendance => {\r\n      if (!attendanceDates[attendance.date]) {\r\n        attendanceDates[attendance.date] = {\r\n          date: attendance.date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0\r\n        };\r\n      }\r\n      attendanceDates[attendance.date].Intime.push(attendance.inTime);\r\n      if (attendance.outTime) {\r\n        const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n        const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[attendance.date].totalDifference += diff;\r\n        attendanceDates[attendance.date].Outtime.push(attendance.outTime);\r\n      } \r\n    });\r\n    const earlyEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const onTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const lateEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const overTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  console.log(earlyEntry3);\r\nconsole.log(onTime3);\r\nconsole.log(lateEntry3)\r\nconsole.log(earlyLeave3)\r\nconsole.log(overTime3)\r\n  // this.chartData4.datasets[0].data[2] = earlyEntry3;\r\n  // this.chartData4.datasets[1].data[2] = onTime3;\r\n  // this.chartData4.datasets[2].data[2] = lateEntry3;\r\n  // this.chartData4.datasets[3].data[2] = earlyLeave3;\r\n  // this.chartData4.datasets[4].data[2] = overTime3;\r\n\r\n  const earlyEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const onTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const lateEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const overTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconsole.log(earlyEntry4);\r\nconsole.log(onTime4);\r\nconsole.log(lateEntry4)\r\nconsole.log(earlyLeave4)\r\nconsole.log(overTime4)\r\n  this.chartData3.datasets[0].data[3] = earlyEntry4;\r\n  this.chartData3.datasets[1].data[3] = onTime4;\r\n  this.chartData3.datasets[2].data[3] = lateEntry4;\r\n  this.chartData3.datasets[3].data[3] = earlyLeave4;\r\n  this.chartData3.datasets[4].data[3] = overTime4;\r\n\r\n    const filteredData = Object.values(attendanceDates).map(dateInfo => {\r\n      const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n      const minutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n      return {\r\n        date: dateInfo.date,\r\n        Intime: dateInfo.Intime,\r\n        Outtime: dateInfo.Outtime,\r\n        totalHours: hours,\r\n        totalMinutes: minutes\r\n      };\r\n    }).filter(record => record.date.includes(this.Search));\r\n    return filteredData;\r\n  } else {\r\n    return [];\r\n  }\r\n},\r\ngetChart3(){\r\n  const ctx = this.$refs.myChart3.getContext('2d');\r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData3,\r\n        options: this.chartOptions3\r\n      });\r\n    },\r\n      filterTeamAttendance(){\r\n      if (this.filteredWorkingHoursData.length > 0) {\r\n        const record =  this.filteredWorkingHoursData[0];\r\n        this.punchValues.Intime1 = record.Intime[0];\r\n        this.punchValues.Intime2 = record.Intime[1];\r\n        this.punchValues.Outtime1 = record.Outtime[0];\r\n        this.punchValues.Outtime2 = record.Outtime[1];\r\n        this.punchValues.Intime3 = record.Intime[2] || [];\r\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n \r\n      }\r\n    },\r\n    getPunchDetails(record) {\r\n      this.punchValues.Intime1 = record.Intime[0];\r\n      this.punchValues.Intime2 = record.Intime[1];\r\n      this.punchValues.Outtime1 = record.Outtime[0];\r\n      this.punchValues.Outtime2 = record.Outtime[1];\r\n      this.punchValues.Intime3 = record.Intime[2] || [];\r\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n    },\r\n    getLeaveTable() {\r\n  const empId = this.selectedEmployee.empId;\r\n  axios.get('https://localhost:7188/api/User/getleave')\r\n    .then(response => {\r\n      this.leaveData = response.data.filter(leave => leave.emp_id === empId);\r\n      console.log(\"🚀 ~ getLeaveTable ~  this.leaveData:\",  this.leaveData)\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching leave data:', error);\r\n    });\r\n},\r\n async updateStatus(index) {\r\n  try {\r\n    const leaveId = this.leaveData[index].leave_id; \r\n    const status = 'Approved'; \r\n    const response = await axios.put('https://localhost:7188/api/User/updatestatus', { leave_id: leaveId, status: status });\r\n    console.log(response.data);\r\n    this.leaveData[index].status = status;\r\n  } catch (error) {\r\n    console.error('Error updating leave status:', error);\r\n  }\r\n},\r\nasync DenyLeave(index) {\r\n  try {\r\n    const leaveId = this.leaveData[index].leave_id; \r\n    const status = 'Deny'; \r\n    const response = await axios.put('https://localhost:7188/api/User/updatestatus', { leave_id: leaveId, status: status });\r\n    console.log(response.data);\r\n    this.leaveData[index].status = status;\r\n  } catch (error) {\r\n    console.error('Error updating leave status:', error);\r\n  }\r\n},\r\ngetChart1() {\r\n      const ctx = this.$refs.myChart1.getContext('2d');\r\n      this.chart1 = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData1,\r\n        options: this.chartOptions1\r\n      });\r\n      this.getChart2();\r\n    },\r\n    getChart2() {\r\n      const ctx = this.$refs.myChart2.getContext('2d');\r\n      this.chart2 = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData2,\r\n        options: this.chartOptions2\r\n      });\r\n    },\r\n    UpdatedTeamGraph() {\r\n  this.filterWorkteam();\r\n  if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n    const userId = this.userDetails ? this.userDetails.userId : null;\r\n    if (userId) {\r\n      const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\r\n\r\n      const updateDataset = (empId, monthIndex, dataIndex) => {\r\n        const filteredEmployee = filteredEmployees.filter(employee => employee.empId === empId);\r\n        const presentDays = filteredEmployee.reduce((count, employee) => {\r\n          const date = new Date(employee.date);\r\n          const month = date.getMonth();\r\n          if (month === monthIndex) { \r\n            return count + 1/2; \r\n          }\r\n          return count;\r\n        }, 0);\r\n        this.chartData1.datasets[dataIndex].data[empId - 3] = presentDays;\r\n      };\r\n\r\n      [3, 4, 5, 6, 7, 8, 9].forEach(empId => {\r\n        updateDataset(empId, 2, 2); \r\n        updateDataset(empId, 3, 3); \r\n      });\r\n    }\r\n  }\r\n  return [];\r\n},\r\nfilterWorkteam() {\r\n  if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n    const userId = this.userDetails ? this.userDetails.userId : null;\r\n    if (userId) {\r\n      const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\r\n      const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n        const key = employee.empId;\r\n        if (!acc[key]) {\r\n          acc[key] = {\r\n            empId: employee.empId,\r\n            empName: employee.empName,\r\n            empRole: employee.empRole,\r\n            empDate: employee.date,\r\n            attendances: []\r\n          };\r\n        }\r\n        acc[key].attendances.push(employee);\r\n        return acc;\r\n      }, {});\r\n\r\n      const uniqueEmployees = Object.values(groupedEmployees);\r\n\r\n      const filteredData = uniqueEmployees.map(employee => {\r\n        const lastAttendance = employee.attendances[employee.attendances.length - 1];\r\n        if (!lastAttendance) {\r\n          console.log(`No attendance found for employee with empId ${employee.empId}.`);\r\n          return null;\r\n        }\r\n\r\n        const intimeDate = new Date(`01/01/2000 ${lastAttendance.inTime}`);\r\n        const outtimeDate = lastAttendance.outTime ? new Date(`01/01/2000 ${lastAttendance.outTime}`) : new Date();\r\n        const totalDifference = Math.abs(outtimeDate - intimeDate);\r\n        const hours = Math.min(Math.floor(totalDifference / (1000 * 60 * 60)), 9); \r\n        const minutes = Math.min(Math.floor((totalDifference % (1000 * 60 * 60)) / (1000 * 60)), 9); \r\n\r\n        return {\r\n          empId: employee.empId,\r\n          lastAttendanceDate: lastAttendance.date,\r\n          totalDifference: totalDifference,\r\n          totalHours: hours,\r\n          totalMinutes: minutes\r\n        };\r\n      });\r\n\r\n      console.log(\"🚀 ~ filteredData:\", filteredData);\r\n  \r\n      const chartData = this.chartData2.datasets[1].data;\r\n      chartData[0] = filteredData.find(emp => emp.empId === 3).totalHours;\r\n      chartData[1] = filteredData.find(emp => emp.empId === 4).totalHours;\r\n      chartData[2] = filteredData.find(emp => emp.empId === 5).totalHours;\r\n      chartData[3] = filteredData.find(emp => emp.empId === 6).totalHours;\r\n      chartData[4] = filteredData.find(emp => emp.empId === 7).totalHours;\r\n\r\n      this.chartData2.datasets[1].data = chartData;\r\n\r\n      return filteredData;\r\n    }\r\n  }\r\n  return [];\r\n},\r\navgTeamCheckIn() {\r\n  if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\r\n    console.log(\"Employee or attendances not found.\");\r\n    return; \r\n  }\r\n\r\n  let totalFilteredTime = 0;\r\n  let filteredEntryCount = 0;\r\n\r\n  this.selectedEmployee.attendances.forEach(attendance => {\r\n    const { inTime } = attendance;\r\n    const timeParts = inTime.split(':').map(part => parseInt(part, 10));\r\n    const hour = timeParts[0];\r\n    const minute = timeParts[1];\r\n    const second = timeParts[2];\r\n\r\n    if (hour >= 8 && hour < 10) {\r\n      totalFilteredTime += hour * 3600 * 1000 + minute * 60 * 1000 + second * 1000;\r\n      filteredEntryCount++;\r\n    }\r\n  });\r\n\r\n  const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\r\n  const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\r\n  const averageMinute = Math.floor((averageTimeMilliseconds % (1000 * 60 * 60)) / (1000 * 60));\r\n  const averageSecond = Math.floor((averageTimeMilliseconds % (1000 * 60)) / 1000);\r\n  const averageSecondPadded = String(averageSecond).padStart(2, '0');\r\n  const averageCheckIn = `${averageHour}:${averageMinute}:${averageSecondPadded}`;\r\n\r\n  console.log(\"🚀 ~ TeamaverageCheckIn :\", averageCheckIn);\r\n  this.TeamsummaryavgcheckIn = averageCheckIn;\r\n  return averageCheckIn;\r\n},\r\navgTeamCheckOut() {\r\n  if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\r\n    console.log(\"Employee or attendances not found.\");\r\n    return; \r\n  }\r\n\r\n  let totalFilteredTime = 0;\r\n  let filteredEntryCount = 0;\r\n\r\n  this.selectedEmployee.attendances.forEach(attendance => {\r\n    const { outTime } = attendance;\r\n    if (outTime) {\r\n      const timeParts = outTime.split(':').map(part => parseInt(part, 10));\r\n      const hour = timeParts[0];\r\n      const minute = timeParts[1];\r\n      const second = timeParts[2];\r\n\r\n      if (hour >= 17 && hour < 18) {\r\n        totalFilteredTime += hour * 3600 * 1000 + minute * 60 * 1000 + second * 1000;\r\n        filteredEntryCount++;\r\n      }\r\n    }\r\n  });\r\n\r\n  const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\r\n  const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\r\n  const averageMinute = Math.floor((averageTimeMilliseconds % (1000 * 60 * 60)) / (1000 * 60));\r\n  const averageSecond = Math.floor((averageTimeMilliseconds % (1000 * 60)) / 1000);\r\n  const averageSecondPadded = String(averageSecond).padStart(2, '0');\r\n  const averageCheckOut = `${averageHour}:${averageMinute}:${averageSecondPadded}`;\r\n\r\n  console.log(\"🚀 ~ averageCheckOut :\", averageCheckOut);\r\n  this.TeamsummaryavgcheckOut  = averageCheckOut;\r\n  return averageCheckOut;\r\n},\r\nteamAvgHours(){\r\n    if (this.selectedEmployee) {\r\n        const attendanceDates = {};\r\n        this.selectedEmployee.attendances.forEach(attendance => {\r\n            if (!attendanceDates[attendance.date]) {\r\n                attendanceDates[attendance.date] = {\r\n                    date: attendance.date,\r\n                    totalDifference: 0\r\n                };\r\n            }\r\n            if (attendance.outTime) {\r\n                const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n                const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n                const diff = Math.abs(outtimeDate - intimeDate);\r\n                attendanceDates[attendance.date].totalDifference += diff;\r\n            }\r\n        });\r\n\r\n        const filteredData = Object.values(attendanceDates).map(dateInfo => {\r\n            const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n            return {\r\n                date: dateInfo.date,\r\n                totalHours: hours\r\n            };\r\n        }).filter(record => record.date.includes(this.Search));\r\n\r\n        const totalAttendanceDates = filteredData.length;\r\n        const totalHours = filteredData.reduce((sum, record) => sum + record.totalHours, 0);\r\n        const averageTotalHours = totalAttendanceDates > 0 ? totalHours / totalAttendanceDates : 0;\r\n\r\n        console.log(\"Average Total Hours:\", averageTotalHours.toFixed(2)+'hrs');\r\n        this.Teamsummaryavghrs=averageTotalHours.toFixed(2)\r\n\r\n        return averageTotalHours;\r\n    } else {\r\n        return 0;\r\n    }\r\n},\r\nTeamOnTime() {\r\n  if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\r\n    console.log(\"Employee or attendances not found.\");\r\n    return;\r\n  }\r\n\r\n  let onTimeCount = 0;\r\n  let totalEntriesCount = 0;\r\n\r\n  this.selectedEmployee.attendances.forEach(attendance => {\r\n    const { inTime } = attendance;\r\n    const timeParts = inTime.split(':').map(part => parseInt(part, 10));\r\n    const hour = timeParts[0];\r\n    const minute = timeParts[1];\r\n    totalEntriesCount++;\r\n\r\n    if ((hour === 9 && minute === 0) || (hour === 8 && minute >= 55 && hour < 9)) {\r\n      onTimeCount++;\r\n    }\r\n  });\r\n\r\n  const onTimePercentage = Math.round((onTimeCount / totalEntriesCount) * 100);\r\n\r\n  console.log(\"🚀 ~ onTimePercentage:\", onTimePercentage + '%');\r\n  this.TeamonTimePercentage = onTimePercentage;\r\n  return onTimePercentage;\r\n}\r\n\r\n\r\n\r\n}\r\n\r\n\r\n}\r\n\r\n      \r\n</script>\r\n\r\n<style>\r\n@import url(https://fonts.googleapis.com/css?family=Inter:100,200,300,regular,500,600,700,800,900);\r\n\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n\r\n}\r\n\r\n.mainHeading {\r\n  font-family: 'Calibri Light';\r\n  color: black;\r\n  font-size: 22px;\r\n  background-color: aqua;\r\n  text-align: left;\r\n  padding-left: 45px;\r\n  height: 40px;\r\n\r\n}\r\n\r\n.TeamsContainer {\r\n  margin-top: 8px;\r\n  border-radius: 20px;\r\n  margin-left: 18%;\r\n  margin-right: 4px;\r\n  border: 1px solid;\r\n  height: auto\r\n}\r\n\r\n.TeamContainer {\r\n  display: flex;\r\n  margin-top: 4px;\r\n  padding-top: 5px;\r\n  padding-left: 30px;\r\n  padding-right: 10px;\r\n  background-color:beige;\r\n  border-radius: 10px;\r\n  margin-right: 20px;\r\n  margin-bottom: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n\r\nbody {\r\n  background-color: white;\r\n  background-size: 20%;\r\n  background-repeat: no-repeat;\r\n  background-position: 55% center;\r\n\r\n}\r\n\r\n.leavesummary {\r\n  padding-right: 200px;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n\r\n}\r\n\r\n.sidebar {\r\n  top: 40px;\r\n  left: 0;\r\n  width: px;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #1f3050;\r\n  padding: 24px;\r\n  gap: 40px;\r\n  transition: all 0.3s;\r\n  padding-left: 0%;\r\n  padding-top: 100px;\r\n}\r\n.menu .title {\r\n  position: absolute;\r\n  padding-left: 20px;\r\n  font-size: 10px;\r\n  font-weight: 500;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  margin-bottom: 10px;\r\n}\r\n.menu ul li {\r\n  position: relative;\r\n  list-style: none;\r\n  margin-bottom: 5px;\r\n}\r\n.menu ul li a.bx {\r\n  font-size: 20px;\r\n}\r\n\r\n.menu ul li a.bi {\r\n  font-size: 20px;\r\n}\r\n\r\n.menu ul li a {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  font-size: 22px;\r\n  font-weight: 500;\r\n  color: white;\r\n  text-decoration: none;\r\n  padding: 10px 4px;\r\n  padding-left: 5px;\r\n  border-radius: 8px;\r\n  transition: all 0.3s;\r\n  font-family: Arial, Helvetica, sans-serif\r\n}\r\n.menu ul li a:hover {\r\n  background-color: blue;\r\n}\r\n.nav {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 230px;\r\n}\r\n#logout {\r\n  padding-bottom: 0px;\r\n  margin-bottom: 0px;\r\n}\r\n.table1 {\r\n  margin-left: 0px;\r\n  margin-right: -10px;\r\n  padding-right: 18px;\r\n  width: 500px;\r\n  padding-left: -10px;\r\n}\r\n\r\n.DateTable {\r\n  margin-right: 5px;\r\n  padding-right: 5px;\r\n  margin-left: 300px;\r\n}\r\n\r\n.DateActivity2 {\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  width: 413px;\r\n  height: 120px;\r\n  padding-left: 10px;\r\n  padding-top: 20px;\r\n  margin-right: 20px;\r\n  margin-top:13px;\r\n border-radius: 10px;\r\n  gap: 2px;\r\n  padding-top: -5px;\r\n  margin-left: 250px;\r\n  overflow: scroll;\r\n  overflow-x: hidden; \r\n}\r\n\r\n\r\n.WeekBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: palevioletred;\r\n  width: 180px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  height: 120px;\r\n   padding-left: 3px; \r\n}\r\n\r\n.MonthBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: rgb(70, 206, 70);\r\n  width: 180px;\r\n  margin-left: 20px;\r\n  height: 120px;\r\n  padding-left: 3px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.AbsentBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: rgb(231, 14, 14);\r\n  width: 180px;\r\n  margin-left: 20px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  height: 120px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.WeekBox1 {\r\n  font-size: 22px;\r\n  padding-left: 4px;\r\n  font-family: 'Times New Roman', Times, serif;\r\n  color: palevioletred;\r\n}\r\n\r\n.MonthLeaves {\r\n  font-size: 22px;\r\npadding-left: 4px;\r\n  padding-left: 4px;\r\n  color: rgb(70, 206, 70);\r\n  font-family: 'Times New Roman', Times, serif;\r\n}\r\n\r\n.leavebalance3 {\r\n  font-size:30px;\r\n  padding-left: 10px;\r\n  color: rgb(231, 14, 14);\r\n  font-family: 'Times New Roman', Times, serif;\r\n}\r\n\r\n.StatisticsContainer {\r\n  display: flex;\r\n  border-radius: 10px;\r\n  padding-bottom: 2px;\r\n  width: 700px;\r\n  padding-top: 7px;\r\n  height: 170px;\r\n  padding-left: 15px;\r\n  margin-left: -4%;\r\n\r\n}\r\n\r\n.Heading {\r\n  padding-top: 10px;\r\n  padding-bottom: 5px;\r\n  font-size: 25px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  color: rgb(214, 60, 32);\r\n}\r\n\r\n.TeamTable {\r\n  padding-left: 10px;\r\n  padding-right: 20px;\r\n  margin-right: 10px;\r\n  border: 1px #ccc;\r\n  border-radius: 5px;\r\n  background-color: beige;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.searchElement {\r\n  border-radius: 5px;\r\n  height: 35px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n  width: 180px;\r\n  padding-left: 4px;\r\n}\r\n\r\n.punchheading {\r\n  color: red;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n}\r\n\r\n.punchValues {\r\n  color: black;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n}\r\n\r\n.pagination1 {\r\n  margin-top: 2px;\r\n  display: flex;\r\n  align-items: right;\r\n  margin-left: 1000px;\r\n  padding-left: 10px;\r\n}\r\n\r\n.pagination1 button {\r\n  padding: 8px 12px;\r\n  background-color: #007bff;\r\n  height: 4px;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-right: 5px;\r\n  padding-bottom: 29px;\r\n}\r\n\r\n.pagination1 button:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.pagination1 span {\r\n  margin: 0 10px;\r\n  font-size: 16px;\r\n}\r\n  tbody tr:nth-child(odd) {\r\n    background: #ccc;\r\n  }\r\n\r\n  table tr:hover td {\r\n    background: #839192;\r\n    color: #000;\r\n    transition: all 0.3s ease-in;\r\n    cursor: pointer;\r\n  }\r\n  th {\r\n    border-bottom: 1px solid black;\r\n    border-bottom-width: 3px;\r\n    border-bottom-style: double;\r\n  }\r\n\r\n  td {\r\n    font-family: 'Roboto';\r\n  }\r\n\r\n  th {\r\n    font-family: 'Arial';\r\n  }\r\n  .container-fluid{\r\n    margin-left: 4px;\r\n    margin-top: 15px;\r\n  }\r\n  .flex-container {\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  gap: 10px;\r\n  padding-left: 130px;\r\n  padding-top: 20px;\r\n\r\n}\r\n\r\n.card {\r\n  flex: 0 1 calc(30% - 20px); \r\n  margin-bottom: 20px;\r\n  border: 2px solid#000; \r\n  border-radius: 5px;\r\n  max-width: 225px;\r\n  background-color: aliceblue;\r\n}\r\n.fontImage{\r\n  font-size: 50px;\r\n  padding-left: 33%;\r\n}\r\n.ParaText{\r\n  padding-left: 70px;\r\n  font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n  font-size: 20px;\r\n}\r\n.TeamHeading{\r\n  padding-left: 40%;\r\n  font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  color: red;\r\n\r\n}\r\n.TeamLeavesTable{\r\n  margin-left: 1%;\r\n  background-color:aliceblue;\r\n  \r\n  margin-right: 10px;\r\n \r\n \r\n}\r\n.TeamLeaveContainer{\r\n  margin-right: 10px;\r\n  margin-bottom: 10px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  background-color: beige;\r\n}\r\n.TeamLeavesTable td{\r\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n  background-color: beige;\r\n}\r\n.TeamLeavesTable th{\r\n  background-color: beige;\r\n}\r\n.LeavesHeading{\r\n  margin-left: 1%;\r\n  padding-top: 10px;\r\n  padding-bottom: 5px;\r\n  font-size: 25px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  color: rgb(214, 60, 32);\r\n  padding-left: 2px;\r\n}\r\n.ApprovalButton{\r\n  background-color: rgb(81, 207, 81);\r\n  border-radius: 5px;\r\n  color: bisque;\r\n  padding: 2px;\r\n  width: 70px;\r\n}\r\n.DenyButton{\r\n  background-color: rgb(219, 81, 81);\r\n  width: 70px;\r\n  border-radius: 5px;\r\n  color: bisque;\r\n  padding: 2px;\r\n}\r\n.table4 th{\r\nbackground-color: beige;\r\n}\r\n.punchMainHeading{\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  color: rgb(214, 60, 32);\r\n  margin-left: 255px;\r\n  margin-top: 10px;\r\n}\r\n.attendencePart{\r\n  border: 5px solid #000;\r\n  margin-left: 18%;\r\n  border-radius: 20px;\r\n}\r\n.TeamGraph{\r\n  margin-left: 1%;\r\n  display: flex;\r\n}\r\n.TeamMonth{\r\n  height: 200px;\r\n  margin-left: 10%;\r\n  display: flex;\r\n  height: 400px;\r\n  padding-top: 30px;\r\n  width: 500px;\r\n}\r\n.TeamDay{\r\n  height: 340px;\r\n  margin-left: 1%;\r\n  display: flex;\r\n  height: 280px;\r\n  padding-top: 30px;\r\n  width: 400px;\r\n}\r\n</style> \r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}