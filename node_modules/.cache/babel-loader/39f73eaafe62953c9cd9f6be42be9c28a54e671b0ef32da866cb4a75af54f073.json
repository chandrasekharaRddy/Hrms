{"ast":null,"code":"export default {\n  data() {\n    return {\n      workingHours: [],\n      goals: [],\n      filteredGoals: [],\n      selectedDate: null\n    };\n  },\n  computed: {\n    userData() {\n      return this.$store.getters.getUserData.users;\n    },\n    employeeData() {\n      return this.$store.getters.getUserData.employeeData;\n    }\n  }\n  // watch: {\n  //   userData: {\n  //     handler(newValue) {\n  //       if (Array.isArray(newValue)) {\n  //         newValue.forEach(user => {\n  //           this.user.id = user.id;\n  //           this.user.name = user.name;\n  //           this.user.email = user.email;\n  //           this.user.role = user.role;\n  //         });\n\n  //       } else {\n  //         console.log('Error: Invalid user data format');\n  //       }\n  //     },\n  //     immediate: true,\n  //   },\n  // }\n  // methods: {\n  //   calculateWorkingHours(...timePairs) {\n  //     let totalHours = 0;\n  //     for (let i = 0; i < timePairs.length; i += 2) {\n  //       const inTime = new Date(`2000-01-01T${timePairs[i]}`);\n  //       const outTime = new Date(`2000-01-01T${timePairs[i + 1]}`);\n  //       const diff = outTime - inTime;\n  //       const hours = diff / (1000 * 60 * 60);\n  //       totalHours += hours;\n  //     }\n  //     return totalHours.toFixed(2);\n  //   },\n  //   getDate(date) {\n  //     if (this.selectedDate === date) {\n  //       this.selectedDate = null; \n  //     } else {\n  //       this.selectedDate = date;\n  //       this.filteredGoals = this.goals.filter((goal) => goal.Date === date);\n  //       this.dateVisible = false;\n  //     }\n  //   },\n  // }\n};","map":{"version":3,"names":["data","workingHours","goals","filteredGoals","selectedDate","computed","userData","$store","getters","getUserData","users","employeeData"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- Employee Table -->\r\n    <table class=\"table1\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>EmployeeId</th>\r\n          <th>EmployeeName</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>{{ employeeData.id }}</td>\r\n          <td>{{ employeeData.name }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- User Table -->\r\n    <table class=\"table2\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>UserId</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Role</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"user in userData\" :key=\"user.id\">\r\n          <td>{{ user.id }}</td>\r\n          <td>{{ user.name }}</td>\r\n          <td>{{ user.email }}</td>\r\n          <td>{{ user.role }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <!-- Placeholder for Employee Goals Table -->\r\n  <div>\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>EmployeeId</th>\r\n          <th>EmployeeName</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"employee in employeeData\" :key=\"employee.id\">\r\n          <td></td>\r\n          <td></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <!-- Working Hours Table -->\r\n  <div>\r\n    <table v-if=\"dateVisible\" class=\"table table-bordered\">\r\n      <!-- Working Hours Table -->\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(hour, index) in workingHours\" :key=\"index\">\r\n          <td @click=\"getDate(hour.date)\">{{ hour.date }}</td>\r\n          <td>{{ hour.workingHours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n\r\n  <!-- Goals Table -->\r\n  <div>\r\n    <table v-if=\"selectedDate\" class=\"table table-bordered\">\r\n      <!-- Goals Table -->\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>InTime</th>\r\n          <th>OutTime</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr >\r\n          <td></td>\r\n          <td></td>\r\n          <td></td>\r\n          <td></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      workingHours: [],\r\n      goals: [],\r\n      filteredGoals: [],\r\n      selectedDate: null,\r\n      \r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData.users;\r\n    },\r\n    employeeData() {\r\n      return this.$store.getters.getUserData.employeeData;\r\n    }\r\n  },\r\n  // watch: {\r\n  //   userData: {\r\n  //     handler(newValue) {\r\n  //       if (Array.isArray(newValue)) {\r\n  //         newValue.forEach(user => {\r\n  //           this.user.id = user.id;\r\n  //           this.user.name = user.name;\r\n  //           this.user.email = user.email;\r\n  //           this.user.role = user.role;\r\n  //         });\r\n\r\n  //       } else {\r\n  //         console.log('Error: Invalid user data format');\r\n  //       }\r\n  //     },\r\n  //     immediate: true,\r\n  //   },\r\n  // }\r\n  // methods: {\r\n  //   calculateWorkingHours(...timePairs) {\r\n  //     let totalHours = 0;\r\n  //     for (let i = 0; i < timePairs.length; i += 2) {\r\n  //       const inTime = new Date(`2000-01-01T${timePairs[i]}`);\r\n  //       const outTime = new Date(`2000-01-01T${timePairs[i + 1]}`);\r\n  //       const diff = outTime - inTime;\r\n  //       const hours = diff / (1000 * 60 * 60);\r\n  //       totalHours += hours;\r\n  //     }\r\n  //     return totalHours.toFixed(2);\r\n  //   },\r\n  //   getDate(date) {\r\n  //     if (this.selectedDate === date) {\r\n  //       this.selectedDate = null; \r\n  //     } else {\r\n  //       this.selectedDate = date;\r\n  //       this.filteredGoals = this.goals.filter((goal) => goal.Date === date);\r\n  //       this.dateVisible = false;\r\n  //     }\r\n  //   },\r\n  // }\r\n};\r\n</script>\r\n"],"mappings":"AAqGA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,KAAK,EAAE,EAAE;MACTC,aAAa,EAAE,EAAE;MACjBC,YAAY,EAAE;IAEhB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW,CAACC,KAAK;IAC9C,CAAC;IACDC,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAACJ,MAAM,CAACC,OAAO,CAACC,WAAW,CAACE,YAAY;IACrD;EACF;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}