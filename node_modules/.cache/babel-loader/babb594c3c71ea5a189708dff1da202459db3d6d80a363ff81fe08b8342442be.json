{"ast":null,"code":"export default {\n  data() {\n    return {\n      workingHours: [],\n      goals: []\n    };\n  },\n  computed: {\n    userData() {\n      return this.$store.getters.getUserData;\n    }\n  },\n  watch: {\n    userData: {\n      handler(newValue) {\n        // Assuming workingHours is an array of objects with Date and WorkingHours properties\n        this.workingHours = newValue.map(user => ({\n          Date: user.Date,\n          WorkingHours: this.calculateWorkingHours(user.InTime1, user.OutTime1, user.InTime2, user.OutTime2)\n        }));\n        this.goals = [newValue];\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    calculateWorkingHours(inTime1, outTime1, inTime2, outTime2) {\n      // Implement your logic to calculate working hours based on input times\n      // This could involve converting times to Date objects and calculating the difference\n      // Return the result as a formatted string or numerical value\n      // For simplicity, assuming times are in HH:mm format\n      const startTime = new Date(`2000-01-01T${inTime1}`);\n      const endTime = new Date(`2000-01-01T${outTime2}`);\n      const diff = endTime - startTime;\n\n      // Convert milliseconds to hours and minutes\n      const hours = Math.floor(diff / (1000 * 60 * 60));\n      const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n      return `${hours} hours ${minutes} minutes`;\n    }\n  }\n};","map":{"version":3,"names":["data","workingHours","goals","computed","userData","$store","getters","getUserData","watch","handler","newValue","map","user","Date","WorkingHours","calculateWorkingHours","InTime1","OutTime1","InTime2","OutTime2","immediate","methods","inTime1","outTime1","inTime2","outTime2","startTime","endTime","diff","hours","Math","floor","minutes"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Table for working hours -->\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"hours in workingHours\" :key=\"hours.Date\">\r\n          <td>{{ hours.Date }}</td>\r\n          <td>{{ hours.WorkingHours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Table for user details -->\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>InTime1</th>\r\n          <th>OutTime1</th>\r\n          <th>InTime2</th>\r\n          <th>OutTime2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"goal in goals\" :key=\"goal.employeeName\">\r\n          <td>{{ goal.employeeName }}</td>\r\n          <td>{{ goal.Date }}</td>\r\n          <td>{{ goal.InTime1 }}</td>\r\n          <td>{{ goal.OutTime1 }}</td>\r\n          <td>{{ goal.InTime2 }}</td>\r\n          <td>{{ goal.OutTime2 }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      workingHours: [],\r\n      goals: [],\r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData;\r\n    },\r\n  },\r\n  watch: {\r\n    userData: {\r\n      handler(newValue) {\r\n        // Assuming workingHours is an array of objects with Date and WorkingHours properties\r\n        this.workingHours = newValue.map((user) => ({\r\n          Date: user.Date,\r\n          WorkingHours: this.calculateWorkingHours(user.InTime1, user.OutTime1, user.InTime2, user.OutTime2),\r\n        }));\r\n        \r\n        this.goals = [newValue];\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  methods: {\r\n    calculateWorkingHours(inTime1, outTime1, inTime2, outTime2) {\r\n      // Implement your logic to calculate working hours based on input times\r\n      // This could involve converting times to Date objects and calculating the difference\r\n      // Return the result as a formatted string or numerical value\r\n      // For simplicity, assuming times are in HH:mm format\r\n      const startTime = new Date(`2000-01-01T${inTime1}`);\r\n      const endTime = new Date(`2000-01-01T${outTime2}`);\r\n      const diff = endTime - startTime;\r\n\r\n      // Convert milliseconds to hours and minutes\r\n      const hours = Math.floor(diff / (1000 * 60 * 60));\r\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n      return `${hours} hours ${minutes} minutes`;\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AA6CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW;IACxC;EACF,CAAC;EACDC,KAAK,EAAE;IACLJ,QAAQ,EAAE;MACRK,OAAOA,CAACC,QAAQ,EAAE;QAChB;QACA,IAAI,CAACT,YAAW,GAAIS,QAAQ,CAACC,GAAG,CAAEC,IAAI,KAAM;UAC1CC,IAAI,EAAED,IAAI,CAACC,IAAI;UACfC,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAACH,IAAI,CAACI,OAAO,EAAEJ,IAAI,CAACK,QAAQ,EAAEL,IAAI,CAACM,OAAO,EAAEN,IAAI,CAACO,QAAQ;QACnG,CAAC,CAAC,CAAC;QAEH,IAAI,CAACjB,KAAI,GAAI,CAACQ,QAAQ,CAAC;MACzB,CAAC;MACDU,SAAS,EAAE;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACPN,qBAAqBA,CAACO,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAE;MAC1D;MACA;MACA;MACA;MACA,MAAMC,SAAQ,GAAI,IAAIb,IAAI,CAAE,cAAaS,OAAQ,EAAC,CAAC;MACnD,MAAMK,OAAM,GAAI,IAAId,IAAI,CAAE,cAAaY,QAAS,EAAC,CAAC;MAClD,MAAMG,IAAG,GAAID,OAAM,GAAID,SAAS;;MAEhC;MACA,MAAMG,KAAI,GAAIC,IAAI,CAACC,KAAK,CAACH,IAAG,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;MACjD,MAAMI,OAAM,GAAIF,IAAI,CAACC,KAAK,CAAEH,IAAG,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;MAEnE,OAAQ,GAAEC,KAAK,UAAUG,OAAO,UAAU;IAC5C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}