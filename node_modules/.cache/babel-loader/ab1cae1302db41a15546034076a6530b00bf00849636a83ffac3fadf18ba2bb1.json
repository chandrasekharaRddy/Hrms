{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      selectedEmployee: null,\n      workingHours: false,\n      selectedDate: null,\n      employeeTable: true,\n      EmployeeDetailsTable: false,\n      hours: true\n    };\n  },\n  computed: {\n    userDetails() {\n      return this.$store.state.userData && this.$store.state.userData.length > 0 ? this.$store.state.userData[0] : null;\n    },\n    employeeList() {\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n            const key = employee.empId;\n            if (!acc[key]) {\n              acc[key] = {\n                empId: employee.empId,\n                empName: employee.empName,\n                empRole: employee.empRole,\n                attendances: []\n              };\n            }\n            acc[key].attendances.push(employee);\n            return acc;\n          }, {});\n          const uniqueEmployees = Object.values(groupedEmployees);\n          return uniqueEmployees;\n        }\n      }\n      return [];\n    },\n    filteredAttendances() {\n      if (this.selectedEmployee && this.selectedDate) {\n        return this.groupedEmployees.attendances.filter(attendance => attendance.date === this.selectedDate);\n      }\n      return [];\n    },\n    workingHoursData() {\n      if (this.groupedEmployees) {\n        console.log(\"ðŸš€ ~ workingHoursData ~ this.groupedEmployees:\", this.groupedEmployees);\n        const attendanceDates = {};\n        this.groupedEmployees.attendances.forEach(attendance => {\n          if (!attendanceDates[attendance.date]) {\n            attendanceDates[attendance.date] = {\n              date: attendance.date,\n              totalDifference: 0\n            };\n          }\n          if (attendance.outTime) {\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[attendance.date].totalDifference += diff;\n          }\n        });\n        const result = Object.values(attendanceDates).map(dateInfo => {\n          const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n          const minutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n          return {\n            date: dateInfo.date,\n            totalHours: hours,\n            totalMinutes: minutes\n          };\n        });\n        return result;\n      }\n      return [];\n    },\n    averageHours() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / this.workingHoursData.length;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        return `${averageHours} hours ${averageMinutes} minutes`;\n      }\n      return null;\n    }\n  },\n  methods: {\n    showEmployeeDetails(employee) {\n      this.selectedEmployee = employee;\n      this.workingHours = true;\n      this.employeeTable = false;\n      this.averageHours = true;\n    },\n    getValues(date) {\n      this.selectedDate = date;\n      this.employeeTable = false;\n      this.workingHours = true;\n      this.EmployeeDetailsTable = true;\n    }\n  }\n};","map":{"version":3,"names":["data","selectedEmployee","workingHours","selectedDate","employeeTable","EmployeeDetailsTable","hours","computed","userDetails","$store","state","userData","length","employeeList","userId","filteredEmployees","filter","employee","empId","groupedEmployees","reduce","acc","key","empName","empRole","attendances","push","uniqueEmployees","Object","values","filteredAttendances","attendance","date","workingHoursData","console","log","attendanceDates","forEach","totalDifference","outTime","intimeDate","Date","inTime","outtimeDate","diff","Math","abs","result","map","dateInfo","floor","minutes","totalHours","totalMinutes","averageHours","curr","totalInMinutes","averageInMinutes","averageMinutes","methods","showEmployeeDetails","getValues"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"container-fluid\">\r\n     <p v-if=\"averageHours !== null\">Average Hours: {{ averageHours }}</p>\r\n     <p v-if=\"hours\">Average Hours:{{ averageHours }}</p>\r\n    <!-- Employee Table -->\r\n    <div class=\"row\">\r\n      <div class=\"col\">\r\n        <table v-if=\"employeeTable && employeeList && employeeList.length > 0\" class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th style=\"width: 33%;\">Employee_Id</th>\r\n              <th style=\"width: 33%;\">EmployeeName</th>\r\n              <th style=\"width: 33%;\">EmployeeRole</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(employee, index) in employeeList\" :key=\"index\" @click=\"showEmployeeDetails(employee)\">\r\n              <td style=\"width: 33%;\">{{ employee.empId }}</td>\r\n              <td style=\"width: 33%;\">{{ employee.empName }}</td>\r\n              <td style=\"width: 33%;\">{{ employee.empRole }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    \r\n    <!-- Working Hours Table -->\r\n    <div class=\"row\">\r\n      <div class=\"col\">\r\n        <table v-if=\"workingHours\" class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>Date</th>\r\n              <th>Total Working Hours</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(record, index) in workingHoursData\" :key=\"index\" @click=\"getValues(record.date)\">\r\n              <td>{{ record.date }}</td>\r\n              <td>{{ record.totalHours }} hours {{ record.totalMinutes }} minutes</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n    <br>\r\n    <br>\r\n    <!-- Employee Details Table -->\r\n    <div v-if=\"EmployeeDetailsTable\">\r\n    <div class=\"row\">\r\n      <div class=\"col\">\r\n        <table v-if=\"selectedEmployee\" class=\"table table-bordered\">\r\n          <thead>\r\n            <tr>\r\n              <th>EmployeeId</th>\r\n              <th>Date</th>\r\n              <th>Intime</th>\r\n              <th>Outtime</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr v-for=\"(attendance, index) in filteredAttendances\" :key=\"index\">\r\n              <td>{{ selectedEmployee.empId }}</td>\r\n              <td>{{ attendance.date }}</td>\r\n              <td>{{ attendance.inTime }}</td>\r\n              <td>{{ attendance.outTime }}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedEmployee: null,\r\n      workingHours: false,\r\n      selectedDate: null,\r\n      employeeTable: true,\r\n      EmployeeDetailsTable:false,\r\n      hours:true\r\n    };\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.state.userData && this.$store.state.userData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n  if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n    const userId = this.userDetails ? this.userDetails.userId : null;\r\n    if (userId) {\r\n      const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\r\n      const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n        const key = employee.empId;\r\n        if (!acc[key]) {\r\n          acc[key] = {\r\n            empId: employee.empId,\r\n            empName: employee.empName,\r\n            empRole: employee.empRole,\r\n            attendances: []\r\n          };\r\n        }\r\n        acc[key].attendances.push(employee);\r\n        return acc;\r\n      }, {});\r\n      const uniqueEmployees = Object.values(groupedEmployees);\r\n      return uniqueEmployees;\r\n    }\r\n  }\r\n  return [];\r\n},\r\n    filteredAttendances() {\r\n      if (this.selectedEmployee && this.selectedDate) {\r\n        return this.groupedEmployees.attendances.filter(attendance => attendance.date === this.selectedDate);\r\n      }\r\n      return [];\r\n    },\r\n    workingHoursData() {\r\n      if (this.groupedEmployees) {\r\n        console.log(\"ðŸš€ ~ workingHoursData ~ this.groupedEmployees:\", this.groupedEmployees)\r\n        const attendanceDates = {};\r\n        this.groupedEmployees.attendances.forEach(attendance => {\r\n          if (!attendanceDates[attendance.date]) {\r\n            attendanceDates[attendance.date] = {\r\n              date: attendance.date,\r\n              totalDifference: 0\r\n            };\r\n          }\r\n          if (attendance.outTime) {\r\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n            const diff = Math.abs(outtimeDate - intimeDate);\r\n            attendanceDates[attendance.date].totalDifference += diff;\r\n          }\r\n        });\r\n\r\n        const result = Object.values(attendanceDates).map(dateInfo => {\r\n          const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n          const minutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n          return {\r\n            date: dateInfo.date,\r\n            totalHours: hours,\r\n            totalMinutes: minutes,\r\n          };\r\n        });\r\n\r\n        return result;\r\n      }\r\n      return [];\r\n    },\r\n    averageHours() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / this.workingHoursData.length;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        return `${averageHours} hours ${averageMinutes} minutes`;\r\n      }\r\n      return null;\r\n    }\r\n  },\r\n  methods: {\r\n    showEmployeeDetails(employee) {\r\n      this.selectedEmployee = employee;\r\n      this.workingHours = true;\r\n      this.employeeTable = false;\r\n      this.averageHours=true\r\n    \r\n    },\r\n    getValues(date) {\r\n      this.selectedDate = date;\r\n      this.employeeTable = false; \r\n    this.workingHours = true;\r\n    this.EmployeeDetailsTable=true\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\ntbody tr:nth-child(odd) {\r\n  background: #ccc;\r\n}\r\n\r\ntable tr:hover td {\r\n  background: #839192;\r\n  color: #000;\r\n  transition: all 0.3s ease-in;\r\n  cursor: pointer;\r\n}\r\nth {\r\n  \r\n  border-bottom: 1px solid black, 3px double black;  \r\n}\r\n\r\n td {\r\nfont-family: 'Roboto';\r\n} \r\nth{\r\n  font-family: 'Arial';\r\n}\r\n\r\n</style>\r\n"],"mappings":";AA4EA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE,IAAI;MACtBC,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE,IAAI;MACnBC,oBAAoB,EAAC,KAAK;MAC1BC,KAAK,EAAC;IACR,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACC,MAAM,CAACC,KAAK,CAACC,QAAO,IAAK,IAAI,CAACF,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACC,MAAK,GAAI,IACrE,IAAI,CAACH,MAAM,CAACC,KAAK,CAACC,QAAQ,CAAC,CAAC,IAC5B,IAAI;IACV,CAAC;IACDE,YAAYA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACJ,MAAM,CAACC,KAAK,CAACC,QAAO,IAAK,IAAI,CAACF,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACC,MAAK,GAAI,CAAC,EAAE;QACvE,MAAME,MAAK,GAAI,IAAI,CAACN,WAAU,GAAI,IAAI,CAACA,WAAW,CAACM,MAAK,GAAI,IAAI;QAChE,IAAIA,MAAM,EAAE;UACV,MAAMC,iBAAgB,GAAI,IAAI,CAACN,MAAM,CAACC,KAAK,CAACC,QAAQ,CAACK,MAAM,CAACC,QAAO,IAAKA,QAAQ,CAACC,KAAI,KAAMJ,MAAM,CAAC;UAClG,MAAMK,gBAAe,GAAIJ,iBAAiB,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEJ,QAAQ,KAAK;YACnE,MAAMK,GAAE,GAAIL,QAAQ,CAACC,KAAK;YAC1B,IAAI,CAACG,GAAG,CAACC,GAAG,CAAC,EAAE;cACbD,GAAG,CAACC,GAAG,IAAI;gBACTJ,KAAK,EAAED,QAAQ,CAACC,KAAK;gBACrBK,OAAO,EAAEN,QAAQ,CAACM,OAAO;gBACzBC,OAAO,EAAEP,QAAQ,CAACO,OAAO;gBACzBC,WAAW,EAAE;cACf,CAAC;YACH;YACAJ,GAAG,CAACC,GAAG,CAAC,CAACG,WAAW,CAACC,IAAI,CAACT,QAAQ,CAAC;YACnC,OAAOI,GAAG;UACZ,CAAC,EAAE,CAAC,CAAC,CAAC;UACN,MAAMM,eAAc,GAAIC,MAAM,CAACC,MAAM,CAACV,gBAAgB,CAAC;UACvD,OAAOQ,eAAe;QACxB;MACF;MACA,OAAO,EAAE;IACX,CAAC;IACGG,mBAAmBA,CAAA,EAAG;MACpB,IAAI,IAAI,CAAC7B,gBAAe,IAAK,IAAI,CAACE,YAAY,EAAE;QAC9C,OAAO,IAAI,CAACgB,gBAAgB,CAACM,WAAW,CAACT,MAAM,CAACe,UAAS,IAAKA,UAAU,CAACC,IAAG,KAAM,IAAI,CAAC7B,YAAY,CAAC;MACtG;MACA,OAAO,EAAE;IACX,CAAC;IACD8B,gBAAgBA,CAAA,EAAG;MACjB,IAAI,IAAI,CAACd,gBAAgB,EAAE;QACzBe,OAAO,CAACC,GAAG,CAAC,gDAAgD,EAAE,IAAI,CAAChB,gBAAgB;QACnF,MAAMiB,eAAc,GAAI,CAAC,CAAC;QAC1B,IAAI,CAACjB,gBAAgB,CAACM,WAAW,CAACY,OAAO,CAACN,UAAS,IAAK;UACtD,IAAI,CAACK,eAAe,CAACL,UAAU,CAACC,IAAI,CAAC,EAAE;YACrCI,eAAe,CAACL,UAAU,CAACC,IAAI,IAAI;cACjCA,IAAI,EAAED,UAAU,CAACC,IAAI;cACrBM,eAAe,EAAE;YACnB,CAAC;UACH;UACA,IAAIP,UAAU,CAACQ,OAAO,EAAE;YACtB,MAAMC,UAAS,GAAI,IAAIC,IAAI,CAAE,cAAaV,UAAU,CAACW,MAAO,EAAC,CAAC;YAC9D,MAAMC,WAAU,GAAI,IAAIF,IAAI,CAAE,cAAaV,UAAU,CAACQ,OAAQ,EAAC,CAAC;YAChE,MAAMK,IAAG,GAAIC,IAAI,CAACC,GAAG,CAACH,WAAU,GAAIH,UAAU,CAAC;YAC/CJ,eAAe,CAACL,UAAU,CAACC,IAAI,CAAC,CAACM,eAAc,IAAKM,IAAI;UAC1D;QACF,CAAC,CAAC;QAEF,MAAMG,MAAK,GAAInB,MAAM,CAACC,MAAM,CAACO,eAAe,CAAC,CAACY,GAAG,CAACC,QAAO,IAAK;UAC5D,MAAM3C,KAAI,GAAIuC,IAAI,CAACK,KAAK,CAACD,QAAQ,CAACX,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;UACrE,MAAMa,OAAM,GAAIN,IAAI,CAACK,KAAK,CAAED,QAAQ,CAACX,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;UACvF,OAAO;YACLN,IAAI,EAAEiB,QAAQ,CAACjB,IAAI;YACnBoB,UAAU,EAAE9C,KAAK;YACjB+C,YAAY,EAAEF;UAChB,CAAC;QACH,CAAC,CAAC;QAEF,OAAOJ,MAAM;MACf;MACA,OAAO,EAAE;IACX,CAAC;IACDO,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAACrB,gBAAgB,CAACrB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACnB,gBAAgB,CAACb,MAAM,CAAC,CAACC,GAAG,EAAEkC,IAAI,KAAKlC,GAAE,GAAIkC,IAAI,CAACH,UAAU,EAAE,CAAC,CAAC;QACxF,MAAMC,YAAW,GAAI,IAAI,CAACpB,gBAAgB,CAACb,MAAM,CAAC,CAACC,GAAG,EAAEkC,IAAI,KAAKlC,GAAE,GAAIkC,IAAI,CAACF,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMG,cAAa,GAAIJ,UAAS,GAAI,EAAC,GAAIC,YAAY;QACrD,MAAMI,gBAAe,GAAID,cAAa,GAAI,IAAI,CAACvB,gBAAgB,CAACrB,MAAM;QACtE,MAAM0C,YAAW,GAAIT,IAAI,CAACK,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAIb,IAAI,CAACK,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,OAAQ,GAAEH,YAAY,UAAUI,cAAc,UAAU;MAC1D;MACA,OAAO,IAAI;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,mBAAmBA,CAAC3C,QAAQ,EAAE;MAC5B,IAAI,CAAChB,gBAAe,GAAIgB,QAAQ;MAChC,IAAI,CAACf,YAAW,GAAI,IAAI;MACxB,IAAI,CAACE,aAAY,GAAI,KAAK;MAC1B,IAAI,CAACkD,YAAY,GAAC,IAAG;IAEvB,CAAC;IACDO,SAASA,CAAC7B,IAAI,EAAE;MACd,IAAI,CAAC7B,YAAW,GAAI6B,IAAI;MACxB,IAAI,CAAC5B,aAAY,GAAI,KAAK;MAC5B,IAAI,CAACF,YAAW,GAAI,IAAI;MACxB,IAAI,CAACG,oBAAoB,GAAC,IAAG;IAC7B;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}