{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  data() {\n    return {\n      selectedDate: null,\n      employeeTable: true,\n      hours: true,\n      Search: \"\",\n      punchValues: {\n        Intime1: null,\n        Intime2: null,\n        Outtime1: null,\n        Outtime2: null,\n        Intime3: [],\n        Outtime3: []\n      }\n    };\n  },\n  created() {\n    this.initializePunchValues();\n  },\n  mounted() {\n    this.chartVersion = Chart.version;\n    this.renderChart();\n    const ctx = this.$refs.myChart.getContext('2d');\n    new Chart(ctx, {\n      type: 'bar',\n      data: this.chartData,\n      options: this.chartOptions,\n      plugins: [this.progressBarPlugin]\n    });\n  },\n  computed: {\n    userDetails() {\n      return this.$store.getters.getUserData && this.$store.getters.getUserData.length > 0 ? this.$store.state.userData[0] : null;\n    },\n    employeeList() {\n      if (this.$store.getters.getUserData && this.$store.getters.getUserData.length > 0) {\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n            const key = employee.empId;\n            if (!acc[key]) {\n              acc[key] = {\n                empId: employee.empId,\n                empName: employee.empName,\n                empRole: employee.empRole,\n                attendances: []\n              };\n            }\n            acc[key].attendances.push(employee);\n            return acc;\n          }, {});\n          const uniqueEmployees = Object.values(groupedEmployees);\n          return uniqueEmployees;\n        }\n      }\n      return [];\n    },\n    workingHoursData() {\n      const attendanceDates = {};\n      const referenceDate = '01/01/2000';\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          const {\n            date,\n            inTime,\n            outTime\n          } = attendance;\n          if (!attendanceDates[date]) {\n            attendanceDates[date] = {\n              date: date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[date].Intime.push(inTime);\n          if (outTime) {\n            const intimeDate = new Date(`${referenceDate} ${inTime}`);\n            const outtimeDate = new Date(`${referenceDate} ${outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[date].totalDifference += diff;\n            attendanceDates[date].Outtime.push(outTime);\n          }\n        });\n      });\n      const result = Object.values(attendanceDates).map(dateInfo => {\n        const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n        const totalMinutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n        return {\n          date: dateInfo.date,\n          Intime: dateInfo.Intime,\n          Outtime: dateInfo.Outtime,\n          totalHours: totalHours,\n          totalMinutes: totalMinutes\n        };\n      }).filter(record => record.date.includes(this.Search));\n      return result;\n    },\n    getteam() {\n      return this.$store.getters.getTeamMembers;\n    }\n  },\n  methods: {\n    initializePunchValues() {\n      if (this.workingHoursData.length > 0) {\n        const record = this.workingHoursData[0];\n        this.punchValues.Intime1 = record.Intime[0];\n        this.punchValues.Intime2 = record.Intime[1];\n        this.punchValues.Outtime1 = record.Outtime[0];\n        this.punchValues.Outtime2 = record.Outtime[1];\n        this.punchValues.Intime3 = record.Intime[2] || [];\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\n      }\n      this.updateEnteries();\n    },\n    getPunchDetails(record) {\n      this.punchValues.Intime1 = record.Intime[0];\n      this.punchValues.Intime2 = record.Intime[1];\n      this.punchValues.Outtime1 = record.Outtime[0];\n      this.punchValues.Outtime2 = record.Outtime[1];\n      this.punchValues.Intime3 = record.Intime[2] || [];\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\n    }\n    //     updateEnteries(){\n    //       const attendanceDates = {};\n    //   const referenceDate = '01/01/2000';\n    //   this.employeeList.forEach(employee => {\n    //     employee.attendances.forEach(attendance => {\n    //       const { date, inTime, outTime } = attendance;\n    //       if (!attendanceDates[date]) {\n    //         attendanceDates[date] = {\n    //           date: date,\n    //           Intime: [],\n    //           Outtime: [],\n    //           totalDifference: 0,\n    //         };\n    //       }\n    //       attendanceDates[date].Intime.push(inTime);\n    //       if (outTime) {\n    //         const intimeDate = new Date(`${referenceDate} ${inTime}`);\n    //         const outtimeDate = new Date(`${referenceDate} ${outTime}`);\n    //         const diff = Math.abs(outtimeDate - intimeDate);\n    //         attendanceDates[date].totalDifference += diff;\n    //         attendanceDates[date].Outtime.push(outTime);\n    //       }\n    //     });\n    //   });\n\n    //   const earlyentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //       const month = new Date(dateInfo.date).getMonth();\n    //       if (month === 2) {\n    //         return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\n\n    //       }\n    //       return count;\n    //     }, 0);\n    //   const ontime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //     const month = new Date(dateInfo.date).getMonth();\n    //     if (month === 2) {\n    //     return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n    //     }\n    //     return count;\n    //   }, 0);\n    //   const lateentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //     const month = new Date(dateInfo.date).getMonth();\n    //     if (month === 2) {\n    //     return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n    //     }\n    //     return count;\n    //   }, 0);\n    //   const overtime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //     const month = new Date(dateInfo.date).getMonth();\n    //     if (month === 2) {\n    //     return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n    //     }\n    //     return count;\n    //   }, 0);\n    // const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //   const month = new Date(dateInfo.date).getMonth();\n    //   if (month === 2) {\n    //   return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n    //   }\n    //   return count;\n    // }, 0);\n    //   // console.log(\"ðŸš€ ~ early:\", earlyentry3);\n    //   // console.log(\"ðŸš€ ~ ontime:\", ontime3);\n    //   // console.log(\"ðŸš€ ~ lateentry:\", lateentry3);\n    //   // console.log(\"ðŸš€ ~ overtime:\", overtime3);\n    //   // console.log(\"ðŸš€ ~ earlyLeave:\", earlyLeave3);\n    //   this.chartData3.datasets[0].data[2] = earlyentry3;\n    //       this.chartData3.datasets[1].data[2] = ontime3;\n    //       this.chartData3.datasets[2].data[2] = lateentry3;\n    //       this.chartData3.datasets[3].data[2] = earlyLeave3;\n    //       this.chartData3.datasets[4].data[2] = overtime3;\n\n    //   const earlyentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //       const month = new Date(dateInfo.date).getMonth();\n    //       if (month === 3) {\n    //         return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\n    //       }\n    //       return count;\n    //     }, 0);\n    //   const ontime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //     const month = new Date(dateInfo.date).getMonth();\n    //     if (month === 3) {\n    //     return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n    //     }\n    //     return count;\n    //   }, 0);\n    //   const lateentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //     const month = new Date(dateInfo.date).getMonth();\n    //     if (month === 3) {\n    //     return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n    //     }\n    //     return count;\n    //   }, 0);\n    //   const overtime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //     const month = new Date(dateInfo.date).getMonth();\n    //     if (month === 3) {\n    //     return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n    //     }\n    //     return count;\n    //   }, 0);\n    // const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n    //   const month = new Date(dateInfo.date).getMonth();\n    //   if (month === 4) {\n    //   return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n    //   }\n    //   return count;\n    // }, 0);\n\n    //   this.chartData3.datasets[0].data[3] = earlyentry4;\n    //       this.chartData3.datasets[1].data[3] = ontime4;\n    //       this.chartData3.datasets[2].data[3] = lateentry4;\n    //       this.chartData3.datasets[3].data[3] = earlyLeave4;\n    //       this.chartData3.datasets[4].data[3] = overtime4;\n\n    //   const result = Object.values(attendanceDates).map(dateInfo => {\n    //     const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n    //     const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\n    //     return {\n    //       date: dateInfo.date,\n    //       Intime: dateInfo.Intime,\n    //       Outtime: dateInfo.Outtime,\n    //       totalHours: totalHours,\n    //       totalMinutes: totalMinutes\n    //     };\n    //   })\n    //   return result;\n    // },\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","data","selectedDate","employeeTable","hours","Search","punchValues","Intime1","Intime2","Outtime1","Outtime2","Intime3","Outtime3","created","initializePunchValues","mounted","chartVersion","version","renderChart","ctx","$refs","myChart","getContext","type","chartData","options","chartOptions","plugins","progressBarPlugin","computed","userDetails","$store","getters","getUserData","length","state","userData","employeeList","userId","filteredEmployees","filter","employee","empId","groupedEmployees","reduce","acc","key","empName","empRole","attendances","push","uniqueEmployees","Object","values","workingHoursData","attendanceDates","referenceDate","forEach","attendance","date","inTime","outTime","Intime","Outtime","totalDifference","intimeDate","Date","outtimeDate","diff","Math","abs","result","map","dateInfo","totalHours","floor","totalMinutes","record","includes","getteam","getTeamMembers","methods","updateEnteries","getPunchDetails"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["\r\n\r\n<template>\r\n  <div class=\"mainHeading\">\r\n    <p>HRMS- Human Resource Management System</p>\r\n  </div>\r\n  <div class=\"mainContainer\">\r\n    <div class=\"upperContainer\">\r\n      <div class=\"summmaryContainer\">\r\n        <h4 class=\"summaryHeading\">Summary:</h4>\r\n        <div class=\"upperValue\">\r\n          <div class=\"avgAttend\">\r\n            <i class='bx bxs-time attend'></i>\r\n            <h6 class=\"attendHeading\">Avg Hours</h6>\r\n          </div>\r\n          <div class=\"avgCheckin\">\r\n            <i class='bx bxs-log-in-circle attend'></i>\r\n            <h6 class=\"attendHeading\">Avg Check-in</h6>\r\n          </div>\r\n        </div>\r\n        <div class=\"downvalue\">\r\n          <div class=\"avgOntime\">\r\n            <i class='bx bxs-time-five attend' ></i>\r\n            <h6 class=\"attendHeading\">On-time</h6>\r\n          </div>\r\n          <div class=\"avgCheckout\">\r\n            <i class='bx bxs-log-out-circle attend' ></i>\r\n            <h6 class=\"attendHeading\">Avg Check-out</h6>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"statisticsContainer\">\r\n        <h4 class=\"statisticsHeading\">Statistics:</h4>\r\n       <div class=\"statsticsbar\">\r\n    <canvas ref=\"myChart\"  class=\"bargraph2\"></canvas>\r\n  </div>\r\n      </div>\r\n      <div class=\"punchContainer\">\r\n        <h4 class=\"dateactivityHeading\">Date Activity:</h4>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Intime1 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Outtime1 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime2 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime2 }}</p>\r\n        </div>\r\n        <div v-if=\"punchValues.Intime3 && punchValues.Intime3.length > 1\" >\r\n          <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime3 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime3 }}</p>\r\n        </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"downContainer\">\r\n      <div class=\"attendanceTable\">\r\n        <div><input type=\"text\" placeholder=\"Search\" class=\"searchElement\" v-model=\"Search\"></div>\r\n      <div class=\"attendanceday\">\r\n        <table class=\"table table-bordered\">\r\n<thead>\r\n  <tr>\r\n    <th>Date</th>\r\n    <th>Intime</th>\r\n    <th>Outtime</th>\r\n    <th>WorkingHours</th>\r\n  </tr>\r\n</thead>\r\n<tbody>\r\n  <tr v-for=\"(record, index) in workingHoursData\" :key=\"index\" @click=\"getPunchDetails(record)\">\r\n              <td>{{ record.date }}</td>\r\n              <td>{{ record.Intime[0] }}</td>\r\n              <td>{{ record.Outtime[1] }}</td>\r\n              <td>{{ record.totalHours }} hrs {{ record.totalMinutes }} mins</td>\r\n            </tr>\r\n</tbody>\r\n      </table>\r\n      </div>\r\n    </div>\r\n    <div class=\"barDrawing\">\r\n      <div class=\"bargraph1\">\r\n      <canvas ref=\"myChart3\"></canvas>\r\n    </div>\r\n    </div>\r\n    </div>  \r\n</div>\r\n    <div class=\"sidebar\">\r\n      <div class=\"nav\">\r\n        <div class=\"menu\">\r\n          <ul>\r\n            <li>\r\n              <a href=\"#\">\r\n                <i class='bx bx-home'></i>\r\n                <span class=\"text\">Home</span>\r\n              </a>\r\n            </li>\r\n            <li class=\"active\">\r\n              <a href=\"#\">\r\n                <i class=\"fa-solid fa-users\"></i>\r\n                <RouterLink to=\"/members\" class=\"text\"> Team Members</RouterLink>\r\n              </a>\r\n            </li>\r\n            <li class=\"active\">\r\n              <a href=\"#\">\r\n                <i class='bx bxs-calendar'></i>\r\n              \r\n                <RouterLink to=\"/attendence\" class=\"text\">Attendence</RouterLink>\r\n              </a>\r\n            </li>\r\n            <li class=\"active\">\r\n              <a href=\"#\">\r\n                <i class='bx bxs-calendar'></i>\r\n              \r\n                <RouterLink to=\"/leaveMembers\" class=\"text\">Leave</RouterLink>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"menu\" id=\"logout\">\r\n          <ul>\r\n            <li>\r\n              <a href=\"#\">\r\n                <i class='bx bx-info-circle'></i>\r\n                <span class=\"text\">Help</span>\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#\">\r\n                <i class='bx bx-log-out'></i>\r\n                <RouterLink to=\"/\" class=\"text\" @click=\"logout\"> Logout</RouterLink>\r\n              </a>\r\n            </li>\r\n            \r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  data() {\r\n    return { \r\n      selectedDate: null, \r\n      employeeTable: true,\r\n      hours: true,\r\n      Search: \"\",\r\n      punchValues: {\r\n        Intime1: null,\r\n        Intime2: null,\r\n        Outtime1: null,\r\n        Outtime2: null,\r\n        Intime3: [],\r\n        Outtime3: []\r\n      },\r\n\r\n    };\r\n  },\r\n  created() {\r\n    this.initializePunchValues();\r\n  },\r\n  mounted() {\r\n    this.chartVersion = Chart.version;\r\n    this.renderChart();\r\n    const ctx = this.$refs.myChart.getContext('2d');\r\n    new Chart(ctx, {\r\n      type: 'bar',\r\n      data: this.chartData,\r\n      options: this.chartOptions,\r\n      plugins: [this.progressBarPlugin]\r\n    });\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.getters. getUserData && this.$store.getters.getUserData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n      if (this.$store.getters. getUserData && this.$store.getters.getUserData.length > 0) {\r\n        const userId = this.userDetails ? this.userDetails.userId : null;\r\n        if (userId) {\r\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\r\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n            const key = employee.empId;\r\n            if (!acc[key]) {\r\n              acc[key] = {\r\n                empId: employee.empId,\r\n                empName: employee.empName,\r\n                empRole: employee.empRole,\r\n                attendances: []\r\n              };\r\n            }\r\n            acc[key].attendances.push(employee);\r\n            return acc;\r\n          }, {});\r\n          const uniqueEmployees = Object.values(groupedEmployees);\r\n          return uniqueEmployees;\r\n        }\r\n      }\r\n      return [];\r\n    },\r\n    workingHoursData() {\r\n  const attendanceDates = {};\r\n  const referenceDate = '01/01/2000';\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { date, inTime, outTime } = attendance;\r\n      if (!attendanceDates[date]) {\r\n        attendanceDates[date] = {\r\n          date: date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0,\r\n        };\r\n      }\r\n      attendanceDates[date].Intime.push(inTime);\r\n      if (outTime) {\r\n        const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n        const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[date].totalDifference += diff;\r\n        attendanceDates[date].Outtime.push(outTime);\r\n      }\r\n    });\r\n  });\r\n  const result = Object.values(attendanceDates).map(dateInfo => {\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n    return {\r\n      date: dateInfo.date,\r\n      Intime: dateInfo.Intime,\r\n      Outtime: dateInfo.Outtime,\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  }).filter(record => record.date.includes(this.Search));\r\n  return result;\r\n},\r\n    getteam() {\r\n      return this.$store.getters.getTeamMembers;\r\n    },\r\n  },\r\n  methods:{\r\n    initializePunchValues() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const record = this.workingHoursData[0];\r\n        this.punchValues.Intime1 = record.Intime[0];\r\n        this.punchValues.Intime2 = record.Intime[1];\r\n        this.punchValues.Outtime1 = record.Outtime[0];\r\n        this.punchValues.Outtime2 = record.Outtime[1];\r\n        this.punchValues.Intime3 = record.Intime[2] || [];\r\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n      }\r\n      this.updateEnteries();\r\n    },\r\n    getPunchDetails(record) {\r\n      this.punchValues.Intime1 = record.Intime[0];\r\n      this.punchValues.Intime2 = record.Intime[1];\r\n      this.punchValues.Outtime1 = record.Outtime[0];\r\n      this.punchValues.Outtime2 = record.Outtime[1];\r\n      this.punchValues.Intime3 = record.Intime[2] || [];\r\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n    },\r\n//     updateEnteries(){\r\n//       const attendanceDates = {};\r\n//   const referenceDate = '01/01/2000';\r\n//   this.employeeList.forEach(employee => {\r\n//     employee.attendances.forEach(attendance => {\r\n//       const { date, inTime, outTime } = attendance;\r\n//       if (!attendanceDates[date]) {\r\n//         attendanceDates[date] = {\r\n//           date: date,\r\n//           Intime: [],\r\n//           Outtime: [],\r\n//           totalDifference: 0,\r\n//         };\r\n//       }\r\n//       attendanceDates[date].Intime.push(inTime);\r\n//       if (outTime) {\r\n//         const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n//         const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n//         const diff = Math.abs(outtimeDate - intimeDate);\r\n//         attendanceDates[date].totalDifference += diff;\r\n//         attendanceDates[date].Outtime.push(outTime);\r\n//       }\r\n//     });\r\n//   });\r\n\r\n//   const earlyentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//       const month = new Date(dateInfo.date).getMonth();\r\n//       if (month === 2) {\r\n//         return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\r\n        \r\n//       }\r\n//       return count;\r\n//     }, 0);\r\n//   const ontime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//     const month = new Date(dateInfo.date).getMonth();\r\n//     if (month === 2) {\r\n//     return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n//     }\r\n//     return count;\r\n//   }, 0);\r\n//   const lateentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//     const month = new Date(dateInfo.date).getMonth();\r\n//     if (month === 2) {\r\n//     return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n//     }\r\n//     return count;\r\n//   }, 0);\r\n//   const overtime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//     const month = new Date(dateInfo.date).getMonth();\r\n//     if (month === 2) {\r\n//     return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n//     }\r\n//     return count;\r\n//   }, 0);\r\n// const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//   const month = new Date(dateInfo.date).getMonth();\r\n//   if (month === 2) {\r\n//   return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n//   }\r\n//   return count;\r\n// }, 0);\r\n//   // console.log(\"ðŸš€ ~ early:\", earlyentry3);\r\n//   // console.log(\"ðŸš€ ~ ontime:\", ontime3);\r\n//   // console.log(\"ðŸš€ ~ lateentry:\", lateentry3);\r\n//   // console.log(\"ðŸš€ ~ overtime:\", overtime3);\r\n//   // console.log(\"ðŸš€ ~ earlyLeave:\", earlyLeave3);\r\n//   this.chartData3.datasets[0].data[2] = earlyentry3;\r\n//       this.chartData3.datasets[1].data[2] = ontime3;\r\n//       this.chartData3.datasets[2].data[2] = lateentry3;\r\n//       this.chartData3.datasets[3].data[2] = earlyLeave3;\r\n//       this.chartData3.datasets[4].data[2] = overtime3;\r\n\r\n     \r\n  \r\n//   const earlyentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//       const month = new Date(dateInfo.date).getMonth();\r\n//       if (month === 3) {\r\n//         return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\r\n//       }\r\n//       return count;\r\n//     }, 0);\r\n//   const ontime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//     const month = new Date(dateInfo.date).getMonth();\r\n//     if (month === 3) {\r\n//     return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n//     }\r\n//     return count;\r\n//   }, 0);\r\n//   const lateentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//     const month = new Date(dateInfo.date).getMonth();\r\n//     if (month === 3) {\r\n//     return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n//     }\r\n//     return count;\r\n//   }, 0);\r\n//   const overtime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//     const month = new Date(dateInfo.date).getMonth();\r\n//     if (month === 3) {\r\n//     return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n//     }\r\n//     return count;\r\n//   }, 0);\r\n// const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n//   const month = new Date(dateInfo.date).getMonth();\r\n//   if (month === 4) {\r\n//   return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n//   }\r\n//   return count;\r\n// }, 0);\r\n  \r\n//   this.chartData3.datasets[0].data[3] = earlyentry4;\r\n//       this.chartData3.datasets[1].data[3] = ontime4;\r\n//       this.chartData3.datasets[2].data[3] = lateentry4;\r\n//       this.chartData3.datasets[3].data[3] = earlyLeave4;\r\n//       this.chartData3.datasets[4].data[3] = overtime4;\r\n\r\n//   const result = Object.values(attendanceDates).map(dateInfo => {\r\n//     const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n//     const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n//     return {\r\n//       date: dateInfo.date,\r\n//       Intime: dateInfo.Intime,\r\n//       Outtime: dateInfo.Outtime,\r\n//       totalHours: totalHours,\r\n//       totalMinutes: totalMinutes\r\n//     };\r\n//   })\r\n//   return result;\r\n// },\r\n  }\r\n};\r\n\r\n</script>\r\n<style>\r\n.upperContainer{\r\n  display: flex;\r\n}\r\n.summmaryContainer{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 400px;\r\n  height: 370px;\r\n  margin-top: 20px;\r\n  margin-left:1%;\r\n}\r\n.statisticsContainer{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 400px;\r\n  height: 370px;\r\n  margin-top: 20px;\r\n  margin-left:2%;\r\n}\r\n.punchContainer{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 400px;\r\n  height: 370px;\r\n  margin-top: 20px;\r\n  margin-left:2%;\r\n}\r\n.downContainer{\r\n  display: flex;\r\n}\r\n.searchElement {\r\n  border-radius: 5px;\r\n  margin-top: 5px;\r\n  margin-left: 10px;\r\n  height: 35px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n  width: 180px;\r\n  padding-left: 4px;\r\n}\r\n.attendanceTable{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 830px;\r\n  height: 300px;\r\n  margin-top: 20px;\r\n  margin-left: 1%;\r\n  overflow: scroll;\r\n  overflow-x: hidden;\r\n}\r\n.barDrawing{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 380px;\r\n  height: 300px;\r\n  margin-top: 20px;\r\n  margin-left:2%;\r\n}\r\n.bargraph1{\r\n  width: 350px;\r\n  height: 300px;\r\n}\r\n.downvalue,.upperValue{\r\n  display: flex;\r\n}\r\n.avgAttend{\r\n  border: 1px solid;\r\n  width: 120px;\r\n  height: 110px;\r\n  margin-top: 25px;\r\n  margin-left: 14%;\r\n  border-radius: 5px;\r\n}\r\n.avgCheckin{\r\n  border: 1px solid;\r\n  width: 120px;\r\n  height: 110px;\r\n  margin-top: 25px;\r\n  margin-left: 10%;\r\n  border-radius: 5px;\r\n}\r\n.avgOntime{\r\n  border: 1px solid;\r\n  width: 120px;\r\n  height: 120px;\r\n  margin-top: 30px;\r\n  margin-left: 14%;\r\n  border-radius: 5px;\r\n}\r\n.avgCheckout{\r\n  border: 1px solid;\r\n  width: 120px;\r\n  height: 120px;\r\n  margin-top: 30px;\r\n  margin-left: 10%;\r\n  border-radius: 5px;\r\n}\r\n.attend{\r\n  font-size: 30px;\r\n  margin-top: 15px;\r\n  margin-left: 20px;\r\n}\r\n.attendHeading{\r\n  margin-left: 13%;\r\n  font-size: 13px;\r\n  font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n}\r\n.summaryHeading{\r\n  color:rgb(21, 126, 196);\r\n  margin-left: 5%;\r\n  margin-top: 5%;\r\n}\r\n.statisticsHeading{\r\n  color:rgb(21, 126, 196);\r\n  margin-left: 5%;\r\n  margin-top: 5%;\r\n}\r\n.dateactivityHeading{\r\n  color:rgb(21, 126, 196);\r\n  margin-left: 5%;\r\n  margin-top: 5%;\r\n}\r\n.insidepunchValues{\r\n  display: flex;\r\n  margin-left: 70px;\r\n  margin-top: 20px;\r\n}\r\n.attendanceday{\r\n  margin-top: 20px;\r\n  margin-left: 1px;\r\n  margin-right: 1px;\r\n}\r\n.attendanceday table th{\r\n font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n background-color:azure;\r\n}\r\n.bargraph2{\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n.statsticsbar{\r\n  height: 500px;\r\n  width: 380px;\r\n}\r\n</style> \r\n\r\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}