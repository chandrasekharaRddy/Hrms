{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  data() {\n    return {\n      selectedDate: null,\n      employeeTable: true,\n      hours: true,\n      Search: \"\",\n      punchValues: {\n        Intime1: null,\n        Intime2: null,\n        Outtime1: null,\n        Outtime2: null,\n        Intime3: [],\n        Outtime3: []\n      },\n      chart: null,\n      chartData3: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n        datasets: [{\n          label: 'earlyEntry',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'ontime',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'late',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'earlyleave',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'overtime',\n          data: [0, 0, 0, 0, 0, 0]\n        }]\n      },\n      chartOptions3: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Attendance'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  },\n  created() {\n    this.initializePunchValues();\n  },\n  mounted() {\n    this.chartVersion = Chart.version;\n    this.renderChart();\n    const ctx = this.$refs.myChart.getContext('2d');\n    new Chart(ctx, {\n      type: 'bar',\n      data: this.chartData,\n      options: this.chartOptions,\n      plugins: [this.progressBarPlugin]\n    });\n  },\n  computed: {\n    userDetails() {\n      return this.$store.getters.getUserData && this.$store.getters.getUserData.length > 0 ? this.$store.state.userData[0] : null;\n    },\n    employeeList() {\n      if (this.$store.getters.getUserData && this.$store.getters.getUserData.length > 0) {\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n            const key = employee.empId;\n            if (!acc[key]) {\n              acc[key] = {\n                empId: employee.empId,\n                empName: employee.empName,\n                empRole: employee.empRole,\n                attendances: []\n              };\n            }\n            acc[key].attendances.push(employee);\n            return acc;\n          }, {});\n          const uniqueEmployees = Object.values(groupedEmployees);\n          return uniqueEmployees;\n        }\n      }\n      return [];\n    },\n    workingHoursData() {\n      const attendanceDates = {};\n      const referenceDate = '01/01/2000';\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          const {\n            date,\n            inTime,\n            outTime\n          } = attendance;\n          if (!attendanceDates[date]) {\n            attendanceDates[date] = {\n              date: date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[date].Intime.push(inTime);\n          if (outTime) {\n            const intimeDate = new Date(`${referenceDate} ${inTime}`);\n            const outtimeDate = new Date(`${referenceDate} ${outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[date].totalDifference += diff;\n            attendanceDates[date].Outtime.push(outTime);\n          }\n        });\n      });\n      const result = Object.values(attendanceDates).map(dateInfo => {\n        const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n        const totalMinutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n        return {\n          date: dateInfo.date,\n          Intime: dateInfo.Intime,\n          Outtime: dateInfo.Outtime,\n          totalHours: totalHours,\n          totalMinutes: totalMinutes\n        };\n      }).filter(record => record.date.includes(this.Search));\n      return result;\n    },\n    averageHours() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / this.workingHoursData.length;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.workingHoursData.length;\n        console.log(totallength);\n        return `${averageHours} hrs ${averageMinutes} mins`;\n      }\n      return null;\n    },\n    WeekHours() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / 5;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.filteredWorkingHoursData.length;\n        console.log(totallength);\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\n      }\n      return null;\n    },\n    MonthHours() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.WorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.WorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.filteredWorkingHoursData.length;\n        console.log(totallength);\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\n      }\n      return null;\n    },\n    chartData() {\n      return {\n        labels: ['Today', 'Week', 'Month'],\n        datasets: [{\n          data: [{\n            value: 0,\n            max: 9\n          }, {\n            value: 0,\n            max: 45\n          }, {\n            value: 0,\n            max: 180\n          }],\n          backgroundColor: ['rgba(255, 26, 104, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)'],\n          borderColor: ['rgba(255, 26, 104, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)'],\n          borderWidth: 1,\n          borderSkipped: false,\n          borderRadius: 5,\n          barPercentage: 0.2,\n          categoryPercentage: 0.5\n        }]\n      };\n    },\n    getteam() {\n      return this.$store.getters.getTeamMembers;\n    },\n    chartOptions() {\n      return {\n        indexAxis: 'y',\n        plugins: {\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              display: false\n            }\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              display: false\n            },\n            ticks: {\n              display: false\n            }\n          }\n        }\n      };\n    },\n    progressBarPlugin() {\n      return {\n        beforeDatasetDraw(chart) {\n          const {\n            ctx,\n            chartArea: {\n              left,\n              right,\n              width,\n              height\n            },\n            scales: {\n              y\n            }\n          } = chart;\n          ctx.save();\n          const dataset = chart.data.datasets[0];\n          const barHeight = height / y.ticks.length * dataset.barPercentage * dataset.categoryPercentage;\n          dataset.data.forEach((data, index) => {\n            const yPosition = y.getPixelForValue(index) - barHeight / 2;\n            ctx.font = '15px sans-serif';\n            ctx.fillStyle = 'rgba(102, 102, 102, 1)';\n            ctx.textAlign = 'left';\n            ctx.textBaseline = 'middle';\n            ctx.fillText(chart.data.labels[index], left, yPosition - 10);\n            const dataText = `${data.value}/${data.max} Hrs`;\n            ctx.font = 'bold 15px sans-serif';\n            ctx.textAlign = 'right';\n            ctx.fillText(dataText, right, yPosition - 10);\n            const barWidth = width * (data.value / data.max);\n            ctx.fillStyle = dataset.borderColor[index];\n            ctx.fillRect(left, yPosition, barWidth, barHeight);\n          });\n          ctx.restore();\n        }\n      };\n    }\n  },\n  methods: {\n    initializePunchValues() {\n      if (this.workingHoursData.length > 0) {\n        const record = this.workingHoursData[0];\n        this.punchValues.Intime1 = record.Intime[0];\n        this.punchValues.Intime2 = record.Intime[1];\n        this.punchValues.Outtime1 = record.Outtime[0];\n        this.punchValues.Outtime2 = record.Outtime[1];\n        this.punchValues.Intime3 = record.Intime[2] || [];\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\n      }\n      this.updateEnteries();\n      this.avgcheckin();\n      this.avgCheckOut();\n      this.OntimePercentage();\n      this.averageHours1();\n      this.MonthHours1();\n      this.WeekHours1();\n    },\n    getPunchDetails(record) {\n      this.punchValues.Intime1 = record.Intime[0];\n      this.punchValues.Intime2 = record.Intime[1];\n      this.punchValues.Outtime1 = record.Outtime[0];\n      this.punchValues.Outtime2 = record.Outtime[1];\n      this.punchValues.Intime3 = record.Intime[2] || [];\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\n    },\n    updateEnteries() {\n      const attendanceDates = {};\n      const referenceDate = '01/01/2000';\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          const {\n            date,\n            inTime,\n            outTime\n          } = attendance;\n          if (!attendanceDates[date]) {\n            attendanceDates[date] = {\n              date: date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[date].Intime.push(inTime);\n          if (outTime) {\n            const intimeDate = new Date(`${referenceDate} ${inTime}`);\n            const outtimeDate = new Date(`${referenceDate} ${outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[date].totalDifference += diff;\n            attendanceDates[date].Outtime.push(outTime);\n          }\n        });\n      });\n      const marchpresentdays = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const date = new Date(dateInfo.date);\n        const month = date.getMonth();\n        if (month === 2) {\n          return count + 1;\n        }\n        return count;\n      }, 0);\n      console.log(\"🚀 ~ no of days present in MarchMonth:\", marchpresentdays);\n      const AprilPresentDays = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const date = new Date(dateInfo.date);\n        const month = date.getMonth();\n        if (month === 3) {\n          return count + 1;\n        }\n        return count;\n      }, 0);\n      console.log(\"🚀 ~ no of days present in April Month:\", AprilPresentDays);\n      const earlyentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\n        }\n        return count;\n      }, 0);\n      const ontime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n        }\n        return count;\n      }, 0);\n      const lateentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n        }\n        return count;\n      }, 0);\n      const overtime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n        }\n        return count;\n      }, 0);\n      const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n        }\n        return count;\n      }, 0);\n      // console.log(\"🚀 ~ early:\", earlyentry3);\n      // console.log(\"🚀 ~ ontime:\", ontime3);\n      // console.log(\"🚀 ~ lateentry:\", lateentry3);\n      // console.log(\"🚀 ~ overtime:\", overtime3);\n      // console.log(\"🚀 ~ earlyLeave:\", earlyLeave3);\n      this.chartData3.datasets[0].data[2] = earlyentry3;\n      this.chartData3.datasets[1].data[2] = ontime3;\n      this.chartData3.datasets[2].data[2] = lateentry3;\n      this.chartData3.datasets[3].data[2] = earlyLeave3;\n      this.chartData3.datasets[4].data[2] = overtime3;\n      const earlyentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 3) {\n          return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\n        }\n        return count;\n      }, 0);\n      const ontime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 3) {\n          return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n        }\n        return count;\n      }, 0);\n      const lateentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 3) {\n          return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n        }\n        return count;\n      }, 0);\n      const overtime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 3) {\n          return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n        }\n        return count;\n      }, 0);\n      const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 4) {\n          return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n        }\n        return count;\n      }, 0);\n      this.chartData3.datasets[0].data[3] = earlyentry4;\n      this.chartData3.datasets[1].data[3] = ontime4;\n      this.chartData3.datasets[2].data[3] = lateentry4;\n      this.chartData3.datasets[3].data[3] = earlyLeave4;\n      this.chartData3.datasets[4].data[3] = overtime4;\n      const result = Object.values(attendanceDates).map(dateInfo => {\n        const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n        const totalMinutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n        return {\n          date: dateInfo.date,\n          Intime: dateInfo.Intime,\n          Outtime: dateInfo.Outtime,\n          totalHours: totalHours,\n          totalMinutes: totalMinutes\n        };\n      });\n      return result;\n    },\n    avgcheckin() {\n      let totalFilteredTime = 0;\n      let filteredEntryCount = 0;\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          const {\n            inTime\n          } = attendance;\n          const timeParts = inTime.split(':').map(part => parseInt(part, 10));\n          const hour = timeParts[0];\n          const minute = timeParts[1];\n          const second = timeParts[2];\n          if (hour >= 8 && hour < 10) {\n            const timeMilliseconds = (hour * 3600 + minute * 60 + second) * 1000;\n            totalFilteredTime += timeMilliseconds;\n            filteredEntryCount++;\n          }\n        });\n      });\n      const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\n      const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\n      const averageMinute = Math.floor(averageTimeMilliseconds % (1000 * 60 * 60) / (1000 * 60));\n      const averageSecond = Math.floor(averageTimeMilliseconds % (1000 * 60) / 1000);\n      const averageCheckIn = `${averageHour}:${averageMinute}:${averageSecond}`;\n      console.log(\"🚀 ~ averageCheckIn :\", averageCheckIn);\n      this.summaryavgcheckIn = averageCheckIn;\n      return averageCheckIn;\n    },\n    avgCheckOut() {\n      let totalFilteredTime = 0;\n      let filteredEntryCount = 0;\n      this.employeeList.forEach(employee => {\n        if (employee.attendances && Array.isArray(employee.attendances)) {\n          employee.attendances.forEach(attendance => {\n            if (attendance.inTime) {\n              const timeParts = attendance.inTime.split(':').map(part => parseInt(part, 10));\n              if (timeParts.length === 3) {\n                const hour = timeParts[0];\n                const minute = timeParts[1];\n                const second = timeParts[2];\n                if (hour >= 17 && hour < 18) {\n                  const timeMilliseconds = (hour * 3600 + minute * 60 + second) * 1000;\n                  totalFilteredTime += timeMilliseconds;\n                  filteredEntryCount++;\n                }\n              }\n            }\n          });\n        }\n      });\n      const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\n      const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\n      const averageMinute = Math.floor(averageTimeMilliseconds % (1000 * 60 * 60) / (1000 * 60));\n      const averageSecond = Math.floor(averageTimeMilliseconds % (1000 * 60) / 1000);\n      const formattedHour = String(averageHour).padStart(2, '0');\n      const formattedMinute = String(averageMinute).padStart(2, '0');\n      const formattedSecond = String(averageSecond).padStart(2, '0');\n      const averageCheckOut = `${formattedHour}:${formattedMinute}:${formattedSecond}`;\n      console.log(\"🚀 ~ averageCheckOut :\", averageCheckOut);\n      this.summaryavgCheckOut = averageCheckOut;\n      return averageCheckOut;\n    },\n    OntimePercentage() {\n      let onTimeCount = 0;\n      let totalEntriesCount = 0;\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          const {\n            inTime\n          } = attendance;\n          const timeParts = inTime.split(':').map(part => parseInt(part, 10));\n          const hour = timeParts[0];\n          const minute = timeParts[1];\n          const second = timeParts[2];\n          totalEntriesCount++;\n          if (hour === 9 && minute === 0 && second === 0) {\n            onTimeCount++;\n          }\n        });\n      });\n      const onTimePercentage = Math.round(onTimeCount / totalEntriesCount * 100);\n      console.log(\"🚀 ~ onTimePercentage:\", onTimePercentage + '%');\n      this.ontimePercentage = onTimePercentage;\n      return onTimePercentage + '%';\n    },\n    renderChart() {\n      const ctx = this.$refs.myChart3.getContext('2d');\n      this.chart = new Chart(ctx, {\n        type: 'bar',\n        data: this.chartData3,\n        options: this.chartOptions3\n      });\n    },\n    WeekHours1() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / 5;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.workingHoursData.length;\n        console.log(totallength);\n        this.chartData.datasets[0].data[1] = {\n          value: averageHours,\n          max: 45\n        };\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\n      }\n      return null;\n    },\n    MonthHours1() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.workingHoursData.length;\n        console.log(totallength);\n        this.chartData.datasets[0].data[2] = {\n          value: averageHours,\n          max: 180\n        };\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\n      }\n      return null;\n    },\n    averageHours1() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / this.workingHoursData.length;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.workingHoursData.length;\n        console.log(totallength);\n        this.chartData.datasets[0].data[0] = {\n          value: averageHours,\n          max: 9\n        };\n        return `${averageHours} hrs ${averageMinutes} mins`;\n      }\n      return null;\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","data","selectedDate","employeeTable","hours","Search","punchValues","Intime1","Intime2","Outtime1","Outtime2","Intime3","Outtime3","chart","chartData3","labels","datasets","label","chartOptions3","responsive","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","created","initializePunchValues","mounted","chartVersion","version","renderChart","ctx","$refs","myChart","getContext","type","chartData","options","chartOptions","progressBarPlugin","computed","userDetails","$store","getters","getUserData","length","state","userData","employeeList","userId","filteredEmployees","filter","employee","empId","groupedEmployees","reduce","acc","key","empName","empRole","attendances","push","uniqueEmployees","Object","values","workingHoursData","attendanceDates","referenceDate","forEach","attendance","date","inTime","outTime","Intime","Outtime","totalDifference","intimeDate","Date","outtimeDate","diff","Math","abs","result","map","dateInfo","totalHours","floor","totalMinutes","record","includes","averageHours","curr","totalInMinutes","averageInMinutes","averageMinutes","totallength","console","log","WeekHours","filteredWorkingHoursData","MonthHours","WorkingHoursData","value","max","backgroundColor","borderColor","borderWidth","borderSkipped","borderRadius","barPercentage","categoryPercentage","getteam","getTeamMembers","indexAxis","legend","x","grid","ticks","beforeDatasetDraw","chartArea","left","right","width","height","save","dataset","barHeight","index","yPosition","getPixelForValue","font","fillStyle","textAlign","textBaseline","fillText","dataText","barWidth","fillRect","restore","methods","updateEnteries","avgcheckin","avgCheckOut","OntimePercentage","averageHours1","MonthHours1","WeekHours1","getPunchDetails","marchpresentdays","count","month","getMonth","AprilPresentDays","earlyentry3","time","ontime3","lateentry3","overtime3","earlyLeave3","earlyentry4","ontime4","lateentry4","overtime4","earlyLeave4","totalFilteredTime","filteredEntryCount","timeParts","split","part","parseInt","hour","minute","second","timeMilliseconds","averageTimeMilliseconds","averageHour","averageMinute","averageSecond","averageCheckIn","summaryavgcheckIn","Array","isArray","formattedHour","String","padStart","formattedMinute","formattedSecond","averageCheckOut","summaryavgCheckOut","onTimeCount","totalEntriesCount","onTimePercentage","round","ontimePercentage","myChart3"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["\r\n\r\n<template>\r\n  <div>\r\n    <div class=\"container-fluid border w-100 p-2 mainHeading\">HRMS - Human Resource Management System</div>\r\n    <div class=\"container-fluid mainContainer\">\r\n      <div class=\"row flex-nowrap\">\r\n        <div class=\"bg-dark col-auto col-md-2 col-lg-2 min-vh-100 d-flex flex-column justify-content\">\r\n          <div class=\"bg-dark p-2\">\r\n            <ul class=\"nav nav-pills flex-column mainnav mt-5 gap-3\">\r\n              <li class=\"nav-item py-2 py-sm-0\">\r\n                <a href=\"#\" class=\"nav-link text-white\">\r\n                  <i class=\"fa-solid fa-house\"></i>\r\n                  <RouterLink to=\"/navigation\"  class=\"fs-4 d-none d-sm-inline\">Home</RouterLink>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item py-2 py-sm-0\">\r\n                <a href=\"#\" class=\"nav-link text-white\">\r\n                  <i class=\"fa-solid fa-calendar-days\"></i>\r\n                  <RouterLink to=\"/attendence\" class=\"fs-4 d-none d-sm-inline\">Attendence</RouterLink>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item py-2 py-sm-0\" v-if=\"getteam\">\r\n                <a href=\"#\" class=\"nav-link text-white\">\r\n                  <i class=\"fa-solid fa-users\"></i>\r\n                  <RouterLink to=\"/members\" class=\"fs-4 d-none d-sm-inline\">Team Members</RouterLink>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div class=\"mt-auto p-2\">\r\n            <ul class=\"nav flex-column\">\r\n              <li class=\"nav-item py-2 py-sm-0 mt-5\">\r\n                    <a href=\"#\" class=\"nav-link text-white\">\r\n                      <i class='bx bx-info-circle'></i>\r\n                      <span class=\"fs-4 d-none d-sm-inline\">Help</span>\r\n                    </a>\r\n                </li>\r\n                <li class=\"nav-item py-2 py-sm-0 mt-5\">\r\n                    <a href=\"#\" class=\"nav-link text-white no-underline\">\r\n                        <i class=\"bx bx-log-out\"></i>\r\n                        <RouterLink to=\"/\" @click=\"logout\" class=\"fs-4 d-none d-sm-inline\">Logout</RouterLink>\r\n                    </a>\r\n                </li>\r\n            </ul>\r\n        </div>s\r\n        </div>\r\n        <div class=\"col p-4 content-area\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n              <div class=\"col border\">\r\n                <h4 class=\"text-info\">Summary:</h4>\r\n      <div class=\"container mt-5 d-flex justify-content-center  gap-3\">\r\n  <div class=\"card text-center\">\r\n    <div class=\"card-header \">\r\n      <div class=\"d-flex justify-content-center \">\r\n        <div class=\"col\">\r\n          <i class='bx bxs-time attend'></i>\r\n            <h6 class=\"attendHeading\">Avg Hours</h6>\r\n            <h6>{{ averageHours }}</h6>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"card text-center\">\r\n    <div class=\"card-header \">\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div class=\"col\">\r\n          <i class='bx bxs-log-in-circle attend'></i>\r\n          <h6 class=\"attendHeading\">Avg Check-in</h6>\r\n          <h6>{{ this.summaryavgcheckIn }}</h6>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n      <div class=\"container mt-5 d-flex justify-content-center gap-3 bottom-padding\">\r\n  <div class=\"card text-center\">\r\n    <div class=\"card-header \">\r\n      <div class=\"d-flex justify-content-center align-items-center\">\r\n        <div class=\"col\">\r\n          <i class='bx bxs-time-five attend' ></i>\r\n          <h6 class=\"attendHeading\">On-time</h6>\r\n          <h6>{{ this.ontimePercentage+'%' }}</h6>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"card text-center\">\r\n    <div class=\"card-header \">\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div class=\"col\">\r\n          <i class='bx bxs-log-out-circle attend' ></i>\r\n          <h6 class=\"attendHeading\">Avg Check-out</h6>\r\n          <h6>{{ this.summaryavgCheckOut }}</h6>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  </div>\r\n    </div>\r\n    <div class=\"col border\">\r\n      <h4 class=\"text-info\">Statistics:</h4>\r\n      <canvas class=\"bargraph2\" ref=\"myChart\" width=\"480\" height=\"390\" style=\"padding-left: -10px;\"></canvas>\r\n    </div>\r\n    <div class=\"col border\">\r\n      <h4 class=\"text-info\">Date Activity:</h4>\r\n      <div class=\"container\">\r\n      <div class=\"row\">\r\n          <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\" style=\"padding-left: 12px;\">{{ punchValues.Intime1 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <pre class=\"punchValues\">  {{ punchValues.Outtime1 }}</pre>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <pre class=\"punchValues\">     {{  punchValues.Intime2 }}</pre>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime2 }}</p>\r\n        </div>\r\n        <div v-if=\"punchValues.Intime3 && punchValues.Intime3.length > 1\" >\r\n          <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime3 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime3 }}</p>\r\n        </div>\r\n        </div>\r\n     </div>\r\n    </div>\r\n    </div>\r\n    <div class=\"container border\">\r\n      <div class=\"row\">     \r\n  <div class=\"col-8\">\r\n    <h4 class=\"text-info\">Attendance:</h4>\r\n    <div class=\"col-sm-3 search\">\r\n      <input type=\"password\" class=\"form-control\" placeholder=\"Search\" v-model=\"Search\">\r\n    </div>\r\n    <div style=\"max-height: 400px; overflow-y: auto;\">\r\n                <table class=\"table table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th scope=\"col\">Date</th>\r\n                            <th scope=\"col\">Intime</th>\r\n                            <th scope=\"col\">Outtime</th>\r\n                            <th scope=\"col\">WorkingHours</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr v-for=\"(record, index) in workingHoursData\" :key=\"index\" @click=\"getPunchDetails(record)\">\r\n                            <td>{{ record.date }}</td>\r\n                            <td>{{ record.Intime[0] }}</td>\r\n                            <td>{{ record.Outtime[1] }}</td>\r\n                            <td>{{ record.totalHours }} hrs {{ record.totalMinutes }} mins</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n  </div>\r\n  <div class=\"col-4\" style=\"height: 500px;\">\r\n    <h4 class=\"text-info\">Bargraph:</h4>\r\n    <canvas ref=\"myChart3\"></canvas>\r\n  </div>\r\n</div>\r\n    </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  data() {\r\n    return { \r\n      selectedDate: null,\r\n      employeeTable: true,\r\n      hours: true,\r\n      Search: \"\",\r\n      punchValues: {\r\n        Intime1: null,\r\n        Intime2: null,\r\n        Outtime1: null,\r\n        Outtime2: null,\r\n        Intime3: [],\r\n        Outtime3: []\r\n      },\r\n      chart: null, \r\n      chartData3: {\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n        datasets: [\r\n          {\r\n          label: 'earlyEntry',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'ontime',\r\n          data: [0,0,0,0,0,0]\r\n        },\r\n        {\r\n          label: 'late',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'earlyleave',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'overtime',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n      ]\r\n      },\r\n      \r\n      chartOptions3: {\r\n         responsive: true,\r\n          maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n            \r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n  },\r\n  created() {\r\n    this.initializePunchValues();\r\n  },\r\n  mounted() {\r\n    this.chartVersion = Chart.version;\r\n    this.renderChart();\r\n    const ctx = this.$refs.myChart.getContext('2d');\r\n    new Chart(ctx, {\r\n      type: 'bar',\r\n      data: this.chartData,\r\n      options: this.chartOptions,\r\n      plugins: [this.progressBarPlugin]\r\n    });\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.getters. getUserData && this.$store.getters.getUserData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n      if (this.$store.getters. getUserData && this.$store.getters.getUserData.length > 0) {\r\n        const userId = this.userDetails ? this.userDetails.userId : null;\r\n        if (userId) {\r\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\r\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n            const key = employee.empId;\r\n            if (!acc[key]) {\r\n              acc[key] = {\r\n                empId: employee.empId,\r\n                empName: employee.empName,\r\n                empRole: employee.empRole,\r\n                attendances: []\r\n              };\r\n            }\r\n            acc[key].attendances.push(employee);\r\n            return acc;\r\n          }, {});\r\n          const uniqueEmployees = Object.values(groupedEmployees);\r\n          return uniqueEmployees;\r\n        }\r\n      }\r\n      return [];\r\n    },\r\n    workingHoursData() {\r\n  const attendanceDates = {};\r\n  const referenceDate = '01/01/2000';\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { date, inTime, outTime } = attendance;\r\n      if (!attendanceDates[date]) {\r\n        attendanceDates[date] = {\r\n          date: date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0,\r\n        };\r\n      }\r\n      attendanceDates[date].Intime.push(inTime);\r\n      if (outTime) {\r\n        const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n        const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[date].totalDifference += diff;\r\n        attendanceDates[date].Outtime.push(outTime);\r\n      }\r\n    });\r\n  });\r\n \r\n  const result = Object.values(attendanceDates).map(dateInfo => {\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n    return {\r\n      date: dateInfo.date,\r\n      Intime: dateInfo.Intime,\r\n      Outtime: dateInfo.Outtime,\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  }).filter(record => record.date.includes(this.Search));\r\n  return result;\r\n},\r\naverageHours() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / this.workingHoursData.length;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength=this.workingHoursData.length;\r\n        console.log(totallength);\r\n        return `${averageHours} hrs ${averageMinutes} mins`;\r\n       \r\n      }\r\n      return null;\r\n    },\r\n\r\nWeekHours() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / 5;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.filteredWorkingHoursData.length;\r\n         console.log(totallength);\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n      }\r\n      return null;\r\n    },\r\n    MonthHours() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.WorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.WorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.filteredWorkingHoursData.length;\r\n         console.log(totallength);\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n\r\n      }\r\n      return null;\r\n    },\r\n    chartData() {\r\n      return {\r\n        labels: ['Today', 'Week', 'Month'],\r\n        datasets: [{\r\n          data: [\r\n        { value: 0, max: 9 },\r\n        { value: 0, max: 45 },\r\n        { value: 0, max: 180 }\r\n      ],\r\n          backgroundColor: [\r\n            'rgba(255, 26, 104, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 26, 104, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n          ],\r\n          borderWidth: 1,\r\n          borderSkipped: false,\r\n          borderRadius: 5,\r\n          barPercentage: 0.2,\r\n          categoryPercentage: 0.5,\r\n        }]\r\n      };\r\n    },\r\n    getteam() {\r\n      return this.$store.getters.getTeamMembers;\r\n    },\r\n    chartOptions() {\r\n      return {\r\n        indexAxis: 'y',\r\n        plugins: {\r\n          legend: { display: false }\r\n        },\r\n        scales: {\r\n          x: { grid: { display: false }, ticks: { display: false } },\r\n          y: { beginAtZero: true, grid: { display: false }, ticks: { display: false } }\r\n        }\r\n      };\r\n    },\r\n    progressBarPlugin() {\r\n  return {\r\n    beforeDatasetDraw(chart) {\r\n      const { ctx, chartArea: { left, right, width, height }, scales: { y } } = chart;\r\n      ctx.save();\r\n\r\n      const dataset = chart.data.datasets[0];\r\n      const barHeight = height / y.ticks.length * dataset.barPercentage * dataset.categoryPercentage;\r\n\r\n      dataset.data.forEach((data, index) => {\r\n        const yPosition = y.getPixelForValue(index) - barHeight / 2;\r\n\r\n        ctx.font = '15px sans-serif';\r\n        ctx.fillStyle = 'rgba(102, 102, 102, 1)';\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillText(chart.data.labels[index], left, yPosition - 10);\r\n        const dataText = `${data.value}/${data.max} Hrs`;\r\n        ctx.font = 'bold 15px sans-serif';\r\n        ctx.textAlign = 'right';\r\n        ctx.fillText(dataText, right, yPosition - 10);\r\n        const barWidth = width * (data.value / data.max);\r\n        ctx.fillStyle = dataset.borderColor[index];\r\n        ctx.fillRect(left, yPosition, barWidth, barHeight);\r\n      });\r\n\r\n      ctx.restore();\r\n    }\r\n  };\r\n}\r\n  },\r\n  methods:{\r\n    initializePunchValues() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const record = this.workingHoursData[0];\r\n        this.punchValues.Intime1 = record.Intime[0];\r\n        this.punchValues.Intime2 = record.Intime[1];\r\n        this.punchValues.Outtime1 = record.Outtime[0];\r\n        this.punchValues.Outtime2 = record.Outtime[1];\r\n        this.punchValues.Intime3 = record.Intime[2] || [];\r\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n      }\r\n      this.updateEnteries();\r\n      this.avgcheckin();\r\n      this.avgCheckOut();\r\n      this.OntimePercentage();\r\n      this.averageHours1();\r\n       this.MonthHours1();\r\n       this.WeekHours1();\r\n    },\r\n    getPunchDetails(record) {\r\n      this.punchValues.Intime1 = record.Intime[0];\r\n      this.punchValues.Intime2 = record.Intime[1];\r\n      this.punchValues.Outtime1 = record.Outtime[0];\r\n      this.punchValues.Outtime2 = record.Outtime[1];\r\n      this.punchValues.Intime3 = record.Intime[2] || [];\r\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n    },\r\n    updateEnteries(){\r\n      const attendanceDates = {};\r\n  const referenceDate = '01/01/2000';\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { date, inTime, outTime } = attendance;\r\n      if (!attendanceDates[date]) {\r\n        attendanceDates[date] = {\r\n          date: date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0,\r\n        };\r\n      }\r\n      attendanceDates[date].Intime.push(inTime);\r\n      if (outTime) {\r\n        const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n        const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[date].totalDifference += diff;\r\n        attendanceDates[date].Outtime.push(outTime);\r\n      }\r\n    });\r\n  });\r\n  const  marchpresentdays= Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const date = new Date(dateInfo.date);\r\n  const month = date.getMonth();\r\n  if (month === 2) {\r\n    return count + 1; \r\n  }\r\n  return count;\r\n}, 0);\r\nconsole.log(\"🚀 ~ no of days present in MarchMonth:\", marchpresentdays);\r\nconst  AprilPresentDays= Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const date = new Date(dateInfo.date);\r\n  const month = date.getMonth();\r\n  if (month === 3) {\r\n    return count + 1; \r\n  }\r\n  return count;\r\n}, 0);\r\n\r\nconsole.log(\"🚀 ~ no of days present in April Month:\", AprilPresentDays);\r\n  const earlyentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n      const month = new Date(dateInfo.date).getMonth();\r\n      if (month === 2) {\r\n        return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\r\n        \r\n      }\r\n      return count;\r\n    }, 0);\r\n  const ontime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const lateentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const overtime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconst earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const month = new Date(dateInfo.date).getMonth();\r\n  if (month === 2) {\r\n  return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n  }\r\n  return count;\r\n}, 0);\r\n  // console.log(\"🚀 ~ early:\", earlyentry3);\r\n  // console.log(\"🚀 ~ ontime:\", ontime3);\r\n  // console.log(\"🚀 ~ lateentry:\", lateentry3);\r\n  // console.log(\"🚀 ~ overtime:\", overtime3);\r\n  // console.log(\"🚀 ~ earlyLeave:\", earlyLeave3);\r\n  this.chartData3.datasets[0].data[2] = earlyentry3;\r\n      this.chartData3.datasets[1].data[2] = ontime3;\r\n      this.chartData3.datasets[2].data[2] = lateentry3;\r\n      this.chartData3.datasets[3].data[2] = earlyLeave3;\r\n      this.chartData3.datasets[4].data[2] = overtime3;\r\n\r\n     \r\n  \r\n  const earlyentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n      const month = new Date(dateInfo.date).getMonth();\r\n      if (month === 3) {\r\n        return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\r\n      }\r\n      return count;\r\n    }, 0);\r\n  const ontime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const lateentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const overtime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconst earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const month = new Date(dateInfo.date).getMonth();\r\n  if (month === 4) {\r\n  return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n  }\r\n  return count;\r\n}, 0);\r\n  \r\n  this.chartData3.datasets[0].data[3] = earlyentry4;\r\n      this.chartData3.datasets[1].data[3] = ontime4;\r\n      this.chartData3.datasets[2].data[3] = lateentry4;\r\n      this.chartData3.datasets[3].data[3] = earlyLeave4;\r\n      this.chartData3.datasets[4].data[3] = overtime4;\r\n\r\n  const result = Object.values(attendanceDates).map(dateInfo => {\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n    return {\r\n      date: dateInfo.date,\r\n      Intime: dateInfo.Intime,\r\n      Outtime: dateInfo.Outtime,\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  })\r\n  return result;\r\n},\r\navgcheckin(){\r\n  let totalFilteredTime = 0;\r\n  let filteredEntryCount = 0;\r\n\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { inTime } = attendance;\r\n      const timeParts = inTime.split(':').map(part => parseInt(part, 10));\r\n      const hour = timeParts[0];\r\n      const minute = timeParts[1];\r\n      const second = timeParts[2];\r\n\r\n      if (hour >= 8 && hour < 10) {\r\n        const timeMilliseconds = (hour * 3600 + minute * 60 + second) * 1000;\r\n        totalFilteredTime += timeMilliseconds;\r\n        filteredEntryCount++;\r\n      }\r\n    });\r\n  });\r\n\r\n  const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\r\n  const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\r\n  const averageMinute = Math.floor((averageTimeMilliseconds % (1000 * 60 * 60)) / (1000 * 60));\r\n  const averageSecond = Math.floor((averageTimeMilliseconds % (1000 * 60)) / 1000);\r\n  const averageCheckIn = `${averageHour}:${averageMinute}:${averageSecond}`;\r\n\r\n  console.log(\"🚀 ~ averageCheckIn :\", averageCheckIn);\r\n  this.summaryavgcheckIn=averageCheckIn \r\n  return averageCheckIn;\r\n},\r\navgCheckOut() {\r\n  let totalFilteredTime = 0;\r\n  let filteredEntryCount = 0;\r\n  this.employeeList.forEach(employee => {\r\n    if (employee.attendances && Array.isArray(employee.attendances)) {\r\n      employee.attendances.forEach(attendance => {\r\n        if (attendance.inTime) {\r\n          const timeParts = attendance.inTime.split(':').map(part => parseInt(part, 10));\r\n          if (timeParts.length === 3) { \r\n            const hour = timeParts[0];\r\n            const minute = timeParts[1];\r\n            const second = timeParts[2];\r\n\r\n            if (hour >= 17 && hour < 18) {\r\n              const timeMilliseconds = (hour * 3600 + minute * 60 + second) * 1000;\r\n              totalFilteredTime += timeMilliseconds;\r\n              filteredEntryCount++;\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  });\r\n\r\n  const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\r\n  const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\r\n  const averageMinute = Math.floor((averageTimeMilliseconds % (1000 * 60 * 60)) / (1000 * 60));\r\n  const averageSecond = Math.floor((averageTimeMilliseconds % (1000 * 60)) / 1000);\r\n\r\n  const formattedHour = String(averageHour).padStart(2, '0');\r\n  const formattedMinute = String(averageMinute).padStart(2, '0');\r\n  const formattedSecond = String(averageSecond).padStart(2, '0');\r\n\r\n  const averageCheckOut = `${formattedHour}:${formattedMinute}:${formattedSecond}`;\r\n\r\n  console.log(\"🚀 ~ averageCheckOut :\", averageCheckOut);\r\n  this.summaryavgCheckOut = averageCheckOut;\r\n  return averageCheckOut;\r\n},\r\nOntimePercentage(){\r\n  let onTimeCount = 0;\r\n  let totalEntriesCount = 0;\r\n\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { inTime } = attendance;\r\n      const timeParts = inTime.split(':').map(part => parseInt(part, 10));\r\n      const hour = timeParts[0];\r\n      const minute = timeParts[1];\r\n      const second = timeParts[2];\r\n      totalEntriesCount++;\r\n      if (hour === 9 && minute === 0 && second === 0) {\r\n        onTimeCount++; \r\n      }\r\n    });\r\n  });\r\n\r\n  const onTimePercentage = Math.round((onTimeCount / totalEntriesCount) * 100);\r\n  console.log(\"🚀 ~ onTimePercentage:\", onTimePercentage + '%');\r\nthis.ontimePercentage= onTimePercentage\r\n  return onTimePercentage + '%';\r\n},\r\n    renderChart() {\r\n      const ctx = this.$refs.myChart3.getContext('2d');\r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData3,\r\n        options: this.chartOptions3\r\n      });\r\n    },\r\n    WeekHours1() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / 5;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.workingHoursData.length;\r\n         console.log(totallength);\r\n         this.chartData.datasets[0].data[1] = { value: averageHours, max: 45 };\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n      }\r\n      return null;\r\n    },\r\n     MonthHours1() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.workingHoursData.length;\r\n         console.log(totallength);\r\n          this.chartData.datasets[0].data[2] = { value: averageHours, max: 180 };\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n      }\r\n      return null;\r\n    },\r\n    averageHours1() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / this.workingHoursData.length;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength=this.workingHoursData.length;\r\n        console.log(totallength);\r\n        this.chartData.datasets[0].data[0] = { value: averageHours, max: 9 };\r\n        return `${averageHours} hrs ${averageMinutes} mins`;\r\n       \r\n      }\r\n      return null;\r\n    }\r\n  }\r\n};\r\n\r\n</script>\r\n<style>\r\n.mainHeading {\r\n  background-color: aqua;\r\n}\r\n\r\n.mainContainer {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n}\r\n\r\n.bg-dark {\r\n  background-color: #343a40 !important;\r\n}\r\n\r\n.nav-link {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.nav-link i {\r\n  margin-right: 5px;\r\n}\r\n\r\n.content-area {\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n}\r\n.custom-icon-size {\r\n  font-size: 3em; \r\n}\r\n.card-header {\r\n  border-bottom: none; \r\n}\r\n.table {\r\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n.MainHeading {\r\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n  color: red;\r\n}\r\n.search {\r\n   padding-top: 12px;\r\n}\r\n.mainnav{\r\n  padding-top: 40px;\r\n} \r\n@media (max-width: 768px) {\r\n  .mainHeading {\r\n    text-align: center;\r\n  }\r\n\r\n  .nav-link span {\r\n    display: inline !important;\r\n  }\r\n}\r\n.bottom-padding {\r\n        padding-bottom: 40px; \r\n    }\r\n    .punchValues {\r\n  color: black;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n}\r\n.punchheading {\r\n  color: red;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n}\r\n.insidepunchValues{\r\n  display: flex;\r\n  padding-top: 30px;\r\n  padding-left: 40px;\r\n}\r\n</style>"],"mappings":";AAoLA,SAASA,KAAK,EAAEC,aAAY,QAAS,UAAU;AAC/CD,KAAK,CAACE,QAAQ,CAAC,GAAGD,aAAa,CAAC;AAEhC,eAAe;EACbE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE,IAAI;MACnBC,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE;QACXC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE,EAAE;QACXC,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE,IAAI;MACXC,UAAU,EAAE;QACVC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC;QAChEC,QAAQ,EAAE,CACR;UACAC,KAAK,EAAE,YAAY;UACnBhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC,EACD;UACEgB,KAAK,EAAE,QAAQ;UACfhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC,EACD;UACEgB,KAAK,EAAE,MAAM;UACbhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC,EACD;UACEgB,KAAK,EAAE,YAAY;UACnBhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC,EACD;UACEgB,KAAK,EAAE,UAAU;UACjBhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC;MAEH,CAAC;MAEDiB,aAAa,EAAE;QACZC,UAAU,EAAE,IAAI;QACfC,mBAAmB,EAAE,KAAK;QAC5BC,OAAO,EAAE;UACPC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE;UAER;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IAEF,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAC9B,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,YAAW,GAAIjC,KAAK,CAACkC,OAAO;IACjC,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,MAAMC,GAAE,GAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC/C,IAAIvC,KAAK,CAACoC,GAAG,EAAE;MACbI,IAAI,EAAE,KAAK;MACXrC,IAAI,EAAE,IAAI,CAACsC,SAAS;MACpBC,OAAO,EAAE,IAAI,CAACC,YAAY;MAC1BpB,OAAO,EAAE,CAAC,IAAI,CAACqB,iBAAiB;IAClC,CAAC,CAAC;EACJ,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAEC,WAAU,IAAK,IAAI,CAACF,MAAM,CAACC,OAAO,CAACC,WAAW,CAACC,MAAK,GAAI,IAChF,IAAI,CAACH,MAAM,CAACI,KAAK,CAACC,QAAQ,CAAC,CAAC,IAC5B,IAAI;IACV,CAAC;IACDC,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAACN,MAAM,CAACC,OAAO,CAAEC,WAAU,IAAK,IAAI,CAACF,MAAM,CAACC,OAAO,CAACC,WAAW,CAACC,MAAK,GAAI,CAAC,EAAE;QAClF,MAAMI,MAAK,GAAI,IAAI,CAACR,WAAU,GAAI,IAAI,CAACA,WAAW,CAACQ,MAAK,GAAI,IAAI;QAChE,IAAIA,MAAM,EAAE;UACV,MAAMC,iBAAgB,GAAI,IAAI,CAACR,MAAM,CAACI,KAAK,CAACC,QAAQ,CAACI,MAAM,CAACC,QAAO,IAAKA,QAAQ,CAACC,KAAI,KAAMJ,MAAM,CAAC;UAClG,MAAMK,gBAAe,GAAIJ,iBAAiB,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEJ,QAAQ,KAAK;YACnE,MAAMK,GAAE,GAAIL,QAAQ,CAACC,KAAK;YAC1B,IAAI,CAACG,GAAG,CAACC,GAAG,CAAC,EAAE;cACbD,GAAG,CAACC,GAAG,IAAI;gBACTJ,KAAK,EAAED,QAAQ,CAACC,KAAK;gBACrBK,OAAO,EAAEN,QAAQ,CAACM,OAAO;gBACzBC,OAAO,EAAEP,QAAQ,CAACO,OAAO;gBACzBC,WAAW,EAAE;cACf,CAAC;YACH;YACAJ,GAAG,CAACC,GAAG,CAAC,CAACG,WAAW,CAACC,IAAI,CAACT,QAAQ,CAAC;YACnC,OAAOI,GAAG;UACZ,CAAC,EAAE,CAAC,CAAC,CAAC;UACN,MAAMM,eAAc,GAAIC,MAAM,CAACC,MAAM,CAACV,gBAAgB,CAAC;UACvD,OAAOQ,eAAe;QACxB;MACF;MACA,OAAO,EAAE;IACX,CAAC;IACDG,gBAAgBA,CAAA,EAAG;MACrB,MAAMC,eAAc,GAAI,CAAC,CAAC;MAC1B,MAAMC,aAAY,GAAI,YAAY;MAClC,IAAI,CAACnB,YAAY,CAACoB,OAAO,CAAChB,QAAO,IAAK;QACpCA,QAAQ,CAACQ,WAAW,CAACQ,OAAO,CAACC,UAAS,IAAK;UACzC,MAAM;YAAEC,IAAI;YAAEC,MAAM;YAAEC;UAAQ,IAAIH,UAAU;UAC5C,IAAI,CAACH,eAAe,CAACI,IAAI,CAAC,EAAE;YAC1BJ,eAAe,CAACI,IAAI,IAAI;cACtBA,IAAI,EAAEA,IAAI;cACVG,MAAM,EAAE,EAAE;cACVC,OAAO,EAAE,EAAE;cACXC,eAAe,EAAE;YACnB,CAAC;UACH;UACAT,eAAe,CAACI,IAAI,CAAC,CAACG,MAAM,CAACZ,IAAI,CAACU,MAAM,CAAC;UACzC,IAAIC,OAAO,EAAE;YACX,MAAMI,UAAS,GAAI,IAAIC,IAAI,CAAE,GAAEV,aAAa,IAAII,MAAO,EAAC,CAAC;YACzD,MAAMO,WAAU,GAAI,IAAID,IAAI,CAAE,GAAEV,aAAa,IAAIK,OAAQ,EAAC,CAAC;YAC3D,MAAMO,IAAG,GAAIC,IAAI,CAACC,GAAG,CAACH,WAAU,GAAIF,UAAU,CAAC;YAC/CV,eAAe,CAACI,IAAI,CAAC,CAACK,eAAc,IAAKI,IAAI;YAC7Cb,eAAe,CAACI,IAAI,CAAC,CAACI,OAAO,CAACb,IAAI,CAACW,OAAO,CAAC;UAC7C;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAMU,MAAK,GAAInB,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACiB,GAAG,CAACC,QAAO,IAAK;QAC5D,MAAMC,UAAS,GAAIL,IAAI,CAACM,KAAK,CAACF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;QAC1E,MAAMY,YAAW,GAAIP,IAAI,CAACM,KAAK,CAAEF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;QAC5F,OAAO;UACLL,IAAI,EAAEc,QAAQ,CAACd,IAAI;UACnBG,MAAM,EAAEW,QAAQ,CAACX,MAAM;UACvBC,OAAO,EAAEU,QAAQ,CAACV,OAAO;UACzBW,UAAU,EAAEA,UAAU;UACtBE,YAAY,EAAEA;QAChB,CAAC;MACH,CAAC,CAAC,CAACpC,MAAM,CAACqC,MAAK,IAAKA,MAAM,CAAClB,IAAI,CAACmB,QAAQ,CAAC,IAAI,CAACvF,MAAM,CAAC,CAAC;MACtD,OAAOgF,MAAM;IACf,CAAC;IACDQ,YAAYA,CAAA,EAAG;MACT,IAAI,IAAI,CAACzB,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACpB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAACtB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAa,GAAI,IAAI,CAAC3B,gBAAgB,CAACpB,MAAM;QACtE,MAAM6C,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAW,GAAC,IAAI,CAAC9B,gBAAgB,CAACpB,MAAM;QAC9CmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACxB,OAAQ,GAAEL,YAAY,QAAQI,cAAc,OAAO;MAErD;MACA,OAAO,IAAI;IACb,CAAC;IAELI,SAASA,CAAA,EAAG;MACN,IAAI,IAAI,CAACjC,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACpB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAACtB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAa,GAAI,CAAC;QAC3C,MAAMF,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAU,GAAI,IAAI,CAACI,wBAAwB,CAACtD,MAAM;QACvDmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACzB,OAAQ,GAAEL,YAAY,QAAQI,cAAc,OAAO;MACrD;MACA,OAAO,IAAI;IACb,CAAC;IACDM,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACnC,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACgB,gBAAgB,CAAC9C,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAACc,gBAAgB,CAAC9C,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAc;QACvC,MAAMF,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAU,GAAI,IAAI,CAACI,wBAAwB,CAACtD,MAAM;QACvDmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACzB,OAAQ,GAAEL,YAAY,QAAQI,cAAc,OAAO;MAErD;MACA,OAAO,IAAI;IACb,CAAC;IACD1D,SAASA,CAAA,EAAG;MACV,OAAO;QACLxB,MAAM,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;QAClCC,QAAQ,EAAE,CAAC;UACTf,IAAI,EAAE,CACR;YAAEwG,KAAK,EAAE,CAAC;YAAEC,GAAG,EAAE;UAAE,CAAC,EACpB;YAAED,KAAK,EAAE,CAAC;YAAEC,GAAG,EAAE;UAAG,CAAC,EACrB;YAAED,KAAK,EAAE,CAAC;YAAEC,GAAG,EAAE;UAAI,EACtB;UACGC,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,CAC1B;UACDC,WAAW,EAAE,CACX,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,CACxB;UACDC,WAAW,EAAE,CAAC;UACdC,aAAa,EAAE,KAAK;UACpBC,YAAY,EAAE,CAAC;UACfC,aAAa,EAAE,GAAG;UAClBC,kBAAkB,EAAE;QACtB,CAAC;MACH,CAAC;IACH,CAAC;IACDC,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACrE,MAAM,CAACC,OAAO,CAACqE,cAAc;IAC3C,CAAC;IACD1E,YAAYA,CAAA,EAAG;MACb,OAAO;QACL2E,SAAS,EAAE,GAAG;QACd/F,OAAO,EAAE;UACPgG,MAAM,EAAE;YAAE9F,OAAO,EAAE;UAAM;QAC3B,CAAC;QACDE,MAAM,EAAE;UACN6F,CAAC,EAAE;YAAEC,IAAI,EAAE;cAAEhG,OAAO,EAAE;YAAM,CAAC;YAAEiG,KAAK,EAAE;cAAEjG,OAAO,EAAE;YAAM;UAAE,CAAC;UAC1DG,CAAC,EAAE;YAAEC,WAAW,EAAE,IAAI;YAAE4F,IAAI,EAAE;cAAEhG,OAAO,EAAE;YAAM,CAAC;YAAEiG,KAAK,EAAE;cAAEjG,OAAO,EAAE;YAAM;UAAE;QAC9E;MACF,CAAC;IACH,CAAC;IACDmB,iBAAiBA,CAAA,EAAG;MACtB,OAAO;QACL+E,iBAAiBA,CAAC5G,KAAK,EAAE;UACvB,MAAM;YAAEqB,GAAG;YAAEwF,SAAS,EAAE;cAAEC,IAAI;cAAEC,KAAK;cAAEC,KAAK;cAAEC;YAAO,CAAC;YAAErG,MAAM,EAAE;cAAEC;YAAE;UAAE,IAAIb,KAAK;UAC/EqB,GAAG,CAAC6F,IAAI,CAAC,CAAC;UAEV,MAAMC,OAAM,GAAInH,KAAK,CAACZ,IAAI,CAACe,QAAQ,CAAC,CAAC,CAAC;UACtC,MAAMiH,SAAQ,GAAIH,MAAK,GAAIpG,CAAC,CAAC8F,KAAK,CAACxE,MAAK,GAAIgF,OAAO,CAAChB,aAAY,GAAIgB,OAAO,CAACf,kBAAkB;UAE9Fe,OAAO,CAAC/H,IAAI,CAACsE,OAAO,CAAC,CAACtE,IAAI,EAAEiI,KAAK,KAAK;YACpC,MAAMC,SAAQ,GAAIzG,CAAC,CAAC0G,gBAAgB,CAACF,KAAK,IAAID,SAAQ,GAAI,CAAC;YAE3D/F,GAAG,CAACmG,IAAG,GAAI,iBAAiB;YAC5BnG,GAAG,CAACoG,SAAQ,GAAI,wBAAwB;YACxCpG,GAAG,CAACqG,SAAQ,GAAI,MAAM;YACtBrG,GAAG,CAACsG,YAAW,GAAI,QAAQ;YAC3BtG,GAAG,CAACuG,QAAQ,CAAC5H,KAAK,CAACZ,IAAI,CAACc,MAAM,CAACmH,KAAK,CAAC,EAAEP,IAAI,EAAEQ,SAAQ,GAAI,EAAE,CAAC;YAC5D,MAAMO,QAAO,GAAK,GAAEzI,IAAI,CAACwG,KAAM,IAAGxG,IAAI,CAACyG,GAAG,MAAM;YAChDxE,GAAG,CAACmG,IAAG,GAAI,sBAAsB;YACjCnG,GAAG,CAACqG,SAAQ,GAAI,OAAO;YACvBrG,GAAG,CAACuG,QAAQ,CAACC,QAAQ,EAAEd,KAAK,EAAEO,SAAQ,GAAI,EAAE,CAAC;YAC7C,MAAMQ,QAAO,GAAId,KAAI,IAAK5H,IAAI,CAACwG,KAAI,GAAIxG,IAAI,CAACyG,GAAG,CAAC;YAChDxE,GAAG,CAACoG,SAAQ,GAAIN,OAAO,CAACpB,WAAW,CAACsB,KAAK,CAAC;YAC1ChG,GAAG,CAAC0G,QAAQ,CAACjB,IAAI,EAAEQ,SAAS,EAAEQ,QAAQ,EAAEV,SAAS,CAAC;UACpD,CAAC,CAAC;UAEF/F,GAAG,CAAC2G,OAAO,CAAC,CAAC;QACf;MACF,CAAC;IACH;EACE,CAAC;EACDC,OAAO,EAAC;IACNjH,qBAAqBA,CAAA,EAAG;MACtB,IAAI,IAAI,CAACuC,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAM2C,MAAK,GAAI,IAAI,CAACvB,gBAAgB,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC9D,WAAW,CAACC,OAAM,GAAIoF,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;QAC3C,IAAI,CAACtE,WAAW,CAACE,OAAM,GAAImF,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;QAC3C,IAAI,CAACtE,WAAW,CAACG,QAAO,GAAIkF,MAAM,CAACd,OAAO,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACvE,WAAW,CAACI,QAAO,GAAIiF,MAAM,CAACd,OAAO,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACvE,WAAW,CAACK,OAAM,GAAIgF,MAAM,CAACf,MAAM,CAAC,CAAC,KAAK,EAAE;QACjD,IAAI,CAACtE,WAAW,CAACM,QAAO,GAAI+E,MAAM,CAACd,OAAO,CAAC,CAAC,KAAK,EAAE;MACrD;MACA,IAAI,CAACkE,cAAc,CAAC,CAAC;MACrB,IAAI,CAACC,UAAU,CAAC,CAAC;MACjB,IAAI,CAACC,WAAW,CAAC,CAAC;MAClB,IAAI,CAACC,gBAAgB,CAAC,CAAC;MACvB,IAAI,CAACC,aAAa,CAAC,CAAC;MACnB,IAAI,CAACC,WAAW,CAAC,CAAC;MAClB,IAAI,CAACC,UAAU,CAAC,CAAC;IACpB,CAAC;IACDC,eAAeA,CAAC3D,MAAM,EAAE;MACtB,IAAI,CAACrF,WAAW,CAACC,OAAM,GAAIoF,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACtE,WAAW,CAACE,OAAM,GAAImF,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACtE,WAAW,CAACG,QAAO,GAAIkF,MAAM,CAACd,OAAO,CAAC,CAAC,CAAC;MAC7C,IAAI,CAACvE,WAAW,CAACI,QAAO,GAAIiF,MAAM,CAACd,OAAO,CAAC,CAAC,CAAC;MAC7C,IAAI,CAACvE,WAAW,CAACK,OAAM,GAAIgF,MAAM,CAACf,MAAM,CAAC,CAAC,KAAK,EAAE;MACjD,IAAI,CAACtE,WAAW,CAACM,QAAO,GAAI+E,MAAM,CAACd,OAAO,CAAC,CAAC,KAAK,EAAE;IACrD,CAAC;IACDkE,cAAcA,CAAA,EAAE;MACd,MAAM1E,eAAc,GAAI,CAAC,CAAC;MAC9B,MAAMC,aAAY,GAAI,YAAY;MAClC,IAAI,CAACnB,YAAY,CAACoB,OAAO,CAAChB,QAAO,IAAK;QACpCA,QAAQ,CAACQ,WAAW,CAACQ,OAAO,CAACC,UAAS,IAAK;UACzC,MAAM;YAAEC,IAAI;YAAEC,MAAM;YAAEC;UAAQ,IAAIH,UAAU;UAC5C,IAAI,CAACH,eAAe,CAACI,IAAI,CAAC,EAAE;YAC1BJ,eAAe,CAACI,IAAI,IAAI;cACtBA,IAAI,EAAEA,IAAI;cACVG,MAAM,EAAE,EAAE;cACVC,OAAO,EAAE,EAAE;cACXC,eAAe,EAAE;YACnB,CAAC;UACH;UACAT,eAAe,CAACI,IAAI,CAAC,CAACG,MAAM,CAACZ,IAAI,CAACU,MAAM,CAAC;UACzC,IAAIC,OAAO,EAAE;YACX,MAAMI,UAAS,GAAI,IAAIC,IAAI,CAAE,GAAEV,aAAa,IAAII,MAAO,EAAC,CAAC;YACzD,MAAMO,WAAU,GAAI,IAAID,IAAI,CAAE,GAAEV,aAAa,IAAIK,OAAQ,EAAC,CAAC;YAC3D,MAAMO,IAAG,GAAIC,IAAI,CAACC,GAAG,CAACH,WAAU,GAAIF,UAAU,CAAC;YAC/CV,eAAe,CAACI,IAAI,CAAC,CAACK,eAAc,IAAKI,IAAI;YAC7Cb,eAAe,CAACI,IAAI,CAAC,CAACI,OAAO,CAACb,IAAI,CAACW,OAAO,CAAC;UAC7C;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,MAAO4E,gBAAgB,GAAErF,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QACpF,MAAMd,IAAG,GAAI,IAAIO,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC;QACpC,MAAMgF,KAAI,GAAIhF,IAAI,CAACiF,QAAQ,CAAC,CAAC;QAC7B,IAAID,KAAI,KAAM,CAAC,EAAE;UACf,OAAOD,KAAI,GAAI,CAAC;QAClB;QACA,OAAOA,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACLrD,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEmD,gBAAgB,CAAC;MACvE,MAAOI,gBAAgB,GAAEzF,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAClF,MAAMd,IAAG,GAAI,IAAIO,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC;QACpC,MAAMgF,KAAI,GAAIhF,IAAI,CAACiF,QAAQ,CAAC,CAAC;QAC7B,IAAID,KAAI,KAAM,CAAC,EAAE;UACf,OAAOD,KAAI,GAAI,CAAC;QAClB;QACA,OAAOA,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MAELrD,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAEuD,gBAAgB,CAAC;MACtE,MAAMC,WAAU,GAAI1F,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAC3E,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACf,OAAOD,KAAI,GAAIjE,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACuG,IAAG,IAAKA,IAAG,GAAG,UAAU,CAAC,CAAC7G,MAAM;QAExE;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACP,MAAMM,OAAM,GAAI5F,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QACzE,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOD,KAAI,GAAIjE,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACuG,IAAG,IAAKA,IAAG,KAAM,UAAU,CAAC,CAAC7G,MAAM;QACzE;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACL,MAAMO,UAAS,GAAI7F,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAC5E,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOD,KAAI,GAAIjE,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACuG,IAAG,IAAKA,IAAG,GAAI,UAAS,IAAKA,IAAG,GAAI,UAAU,CAAC,CAAC7G,MAAM;QAC5F;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACL,MAAMQ,SAAQ,GAAI9F,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAC3E,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOD,KAAI,GAAIjE,QAAQ,CAACV,OAAO,CAACvB,MAAM,CAACuG,IAAG,IAAKA,IAAG,GAAI,UAAU,CAAC,CAAC7G,MAAM;QACxE;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACP,MAAMS,WAAU,GAAI/F,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAC7E,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOD,KAAI,GAAIjE,QAAQ,CAACV,OAAO,CAACvB,MAAM,CAACuG,IAAG,IAAKA,IAAG,GAAI,UAAS,IAAKA,IAAG,GAAI,UAAU,CAAC,CAAC7G,MAAM;QAC7F;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACH;MACA;MACA;MACA;MACA;MACA,IAAI,CAAC1I,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAI2J,WAAW;MAC7C,IAAI,CAAC9I,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAI6J,OAAO;MAC7C,IAAI,CAAChJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAI8J,UAAU;MAChD,IAAI,CAACjJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIgK,WAAW;MACjD,IAAI,CAACnJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAI+J,SAAS;MAInD,MAAME,WAAU,GAAIhG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAC3E,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACf,OAAOD,KAAI,GAAIjE,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACuG,IAAG,IAAKA,IAAG,GAAG,UAAU,CAAC,CAAC7G,MAAM;QACxE;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACP,MAAMW,OAAM,GAAIjG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QACzE,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOD,KAAI,GAAIjE,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACuG,IAAG,IAAKA,IAAG,KAAM,UAAU,CAAC,CAAC7G,MAAM;QACzE;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACL,MAAMY,UAAS,GAAIlG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAC5E,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOD,KAAI,GAAIjE,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACuG,IAAG,IAAKA,IAAG,GAAI,UAAS,IAAKA,IAAG,GAAI,UAAU,CAAC,CAAC7G,MAAM;QAC5F;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACL,MAAMa,SAAQ,GAAInG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAC3E,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOD,KAAI,GAAIjE,QAAQ,CAACV,OAAO,CAACvB,MAAM,CAACuG,IAAG,IAAKA,IAAG,GAAI,UAAU,CAAC,CAAC7G,MAAM;QACxE;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACP,MAAMc,WAAU,GAAIpG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC8F,KAAK,EAAEjE,QAAQ,KAAK;QAC7E,MAAMkE,KAAI,GAAI,IAAIzE,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACiF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOD,KAAI,GAAIjE,QAAQ,CAACV,OAAO,CAACvB,MAAM,CAACuG,IAAG,IAAKA,IAAG,GAAI,UAAS,IAAKA,IAAG,GAAI,UAAU,CAAC,CAAC7G,MAAM;QAC7F;QACA,OAAOwG,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MAEH,IAAI,CAAC1I,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIiK,WAAW;MAC7C,IAAI,CAACpJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIkK,OAAO;MAC7C,IAAI,CAACrJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAImK,UAAU;MAChD,IAAI,CAACtJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIqK,WAAW;MACjD,IAAI,CAACxJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIoK,SAAS;MAEnD,MAAMhF,MAAK,GAAInB,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACiB,GAAG,CAACC,QAAO,IAAK;QAC5D,MAAMC,UAAS,GAAIL,IAAI,CAACM,KAAK,CAACF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;QAC1E,MAAMY,YAAW,GAAIP,IAAI,CAACM,KAAK,CAAEF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;QAC5F,OAAO;UACLL,IAAI,EAAEc,QAAQ,CAACd,IAAI;UACnBG,MAAM,EAAEW,QAAQ,CAACX,MAAM;UACvBC,OAAO,EAAEU,QAAQ,CAACV,OAAO;UACzBW,UAAU,EAAEA,UAAU;UACtBE,YAAY,EAAEA;QAChB,CAAC;MACH,CAAC;MACD,OAAOL,MAAM;IACf,CAAC;IACD2D,UAAUA,CAAA,EAAE;MACV,IAAIuB,iBAAgB,GAAI,CAAC;MACzB,IAAIC,kBAAiB,GAAI,CAAC;MAE1B,IAAI,CAACrH,YAAY,CAACoB,OAAO,CAAChB,QAAO,IAAK;QACpCA,QAAQ,CAACQ,WAAW,CAACQ,OAAO,CAACC,UAAS,IAAK;UACzC,MAAM;YAAEE;UAAO,IAAIF,UAAU;UAC7B,MAAMiG,SAAQ,GAAI/F,MAAM,CAACgG,KAAK,CAAC,GAAG,CAAC,CAACpF,GAAG,CAACqF,IAAG,IAAKC,QAAQ,CAACD,IAAI,EAAE,EAAE,CAAC,CAAC;UACnE,MAAME,IAAG,GAAIJ,SAAS,CAAC,CAAC,CAAC;UACzB,MAAMK,MAAK,GAAIL,SAAS,CAAC,CAAC,CAAC;UAC3B,MAAMM,MAAK,GAAIN,SAAS,CAAC,CAAC,CAAC;UAE3B,IAAII,IAAG,IAAK,KAAKA,IAAG,GAAI,EAAE,EAAE;YAC1B,MAAMG,gBAAe,GAAI,CAACH,IAAG,GAAI,IAAG,GAAIC,MAAK,GAAI,EAAC,GAAIC,MAAM,IAAI,IAAI;YACpER,iBAAgB,IAAKS,gBAAgB;YACrCR,kBAAkB,EAAE;UACtB;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAMS,uBAAsB,GAAIT,kBAAiB,GAAID,iBAAgB,GAAIC,kBAAiB,GAAI,CAAC;MAC/F,MAAMU,WAAU,GAAI/F,IAAI,CAACM,KAAK,CAACwF,uBAAsB,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;MAC1E,MAAME,aAAY,GAAIhG,IAAI,CAACM,KAAK,CAAEwF,uBAAsB,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;MAC5F,MAAMG,aAAY,GAAIjG,IAAI,CAACM,KAAK,CAAEwF,uBAAsB,IAAK,IAAG,GAAI,EAAE,CAAC,GAAI,IAAI,CAAC;MAChF,MAAMI,cAAa,GAAK,GAAEH,WAAY,IAAGC,aAAc,IAAGC,aAAc,EAAC;MAEzEjF,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEiF,cAAc,CAAC;MACpD,IAAI,CAACC,iBAAiB,GAACD,cAAa;MACpC,OAAOA,cAAc;IACvB,CAAC;IACDpC,WAAWA,CAAA,EAAG;MACZ,IAAIsB,iBAAgB,GAAI,CAAC;MACzB,IAAIC,kBAAiB,GAAI,CAAC;MAC1B,IAAI,CAACrH,YAAY,CAACoB,OAAO,CAAChB,QAAO,IAAK;QACpC,IAAIA,QAAQ,CAACQ,WAAU,IAAKwH,KAAK,CAACC,OAAO,CAACjI,QAAQ,CAACQ,WAAW,CAAC,EAAE;UAC/DR,QAAQ,CAACQ,WAAW,CAACQ,OAAO,CAACC,UAAS,IAAK;YACzC,IAAIA,UAAU,CAACE,MAAM,EAAE;cACrB,MAAM+F,SAAQ,GAAIjG,UAAU,CAACE,MAAM,CAACgG,KAAK,CAAC,GAAG,CAAC,CAACpF,GAAG,CAACqF,IAAG,IAAKC,QAAQ,CAACD,IAAI,EAAE,EAAE,CAAC,CAAC;cAC9E,IAAIF,SAAS,CAACzH,MAAK,KAAM,CAAC,EAAE;gBAC1B,MAAM6H,IAAG,GAAIJ,SAAS,CAAC,CAAC,CAAC;gBACzB,MAAMK,MAAK,GAAIL,SAAS,CAAC,CAAC,CAAC;gBAC3B,MAAMM,MAAK,GAAIN,SAAS,CAAC,CAAC,CAAC;gBAE3B,IAAII,IAAG,IAAK,EAAC,IAAKA,IAAG,GAAI,EAAE,EAAE;kBAC3B,MAAMG,gBAAe,GAAI,CAACH,IAAG,GAAI,IAAG,GAAIC,MAAK,GAAI,EAAC,GAAIC,MAAM,IAAI,IAAI;kBACpER,iBAAgB,IAAKS,gBAAgB;kBACrCR,kBAAkB,EAAE;gBACtB;cACF;YACF;UACF,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,MAAMS,uBAAsB,GAAIT,kBAAiB,GAAID,iBAAgB,GAAIC,kBAAiB,GAAI,CAAC;MAC/F,MAAMU,WAAU,GAAI/F,IAAI,CAACM,KAAK,CAACwF,uBAAsB,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;MAC1E,MAAME,aAAY,GAAIhG,IAAI,CAACM,KAAK,CAAEwF,uBAAsB,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;MAC5F,MAAMG,aAAY,GAAIjG,IAAI,CAACM,KAAK,CAAEwF,uBAAsB,IAAK,IAAG,GAAI,EAAE,CAAC,GAAI,IAAI,CAAC;MAEhF,MAAMQ,aAAY,GAAIC,MAAM,CAACR,WAAW,CAAC,CAACS,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC1D,MAAMC,eAAc,GAAIF,MAAM,CAACP,aAAa,CAAC,CAACQ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAC9D,MAAME,eAAc,GAAIH,MAAM,CAACN,aAAa,CAAC,CAACO,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;MAE9D,MAAMG,eAAc,GAAK,GAAEL,aAAc,IAAGG,eAAgB,IAAGC,eAAgB,EAAC;MAEhF1F,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE0F,eAAe,CAAC;MACtD,IAAI,CAACC,kBAAiB,GAAID,eAAe;MACzC,OAAOA,eAAe;IACxB,CAAC;IACD5C,gBAAgBA,CAAA,EAAE;MAChB,IAAI8C,WAAU,GAAI,CAAC;MACnB,IAAIC,iBAAgB,GAAI,CAAC;MAEzB,IAAI,CAAC9I,YAAY,CAACoB,OAAO,CAAChB,QAAO,IAAK;QACpCA,QAAQ,CAACQ,WAAW,CAACQ,OAAO,CAACC,UAAS,IAAK;UACzC,MAAM;YAAEE;UAAO,IAAIF,UAAU;UAC7B,MAAMiG,SAAQ,GAAI/F,MAAM,CAACgG,KAAK,CAAC,GAAG,CAAC,CAACpF,GAAG,CAACqF,IAAG,IAAKC,QAAQ,CAACD,IAAI,EAAE,EAAE,CAAC,CAAC;UACnE,MAAME,IAAG,GAAIJ,SAAS,CAAC,CAAC,CAAC;UACzB,MAAMK,MAAK,GAAIL,SAAS,CAAC,CAAC,CAAC;UAC3B,MAAMM,MAAK,GAAIN,SAAS,CAAC,CAAC,CAAC;UAC3BwB,iBAAiB,EAAE;UACnB,IAAIpB,IAAG,KAAM,KAAKC,MAAK,KAAM,KAAKC,MAAK,KAAM,CAAC,EAAE;YAC9CiB,WAAW,EAAE;UACf;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAME,gBAAe,GAAI/G,IAAI,CAACgH,KAAK,CAAEH,WAAU,GAAIC,iBAAiB,GAAI,GAAG,CAAC;MAC5E9F,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE8F,gBAAe,GAAI,GAAG,CAAC;MAC/D,IAAI,CAACE,gBAAgB,GAAEF,gBAAe;MACpC,OAAOA,gBAAe,GAAI,GAAG;IAC/B,CAAC;IACGjK,WAAWA,CAAA,EAAG;MACZ,MAAMC,GAAE,GAAI,IAAI,CAACC,KAAK,CAACkK,QAAQ,CAAChK,UAAU,CAAC,IAAI,CAAC;MAChD,IAAI,CAACxB,KAAI,GAAI,IAAIf,KAAK,CAACoC,GAAG,EAAE;QAC1BI,IAAI,EAAE,KAAK;QACXrC,IAAI,EAAE,IAAI,CAACa,UAAU;QACrB0B,OAAO,EAAE,IAAI,CAACtB;MAChB,CAAC,CAAC;IACJ,CAAC;IACDmI,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACjF,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACpB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAACtB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAa,GAAI,CAAC;QAC3C,MAAMF,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAU,GAAI,IAAI,CAAC9B,gBAAgB,CAACpB,MAAM;QAC/CmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACxB,IAAI,CAAC3D,SAAS,CAACvB,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAI;UAAEwG,KAAK,EAAEZ,YAAY;UAAEa,GAAG,EAAE;QAAG,CAAC;QACtE,OAAQ,GAAEb,YAAY,QAAQI,cAAc,OAAO;MACrD;MACA,OAAO,IAAI;IACb,CAAC;IACAmD,WAAWA,CAAA,EAAG;MACb,IAAI,IAAI,CAAChF,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACpB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAACtB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAc;QACvC,MAAMF,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAU,GAAI,IAAI,CAAC9B,gBAAgB,CAACpB,MAAM;QAC/CmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACvB,IAAI,CAAC3D,SAAS,CAACvB,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAI;UAAEwG,KAAK,EAAEZ,YAAY;UAAEa,GAAG,EAAE;QAAI,CAAC;QACxE,OAAQ,GAAEb,YAAY,QAAQI,cAAc,OAAO;MACrD;MACA,OAAO,IAAI;IACb,CAAC;IACDkD,aAAaA,CAAA,EAAG;MACd,IAAI,IAAI,CAAC/E,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACpB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAACtB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAa,GAAI,IAAI,CAAC3B,gBAAgB,CAACpB,MAAM;QACtE,MAAM6C,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAW,GAAC,IAAI,CAAC9B,gBAAgB,CAACpB,MAAM;QAC9CmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACxB,IAAI,CAAC3D,SAAS,CAACvB,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAI;UAAEwG,KAAK,EAAEZ,YAAY;UAAEa,GAAG,EAAE;QAAE,CAAC;QACpE,OAAQ,GAAEb,YAAY,QAAQI,cAAc,OAAO;MAErD;MACA,OAAO,IAAI;IACb;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}