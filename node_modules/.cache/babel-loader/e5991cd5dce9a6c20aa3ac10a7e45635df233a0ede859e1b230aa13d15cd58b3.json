{"ast":null,"code":"export default {\n  computed: {\n    userData() {\n      const userData = this.$store.getters.getUserData.user || {};\n      return userData;\n    },\n    employeeData() {\n      return this.$store.getters.getUserData.employeeData || [];\n    },\n    uniqueEmployeeData() {\n      const uniqueIds = new Set();\n      return this.employeeData.filter(employee => {\n        if (!uniqueIds.has(employee.id)) {\n          uniqueIds.add(employee.id);\n          return true;\n        }\n        return false;\n      });\n    },\n    uniqueWorkingHoursData() {\n      return this.getUniqueDates();\n    }\n  },\n  methods: {\n    userDetails(id) {\n      console.log(id);\n    },\n    getUniqueDates() {\n      const workingHours = {};\n      for (const employee of this.employeeData) {\n        const date = employee.date;\n        if (!workingHours[date]) {\n          workingHours[date] = 0;\n        }\n        workingHours[date] += this.calculateWorkingHours(employee.intime, employee.outtime);\n      }\n      return Object.keys(workingHours).map(date => ({\n        date: date,\n        totalWorkingHours: workingHours[date]\n      }));\n    },\n    calculateTotalWorkingHours(date) {\n      let totalHours = 0;\n      for (const employee of this.employeeData) {\n        if (employee.date === date) {\n          totalHours += this.calculateWorkingHours(employee.intime, employee.outtime);\n        }\n      }\n      return totalHours;\n    },\n    calculateWorkingHours(intime, outtime) {\n      if (!outtime || outtime.trim() === '' || outtime === '0') {\n        return 0; // If outtime is zero or not provided, consider working hours as zero\n      }\n\n      // Calculate difference between intime and outtime\n      const startTime = new Date(intime);\n      const endTime = new Date(outtime);\n      const differenceInMilliseconds = endTime - startTime;\n\n      // Convert difference to hours\n      const differenceInHours = differenceInMilliseconds / (1000 * 60 * 60);\n      return differenceInHours;\n    }\n  }\n};","map":{"version":3,"names":["computed","userData","$store","getters","getUserData","user","employeeData","uniqueEmployeeData","uniqueIds","Set","filter","employee","has","id","add","uniqueWorkingHoursData","getUniqueDates","methods","userDetails","console","log","workingHours","date","calculateWorkingHours","intime","outtime","Object","keys","map","totalWorkingHours","calculateTotalWorkingHours","totalHours","trim","startTime","Date","endTime","differenceInMilliseconds","differenceInHours"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- User Table -->\r\n    <table v-if=\"userData\" class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>UserId</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n          <th>Role</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>{{ userData.id }}</td>\r\n          <td>{{ userData.name }}</td>\r\n          <td>{{ userData.email }}</td>\r\n          <td>{{ userData.role }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div>\r\n    <!-- Employee Table -->\r\n    <table v-if=\"uniqueEmployeeData.length > 0\" class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>EmployeeId</th>\r\n          <th>EmployeeName</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(employee, index) in uniqueEmployeeData\" :key=\"index\">\r\n          <td @click=\"userDetails(employee.id)\">{{ employee.id }}</td>\r\n          <td>{{ employee.name }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p v-else>No employee data available.</p>\r\n  </div>\r\n  <div>\r\n    <!-- Working Hours Table -->\r\n    <div v-if=\"uniqueWorkingHoursData.length > 0\">\r\n      <table class=\"table table-bordered\">\r\n        <thead class=\"table-dark\">\r\n          <tr>\r\n            <th>Date</th>\r\n            <th>Working Hours</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(entry, index) in uniqueWorkingHoursData\" :key=\"index\">\r\n            <td>{{ entry.date }}</td>\r\n            <td>{{ entry.totalWorkingHours }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n    <p v-else>No working hours data available.</p>\r\n  </div>\r\n  <div>\r\n    <!-- Employee Details Table -->\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Id</th>\r\n          <th>Date</th>\r\n          <th>Intime</th>\r\n          <th>Outtime</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(employee, index) in employeeData\" :key=\"index\">\r\n          <td>{{ employee.id }}</td>\r\n          <td>{{ employee.date }}</td>\r\n          <td>{{ employee.intime }}</td>\r\n          <td>{{ employee.outtime }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  computed: {\r\n    userData() {\r\n      const userData = this.$store.getters.getUserData.user || {};\r\n      return userData;\r\n    },\r\n    employeeData() {\r\n      return this.$store.getters.getUserData.employeeData || [];\r\n    },\r\n    uniqueEmployeeData() {\r\n      const uniqueIds = new Set();\r\n      return this.employeeData.filter(employee => {\r\n        if (!uniqueIds.has(employee.id)) {\r\n          uniqueIds.add(employee.id);\r\n          return true;\r\n        }\r\n        return false;\r\n      });\r\n    },\r\n    uniqueWorkingHoursData() {\r\n      return this.getUniqueDates();\r\n    }\r\n  },\r\n  methods: {\r\n    userDetails(id) {\r\n      console.log(id);\r\n    },\r\n    getUniqueDates() {\r\n      const workingHours = {};\r\n      for (const employee of this.employeeData) {\r\n        const date = employee.date;\r\n        if (!workingHours[date]) {\r\n          workingHours[date] = 0;\r\n        }\r\n        workingHours[date] += this.calculateWorkingHours(employee.intime, employee.outtime);\r\n      }\r\n      return Object.keys(workingHours).map(date => ({\r\n        date: date,\r\n        totalWorkingHours: workingHours[date]\r\n      }));\r\n    },\r\n    calculateTotalWorkingHours(date) {\r\n      let totalHours = 0;\r\n      for (const employee of this.employeeData) {\r\n        if (employee.date === date) {\r\n          totalHours += this.calculateWorkingHours(employee.intime, employee.outtime);\r\n        }\r\n      }\r\n      return totalHours;\r\n    },\r\n    calculateWorkingHours(intime, outtime) {\r\n      if (!outtime || outtime.trim() === '' || outtime === '0') {\r\n        return 0; // If outtime is zero or not provided, consider working hours as zero\r\n      }\r\n\r\n      // Calculate difference between intime and outtime\r\n      const startTime = new Date(intime);\r\n      const endTime = new Date(outtime);\r\n      const differenceInMilliseconds = endTime - startTime;\r\n\r\n      // Convert difference to hours\r\n      const differenceInHours = differenceInMilliseconds / (1000 * 60 * 60);\r\n      return differenceInHours;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Your CSS styles */\r\n</style>\r\n"],"mappings":"AAoFA,eAAe;EACbA,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,MAAMA,QAAO,GAAI,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW,CAACC,IAAG,IAAK,CAAC,CAAC;MAC3D,OAAOJ,QAAQ;IACjB,CAAC;IACDK,YAAYA,CAAA,EAAG;MACb,OAAO,IAAI,CAACJ,MAAM,CAACC,OAAO,CAACC,WAAW,CAACE,YAAW,IAAK,EAAE;IAC3D,CAAC;IACDC,kBAAkBA,CAAA,EAAG;MACnB,MAAMC,SAAQ,GAAI,IAAIC,GAAG,CAAC,CAAC;MAC3B,OAAO,IAAI,CAACH,YAAY,CAACI,MAAM,CAACC,QAAO,IAAK;QAC1C,IAAI,CAACH,SAAS,CAACI,GAAG,CAACD,QAAQ,CAACE,EAAE,CAAC,EAAE;UAC/BL,SAAS,CAACM,GAAG,CAACH,QAAQ,CAACE,EAAE,CAAC;UAC1B,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,CAAC;IACJ,CAAC;IACDE,sBAAsBA,CAAA,EAAG;MACvB,OAAO,IAAI,CAACC,cAAc,CAAC,CAAC;IAC9B;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,WAAWA,CAACL,EAAE,EAAE;MACdM,OAAO,CAACC,GAAG,CAACP,EAAE,CAAC;IACjB,CAAC;IACDG,cAAcA,CAAA,EAAG;MACf,MAAMK,YAAW,GAAI,CAAC,CAAC;MACvB,KAAK,MAAMV,QAAO,IAAK,IAAI,CAACL,YAAY,EAAE;QACxC,MAAMgB,IAAG,GAAIX,QAAQ,CAACW,IAAI;QAC1B,IAAI,CAACD,YAAY,CAACC,IAAI,CAAC,EAAE;UACvBD,YAAY,CAACC,IAAI,IAAI,CAAC;QACxB;QACAD,YAAY,CAACC,IAAI,KAAK,IAAI,CAACC,qBAAqB,CAACZ,QAAQ,CAACa,MAAM,EAAEb,QAAQ,CAACc,OAAO,CAAC;MACrF;MACA,OAAOC,MAAM,CAACC,IAAI,CAACN,YAAY,CAAC,CAACO,GAAG,CAACN,IAAG,KAAM;QAC5CA,IAAI,EAAEA,IAAI;QACVO,iBAAiB,EAAER,YAAY,CAACC,IAAI;MACtC,CAAC,CAAC,CAAC;IACL,CAAC;IACDQ,0BAA0BA,CAACR,IAAI,EAAE;MAC/B,IAAIS,UAAS,GAAI,CAAC;MAClB,KAAK,MAAMpB,QAAO,IAAK,IAAI,CAACL,YAAY,EAAE;QACxC,IAAIK,QAAQ,CAACW,IAAG,KAAMA,IAAI,EAAE;UAC1BS,UAAS,IAAK,IAAI,CAACR,qBAAqB,CAACZ,QAAQ,CAACa,MAAM,EAAEb,QAAQ,CAACc,OAAO,CAAC;QAC7E;MACF;MACA,OAAOM,UAAU;IACnB,CAAC;IACDR,qBAAqBA,CAACC,MAAM,EAAEC,OAAO,EAAE;MACrC,IAAI,CAACA,OAAM,IAAKA,OAAO,CAACO,IAAI,CAAC,MAAM,EAAC,IAAKP,OAAM,KAAM,GAAG,EAAE;QACxD,OAAO,CAAC,EAAE;MACZ;;MAEA;MACA,MAAMQ,SAAQ,GAAI,IAAIC,IAAI,CAACV,MAAM,CAAC;MAClC,MAAMW,OAAM,GAAI,IAAID,IAAI,CAACT,OAAO,CAAC;MACjC,MAAMW,wBAAuB,GAAID,OAAM,GAAIF,SAAS;;MAEpD;MACA,MAAMI,iBAAgB,GAAID,wBAAuB,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC;MACrE,OAAOC,iBAAiB;IAC1B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}