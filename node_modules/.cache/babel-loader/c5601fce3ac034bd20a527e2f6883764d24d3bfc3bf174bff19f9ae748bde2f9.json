{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      workingHours: [],\n      goals: []\n    };\n  },\n  computed: {\n    userData() {\n      return this.$store.getters.getUserData;\n    }\n  },\n  watch: {\n    userData: {\n      handler(newValue) {\n        if (Array.isArray(newValue)) {\n          this.workingHours = newValue.map(user => ({\n            Date: user.Date,\n            WorkingHours: this.calculateWorkingHours(user.InTime1, user.OutTime1, user.InTime2, user.OutTime2)\n          }));\n          this.goals = newValue.reduce((result, user) => {\n            result.push({\n              employeeName: user.employeeName,\n              Date: user.Date,\n              InTime1: user.InTime1,\n              OutTime1: user.OutTime1,\n              InTime2: user.InTime2,\n              OutTime2: user.OutTime2\n            });\n\n            // Add an empty row if there is a second date\n            if (user.Date2) {\n              result.push({\n                employeeName: user.employeeName,\n                Date: user.Date2,\n                InTime1: \"\",\n                OutTime1: \"\",\n                InTime2: \"\",\n                OutTime2: \"\"\n              });\n            }\n            return result;\n          }, []);\n        } else if (newValue) {\n          this.workingHours = [{\n            Date: newValue.Date,\n            WorkingHours: this.calculateWorkingHours(newValue.InTime1, newValue.OutTime1, newValue.InTime2, newValue.OutTime2)\n          }];\n          this.goals = [newValue];\n        } else {\n          this.workingHours = [];\n          this.goals = [];\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    calculateWorkingHours(inTime1, outTime1, inTime2, outTime2) {\n      // Your existing working hours calculation logic\n    }\n  }\n};","map":{"version":3,"names":["data","workingHours","goals","computed","userData","$store","getters","getUserData","watch","handler","newValue","Array","isArray","map","user","Date","WorkingHours","calculateWorkingHours","InTime1","OutTime1","InTime2","OutTime2","reduce","result","push","employeeName","Date2","immediate","methods","inTime1","outTime1","inTime2","outTime2"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Table for working hours -->\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(hours, index) in workingHours\" :key=\"index\">\r\n          <td>{{ hours.Date }}</td>\r\n          <td>{{ hours.WorkingHours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Table for user details -->\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>InTime1</th>\r\n          <th>OutTime1</th>\r\n          <th>InTime2</th>\r\n          <th>OutTime2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(goal, index) in goals\" :key=\"index\">\r\n          <td>{{ goal.employeeName }}</td>\r\n          <td>{{ goal.Date }}</td>\r\n          <td>{{ goal.InTime1 }}</td>\r\n          <td>{{ goal.OutTime1 }}</td>\r\n          <td>{{ goal.InTime2 }}</td>\r\n          <td>{{ goal.OutTime2 }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      workingHours: [],\r\n      goals: [],\r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData;\r\n    },\r\n  },\r\n  watch: {\r\n    userData: {\r\n      handler(newValue) {\r\n        if (Array.isArray(newValue)) {\r\n          this.workingHours = newValue.map((user) => ({\r\n            Date: user.Date,\r\n            WorkingHours: this.calculateWorkingHours(user.InTime1, user.OutTime1, user.InTime2, user.OutTime2),\r\n          }));\r\n\r\n          this.goals = newValue.reduce((result, user) => {\r\n            result.push({\r\n              employeeName: user.employeeName,\r\n              Date: user.Date,\r\n              InTime1: user.InTime1,\r\n              OutTime1: user.OutTime1,\r\n              InTime2: user.InTime2,\r\n              OutTime2: user.OutTime2,\r\n            });\r\n\r\n            // Add an empty row if there is a second date\r\n            if (user.Date2) {\r\n              result.push({\r\n                employeeName: user.employeeName,\r\n                Date: user.Date2,\r\n                InTime1: \"\",\r\n                OutTime1: \"\",\r\n                InTime2: \"\",\r\n                OutTime2: \"\",\r\n              });\r\n            }\r\n\r\n            return result;\r\n          }, []);\r\n        } else if (newValue) {\r\n          this.workingHours = [{\r\n            Date: newValue.Date,\r\n            WorkingHours: this.calculateWorkingHours(newValue.InTime1, newValue.OutTime1, newValue.InTime2, newValue.OutTime2),\r\n          }];\r\n\r\n          this.goals = [newValue];\r\n        } else {\r\n          this.workingHours = [];\r\n          this.goals = [];\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  methods: {\r\n    calculateWorkingHours(inTime1, outTime1, inTime2, outTime2) {\r\n      // Your existing working hours calculation logic\r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":";AA6CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW;IACxC;EACF,CAAC;EACDC,KAAK,EAAE;IACLJ,QAAQ,EAAE;MACRK,OAAOA,CAACC,QAAQ,EAAE;QAChB,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;UAC3B,IAAI,CAACT,YAAW,GAAIS,QAAQ,CAACG,GAAG,CAAEC,IAAI,KAAM;YAC1CC,IAAI,EAAED,IAAI,CAACC,IAAI;YACfC,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAACH,IAAI,CAACI,OAAO,EAAEJ,IAAI,CAACK,QAAQ,EAAEL,IAAI,CAACM,OAAO,EAAEN,IAAI,CAACO,QAAQ;UACnG,CAAC,CAAC,CAAC;UAEH,IAAI,CAACnB,KAAI,GAAIQ,QAAQ,CAACY,MAAM,CAAC,CAACC,MAAM,EAAET,IAAI,KAAK;YAC7CS,MAAM,CAACC,IAAI,CAAC;cACVC,YAAY,EAAEX,IAAI,CAACW,YAAY;cAC/BV,IAAI,EAAED,IAAI,CAACC,IAAI;cACfG,OAAO,EAAEJ,IAAI,CAACI,OAAO;cACrBC,QAAQ,EAAEL,IAAI,CAACK,QAAQ;cACvBC,OAAO,EAAEN,IAAI,CAACM,OAAO;cACrBC,QAAQ,EAAEP,IAAI,CAACO;YACjB,CAAC,CAAC;;YAEF;YACA,IAAIP,IAAI,CAACY,KAAK,EAAE;cACdH,MAAM,CAACC,IAAI,CAAC;gBACVC,YAAY,EAAEX,IAAI,CAACW,YAAY;gBAC/BV,IAAI,EAAED,IAAI,CAACY,KAAK;gBAChBR,OAAO,EAAE,EAAE;gBACXC,QAAQ,EAAE,EAAE;gBACZC,OAAO,EAAE,EAAE;gBACXC,QAAQ,EAAE;cACZ,CAAC,CAAC;YACJ;YAEA,OAAOE,MAAM;UACf,CAAC,EAAE,EAAE,CAAC;QACR,OAAO,IAAIb,QAAQ,EAAE;UACnB,IAAI,CAACT,YAAW,GAAI,CAAC;YACnBc,IAAI,EAAEL,QAAQ,CAACK,IAAI;YACnBC,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAACP,QAAQ,CAACQ,OAAO,EAAER,QAAQ,CAACS,QAAQ,EAAET,QAAQ,CAACU,OAAO,EAAEV,QAAQ,CAACW,QAAQ;UACnH,CAAC,CAAC;UAEF,IAAI,CAACnB,KAAI,GAAI,CAACQ,QAAQ,CAAC;QACzB,OAAO;UACL,IAAI,CAACT,YAAW,GAAI,EAAE;UACtB,IAAI,CAACC,KAAI,GAAI,EAAE;QACjB;MACF,CAAC;MACDyB,SAAS,EAAE;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACPX,qBAAqBA,CAACY,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAE;MAC1D;IAAA;EAEJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}