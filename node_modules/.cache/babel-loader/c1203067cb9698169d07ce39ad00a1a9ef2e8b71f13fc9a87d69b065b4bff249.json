{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      selectedEmployee: null,\n      selectedDate: null,\n      employeeTable: true,\n      hours: true,\n      currentPage: 1,\n      rowsPerPage: 5,\n      Search: \"\",\n      punchValues: {\n        Intime1: null,\n        Intime2: null,\n        Outtime1: null,\n        Outtime2: null,\n        Intime3: [],\n        Outtime3: []\n      }\n    };\n  },\n  computed: {\n    //   userDetails() {\n    //     return this.$store.state.userData && this.$store.state.userData.length > 0\n    //       ? this.$store.state.userData[0]\n    //       : null;\n    //   },\n    //   employeeList() {\n    //     if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n    //       const userId = this.userDetails ? this.userDetails.userId : null;\n    //       if (userId) {\n    //         const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\n    //         const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n    //           const key = employee.empId;\n    //           if (!acc[key]) {\n    //             acc[key] = {\n    //               empId: employee.empId,\n    //               empName: employee.empName,\n    //               empRole: employee.empRole,\n    //               attendances: []\n    //             };\n    //           }\n    //           acc[key].attendances.push(employee);\n    //           return acc;\n    //         }, {});\n    //         const uniqueEmployees = Object.values(groupedEmployees);\n    //         return uniqueEmployees;\n    //       }\n    //     }\n    //     return [];\n    //   },\n    //   workingHoursData() {\n    //     const attendanceDates = {};\n    //     this.employeeList.forEach(employee => {\n    //       employee.attendances.forEach(attendance => {\n    //         if (!attendanceDates[attendance.date]) {\n    //           attendanceDates[attendance.date] = {\n    //             date: attendance.date,\n    //             Intime: [],\n    //             Outtime: [],\n    //             totalDifference: 0\n    //           };\n    //         }\n    //         attendanceDates[attendance.date].Intime.push(attendance.inTime);\n    //         if (attendance.outTime) {\n    //           const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n    //           const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n    //           const diff = Math.abs(outtimeDate - intimeDate);\n    //          console.log(diff)\n    //           attendanceDates[attendance.date].totalDifference += diff;\n    //           attendanceDates[attendance.date].Outtime.push(attendance.outTime);\n    //         }\n    //       });\n    //     });\n\n    //     return Object.values(attendanceDates).map(dateInfo => {\n    //       const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n    //       const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\n    //       return {\n    //         date: dateInfo.date,\n    //         Intime: dateInfo.Intime,\n    //         // Intime: dateInfo.Intime[0], \n    //         // Outtime: dateInfo.Outtime[dateInfo.Outtime.length - 1], \n    //         Outtime: dateInfo.Outtime,\n    //         totalHours: totalHours,\n    //         totalMinutes: totalMinutes\n    //       };\n    //     }).filter(record => record.date.includes(this.Search));\n\n    //   },\n    //   WeekHours() {\n    //     if (this.workingHoursData.length > 0) {\n    //       const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n    //       const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n    //       const totalInMinutes = totalHours * 60 + totalMinutes;\n    //       const averageInMinutes = totalInMinutes / 5;\n    //       const averageHours = Math.floor(averageInMinutes / 60);\n    //       const averageMinutes = Math.floor(averageInMinutes % 60);\n    //       const totallength = this.workingHoursData.length;\n    //       console.log(totallength);\n    //       return `${averageHours} hrs ${averageMinutes} mins`;\n\n    //     }\n    //     return null;\n    //   },\n    //   MonthHours() {\n    //     if (this.workingHoursData.length > 0) {\n    //       const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n    //       const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n    //       const totalInMinutes = totalHours * 60 + totalMinutes;\n    //       const averageInMinutes = totalInMinutes;\n    //       const averageHours = Math.floor(averageInMinutes / 60);\n    //       const averageMinutes = Math.floor(averageInMinutes % 60);\n    //       const totallength = this.workingHoursData.length;\n    //       console.log(totallength);\n    //       return `${averageHours} hrs ${averageMinutes} mins`;\n\n    //     }\n    //     return null;\n    //   },\n    getteam() {\n      return this.$store.getters.getTeamMembers;\n    }\n    // totalPages() {\n    //   const totalPages = Math.ceil(this.workingHoursData.length / this.rowsPerPage);\n    //   console.log(\"Total Pages:\", totalPages);\n    //   return totalPages;\n    // },\n    // paginatedData() {\n    //   const start = (this.currentPage - 1) * this.rowsPerPage;\n    //   const end = start + this.rowsPerPage;\n    //   return this.workingHoursData.slice(start, end);\n    // },\n  },\n  created() {\n    // this.initializePunchValues();\n    this.GetUserValues();\n  },\n  methods: {\n    GetUserValues() {\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n        this.userDetails = this.$store.state.userData[0];\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n            const key = employee.empId;\n            if (!acc[key]) {\n              acc[key] = {\n                empId: employee.empId,\n                empName: employee.empName,\n                empRole: employee.empRole,\n                attendances: []\n              };\n            }\n            acc[key].attendances.push(employee);\n            return acc;\n          }, {});\n          this.employeeList = Object.values(groupedEmployees);\n          console.log(\"ðŸš€ ~ GetUserValues ~ this.employeeList:\", this.employeeList);\n        }\n        this.calculateWorkingHoursData();\n      } else {\n        this.userDetails = null;\n        this.employeeList = [];\n      }\n    },\n    calculateWorkingHoursData() {\n      const attendanceDates = {};\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          if (!attendanceDates[attendance.date]) {\n            attendanceDates[attendance.date] = {\n              date: attendance.date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[attendance.date].Intime.push(attendance.inTime);\n          if (attendance.outTime) {\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[attendance.date].totalDifference += diff;\n            attendanceDates[attendance.date].Outtime.push(attendance.outTime);\n          }\n        });\n      });\n      const workingHoursData = Object.values(attendanceDates).map(dateInfo => {\n        const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n        const totalMinutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n        return {\n          date: dateInfo.date,\n          Intime: dateInfo.Intime,\n          Outtime: dateInfo.Outtime,\n          totalHours: totalHours,\n          totalMinutes: totalMinutes\n        };\n      });\n      // .filter(record => record.date.includes(this.Search));\n\n      this.calculateWeekHours(workingHoursData);\n      this.calculateMonthHours(workingHoursData);\n    },\n    calculateWeekHours(workingHoursData) {\n      if (workingHoursData.length > 0) {\n        const totalHours = workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / 5;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        this.WeekHours = `${averageHours} hrs ${averageMinutes} mins`;\n      } else {\n        this.WeekHours = null;\n      }\n    },\n    calculateMonthHours(workingHoursData) {\n      if (workingHoursData.length > 0) {\n        const totalHours = workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        this.MonthHours = `${averageHours} hrs ${averageMinutes} mins`;\n      } else {\n        this.MonthHours = null;\n      }\n    },\n    // initializePunchValues() {\n    //   if (this.workingHoursData.length > 0) {\n    //     const record = this.workingHoursData[0];\n    //     this.punchValues.Intime1 = record.Intime[0];\n    //     this.punchValues.Intime2 = record.Intime[1];\n    //     this.punchValues.Outtime1 = record.Outtime[0];\n    //     this.punchValues.Outtime2 = record.Outtime[1];\n    //     this.punchValues.Intime3 = record.Intime[2] || [];\n    //     this.punchValues.Outtime3 = record.Outtime[2] || [];\n    //   }\n    // },\n    // getPunchDetails(record) {\n    //   this.punchValues.Intime1 = record.Intime[0];\n    //   this.punchValues.Intime2 = record.Intime[1];\n    //   this.punchValues.Outtime1 = record.Outtime[0];\n    //   this.punchValues.Outtime2 = record.Outtime[1];\n    //   this.punchValues.Intime3 = record.Intime[2] || [];\n    //   this.punchValues.Outtime3 = record.Outtime[2] || [];\n    // },\n    prevPage() {\n      if (this.currentPage > 1) {\n        this.currentPage--;\n      }\n    },\n    nextPage() {\n      if (this.currentPage < this.totalPages) {\n        this.currentPage++;\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","selectedEmployee","selectedDate","employeeTable","hours","currentPage","rowsPerPage","Search","punchValues","Intime1","Intime2","Outtime1","Outtime2","Intime3","Outtime3","computed","getteam","$store","getters","getTeamMembers","created","GetUserValues","methods","state","userData","length","userDetails","userId","filteredEmployees","filter","employee","empId","groupedEmployees","reduce","acc","key","empName","empRole","attendances","push","employeeList","Object","values","console","log","calculateWorkingHoursData","attendanceDates","forEach","attendance","date","Intime","Outtime","totalDifference","inTime","outTime","intimeDate","Date","outtimeDate","diff","Math","abs","workingHoursData","map","dateInfo","totalHours","floor","totalMinutes","calculateWeekHours","calculateMonthHours","curr","totalInMinutes","averageInMinutes","averageHours","averageMinutes","WeekHours","MonthHours","prevPage","nextPage","totalPages"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["\r\n <template>\r\n  <div class=\"mainHeading\">\r\n    <p>HRMS- Human Resource Management System</p>\r\n  </div>\r\n  <div class=\"AttendenceContainer\">\r\n    <div class=\"DateContainer\">\r\n      <div class=\"table1\">\r\n        <h3 class=\"StatisticsHeading\">Satistics</h3>\r\n        <div class=\"StatisticsContainer\">\r\n          <div class=\"WeekBox\">\r\n            <label class=\"label\">Week</label>\r\n            <div class=\"WeekLeaves\">{{ WeekHours }}</div>\r\n          </div><br>\r\n          <div class=\"MonthBox\">\r\n            <label class=\"label\">Month</label>\r\n            <div class=\"MonthLeaves\">{{ MonthHours }}</div>\r\n          </div><br>\r\n          <div class=\"AbsentBox\">\r\n            <label class=\"label\">Absent/month</label>\r\n            <div class=\"leavebalance3\">\r\n              <h3>0</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n        <div class=\"DateActivity1\" >\r\n        <div> \r\n          <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Intime1 }}</p>\r\n          <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Outtime1 }}</p>\r\n          <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime2 }}</p>\r\n          <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime2 }}</p>\r\n        </div>\r\n          <div v-if=\"punchValues.Intime3 && punchValues.Intime3.length > 1\" >\r\n        <h4 class=\"punchheading\">Punch In At:</h4>\r\n        <p class=\"punchValues\">{{  punchValues.Intime3 }}</p>\r\n        <h4 class=\"punchheading\">Punch Out At:</h4>\r\n        <p class=\"punchValues\">{{ punchValues.Outtime3 }}</p>\r\n      </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"AttendenceTable\">\r\n      <div>\r\n        <h3 class=\"Heading\">Attendence</h3>\r\n      </div>\r\n      <div><input type=\"text\" placeholder=\"Search\" class=\"searchElement\" v-model=\"Search\">\r\n        <div>\r\n          <table class=\"table table-bordered\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>InTime</th>\r\n                <th>OutTime</th>\r\n                <th>WorkingHours</th>\r\n              </tr>\r\n            </thead>\r\n            <tr v-for=\"(record, index) in workingHoursData\" :key=\"index\" @click=\"getPunchDetails(record)\">\r\n              <td>{{ record.date }}</td>\r\n              <td>{{ record.Intime[0] }}</td>\r\n              <td>{{ record.Outtime[1] }}</td>\r\n              <td>{{ record.totalHours }} hrs {{ record.totalMinutes }} mins</td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"pagination\">\r\n      <button @click=\"prevPage\" :disabled=\"currentPage === 1\">Previous</button>\r\n      <span>Page {{ currentPage }} of {{ totalPages }}</span>\r\n      <button @click=\"nextPage\" :disabled=\"currentPage === totalPages\">Next</button>\r\n    </div>\r\n  </div>\r\n  <div class=\"sidebar\">\r\n    <div class=\"nav\">\r\n      <div class=\"menu\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-home'></i>\r\n              <RouterLink to=\"/navigation\" class=\"text\"> Home</RouterLink>\r\n            </a>\r\n          </li>\r\n          <li class=\"active\" v-if=\"getteam\">\r\n            <a href=\"#\">\r\n              <i class=\"fa-solid fa-users\"></i>\r\n              <RouterLink to=\"/members\" class=\"text\"> Team Members</RouterLink>\r\n            </a>\r\n          </li>\r\n          <li class=\"active\">\r\n            <a href=\"#\">\r\n              <i class='bx bxs-calendar'></i>\r\n\r\n              <RouterLink to=\"/attendence\" class=\"text\">Attendence</RouterLink>\r\n            </a>\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n      <div class=\"menu\" id=\"logout\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-info-circle'></i>\r\n              <RouterLink to=\"/\" class=\"text\" @click=\"logout\"> Help</RouterLink>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-log-out'></i>\r\n              <RouterLink to=\"/\" class=\"text\" @click=\"logout\"> Logout</RouterLink>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedEmployee: null,\r\n      selectedDate: null,\r\n      employeeTable: true,\r\n      hours: true,\r\n      currentPage: 1,\r\n      rowsPerPage: 5,\r\n      Search: \"\",\r\n      punchValues: {\r\n        Intime1: null,\r\n        Intime2: null,\r\n        Outtime1: null,\r\n        Outtime2: null,\r\n        Intime3: [],\r\n        Outtime3: []\r\n      }\r\n    };\r\n  },\r\n   computed: {\r\n  //   userDetails() {\r\n  //     return this.$store.state.userData && this.$store.state.userData.length > 0\r\n  //       ? this.$store.state.userData[0]\r\n  //       : null;\r\n  //   },\r\n  //   employeeList() {\r\n  //     if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n  //       const userId = this.userDetails ? this.userDetails.userId : null;\r\n  //       if (userId) {\r\n  //         const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\r\n  //         const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n  //           const key = employee.empId;\r\n  //           if (!acc[key]) {\r\n  //             acc[key] = {\r\n  //               empId: employee.empId,\r\n  //               empName: employee.empName,\r\n  //               empRole: employee.empRole,\r\n  //               attendances: []\r\n  //             };\r\n  //           }\r\n  //           acc[key].attendances.push(employee);\r\n  //           return acc;\r\n  //         }, {});\r\n  //         const uniqueEmployees = Object.values(groupedEmployees);\r\n  //         return uniqueEmployees;\r\n  //       }\r\n  //     }\r\n  //     return [];\r\n  //   },\r\n  //   workingHoursData() {\r\n  //     const attendanceDates = {};\r\n  //     this.employeeList.forEach(employee => {\r\n  //       employee.attendances.forEach(attendance => {\r\n  //         if (!attendanceDates[attendance.date]) {\r\n  //           attendanceDates[attendance.date] = {\r\n  //             date: attendance.date,\r\n  //             Intime: [],\r\n  //             Outtime: [],\r\n  //             totalDifference: 0\r\n  //           };\r\n  //         }\r\n  //         attendanceDates[attendance.date].Intime.push(attendance.inTime);\r\n  //         if (attendance.outTime) {\r\n  //           const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n  //           const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n  //           const diff = Math.abs(outtimeDate - intimeDate);\r\n  //          console.log(diff)\r\n  //           attendanceDates[attendance.date].totalDifference += diff;\r\n  //           attendanceDates[attendance.date].Outtime.push(attendance.outTime);\r\n  //         }\r\n  //       });\r\n  //     });\r\n\r\n  //     return Object.values(attendanceDates).map(dateInfo => {\r\n  //       const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n  //       const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n  //       return {\r\n  //         date: dateInfo.date,\r\n  //         Intime: dateInfo.Intime,\r\n  //         // Intime: dateInfo.Intime[0], \r\n  //         // Outtime: dateInfo.Outtime[dateInfo.Outtime.length - 1], \r\n  //         Outtime: dateInfo.Outtime,\r\n  //         totalHours: totalHours,\r\n  //         totalMinutes: totalMinutes\r\n  //       };\r\n  //     }).filter(record => record.date.includes(this.Search));\r\n      \r\n  //   },\r\n  //   WeekHours() {\r\n  //     if (this.workingHoursData.length > 0) {\r\n  //       const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n  //       const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n  //       const totalInMinutes = totalHours * 60 + totalMinutes;\r\n  //       const averageInMinutes = totalInMinutes / 5;\r\n  //       const averageHours = Math.floor(averageInMinutes / 60);\r\n  //       const averageMinutes = Math.floor(averageInMinutes % 60);\r\n  //       const totallength = this.workingHoursData.length;\r\n  //       console.log(totallength);\r\n  //       return `${averageHours} hrs ${averageMinutes} mins`;\r\n\r\n  //     }\r\n  //     return null;\r\n  //   },\r\n  //   MonthHours() {\r\n  //     if (this.workingHoursData.length > 0) {\r\n  //       const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n  //       const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n  //       const totalInMinutes = totalHours * 60 + totalMinutes;\r\n  //       const averageInMinutes = totalInMinutes;\r\n  //       const averageHours = Math.floor(averageInMinutes / 60);\r\n  //       const averageMinutes = Math.floor(averageInMinutes % 60);\r\n  //       const totallength = this.workingHoursData.length;\r\n  //       console.log(totallength);\r\n  //       return `${averageHours} hrs ${averageMinutes} mins`;\r\n\r\n  //     }\r\n  //     return null;\r\n  //   },\r\n    getteam() {\r\n      return this.$store.getters.getTeamMembers;\r\n    },\r\n    // totalPages() {\r\n    //   const totalPages = Math.ceil(this.workingHoursData.length / this.rowsPerPage);\r\n    //   console.log(\"Total Pages:\", totalPages);\r\n    //   return totalPages;\r\n    // },\r\n    // paginatedData() {\r\n    //   const start = (this.currentPage - 1) * this.rowsPerPage;\r\n    //   const end = start + this.rowsPerPage;\r\n    //   return this.workingHoursData.slice(start, end);\r\n    // },\r\n  },\r\n  created() {\r\n    // this.initializePunchValues();\r\n      this.GetUserValues();\r\n  },\r\n  methods: {\r\n    GetUserValues(){\r\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n      this.userDetails = this.$store.state.userData[0];\r\n      const userId = this.userDetails ? this.userDetails.userId : null;\r\n      if (userId) {\r\n        const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\r\n        const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n          const key = employee.empId;\r\n          if (!acc[key]) {\r\n            acc[key] = {\r\n              empId: employee.empId,\r\n              empName: employee.empName,\r\n              empRole: employee.empRole,\r\n              attendances: []\r\n            };\r\n          }\r\n          acc[key].attendances.push(employee);\r\n          return acc;\r\n        }, {});\r\n        this.employeeList = Object.values(groupedEmployees);\r\n        console.log(\"ðŸš€ ~ GetUserValues ~ this.employeeList:\", this.employeeList)\r\n      }\r\n      this.calculateWorkingHoursData();\r\n    } else {\r\n      this.userDetails = null;\r\n      this.employeeList = [];\r\n    }\r\n    },\r\n    calculateWorkingHoursData(){\r\n      const attendanceDates = {};\r\n    this.employeeList.forEach(employee => {\r\n      employee.attendances.forEach(attendance => {\r\n        if (!attendanceDates[attendance.date]) {\r\n          attendanceDates[attendance.date] = {\r\n            date: attendance.date,\r\n            Intime: [],\r\n            Outtime: [],\r\n            totalDifference: 0\r\n          };\r\n        }\r\n        attendanceDates[attendance.date].Intime.push(attendance.inTime);\r\n        if (attendance.outTime) {\r\n          const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n          const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n          const diff = Math.abs(outtimeDate - intimeDate);\r\n          attendanceDates[attendance.date].totalDifference += diff;\r\n          attendanceDates[attendance.date].Outtime.push(attendance.outTime);\r\n        }\r\n      });\r\n    });\r\n\r\n    const workingHoursData = Object.values(attendanceDates).map(dateInfo => {\r\n      const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n      const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n      return {\r\n        date: dateInfo.date,\r\n        Intime: dateInfo.Intime,\r\n        Outtime: dateInfo.Outtime,\r\n        totalHours: totalHours,\r\n        totalMinutes: totalMinutes\r\n      };\r\n    })\r\n    // .filter(record => record.date.includes(this.Search));\r\n\r\n    this.calculateWeekHours(workingHoursData);\r\n    this.calculateMonthHours(workingHoursData);\r\n    },\r\n    calculateWeekHours(workingHoursData){\r\n      if (workingHoursData.length > 0) {\r\n      const totalHours = workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n      const totalMinutes = workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n      const totalInMinutes = totalHours * 60 + totalMinutes;\r\n      const averageInMinutes = totalInMinutes / 5;\r\n      const averageHours = Math.floor(averageInMinutes / 60);\r\n      const averageMinutes = Math.floor(averageInMinutes % 60);\r\n      this.WeekHours = `${averageHours} hrs ${averageMinutes} mins`;\r\n    } else {\r\n      this.WeekHours = null;\r\n    }\r\n    },\r\n    calculateMonthHours(workingHoursData) {\r\n    if (workingHoursData.length > 0) {\r\n      const totalHours = workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n      const totalMinutes = workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n      const totalInMinutes = totalHours * 60 + totalMinutes;\r\n      const averageInMinutes = totalInMinutes;\r\n      const averageHours = Math.floor(averageInMinutes / 60);\r\n      const averageMinutes = Math.floor(averageInMinutes % 60);\r\n      this.MonthHours = `${averageHours} hrs ${averageMinutes} mins`;\r\n    } else {\r\n      this.MonthHours = null;\r\n    }\r\n  },\r\n    // initializePunchValues() {\r\n    //   if (this.workingHoursData.length > 0) {\r\n    //     const record = this.workingHoursData[0];\r\n    //     this.punchValues.Intime1 = record.Intime[0];\r\n    //     this.punchValues.Intime2 = record.Intime[1];\r\n    //     this.punchValues.Outtime1 = record.Outtime[0];\r\n    //     this.punchValues.Outtime2 = record.Outtime[1];\r\n    //     this.punchValues.Intime3 = record.Intime[2] || [];\r\n    //     this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n    //   }\r\n    // },\r\n    // getPunchDetails(record) {\r\n    //   this.punchValues.Intime1 = record.Intime[0];\r\n    //   this.punchValues.Intime2 = record.Intime[1];\r\n    //   this.punchValues.Outtime1 = record.Outtime[0];\r\n    //   this.punchValues.Outtime2 = record.Outtime[1];\r\n    //   this.punchValues.Intime3 = record.Intime[2] || [];\r\n    //   this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n    // },\r\n    prevPage() {\r\n      if (this.currentPage > 1) {\r\n        this.currentPage--;\r\n      }\r\n    },\r\n    nextPage() {\r\n      if (this.currentPage < this.totalPages) {\r\n        this.currentPage++;\r\n      }\r\n    },\r\n  },\r\n}\r\n</script>\r\n<style>\r\n@import url(https://fonts.googleapis.com/css?family=Inter:100,200,300,regular,500,600,700,800,900);\r\n\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n\r\n}\r\n\r\n.mainHeading {\r\n  font-family: 'Calibri Light';\r\n  color: black;\r\n  font-size: 22px;\r\n  background-color: aqua;\r\n  text-align: left;\r\n  padding-left: 45px;\r\n  height: 40px;\r\n\r\n}\r\n\r\n.AttendenceContainer {\r\n  margin-top: -12px;\r\n  border-radius: 20px;\r\n  margin-left: 18%;\r\n  margin-right: 4px;\r\n  border: 5px solid #000;\r\n  margin-top: 10px;\r\n  height: auto\r\n}\r\n\r\n.DateContainer {\r\n  display: flex;\r\n  margin-top: 4px;\r\n  padding-top: 5px;\r\n  padding-left: 30px;\r\n  padding-right: 10px;\r\n  background-color: whitesmoke;\r\n  border-radius: 10px;\r\n  margin-right: 20px;\r\n  margin-bottom: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n\r\nbody {\r\n  background-color: white;\r\n  background-size: 20%;\r\n  background-repeat: no-repeat;\r\n  background-position: 55% center;\r\n\r\n}\r\n\r\n.leavesummary {\r\n  padding-right: 200px;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n\r\n}\r\n\r\n.sidebar {\r\n  position: fixed;\r\n  top: 40px;\r\n  left: 0;\r\n  width: px;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #1f3050;\r\n  padding: 24px;\r\n  gap: 40px;\r\n  transition: all 0.3s;\r\n  padding-left: 0%;\r\n  padding-top: 100px;\r\n\r\n}\r\n\r\n.menu .title {\r\n  position: absolute;\r\n  padding-left: 20px;\r\n  font-size: 10px;\r\n  font-weight: 500;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.menu ul li {\r\n  position: relative;\r\n  list-style: none;\r\n  margin-bottom: 5px;\r\n\r\n}\r\n\r\n.menu ul li a.bx {\r\n  font-size: 20px;\r\n}\r\n\r\n.menu ul li a.bi {\r\n  font-size: 20px;\r\n}\r\n\r\n.menu ul li a {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  font-size: 22px;\r\n  font-weight: 500;\r\n  color: white;\r\n  text-decoration: none;\r\n  padding: 10px 4px;\r\n  padding-left: 5px;\r\n  border-radius: 8px;\r\n  transition: all 0.3s;\r\n  font-family: Arial, Helvetica, sans-serif\r\n}\r\n\r\n.menu ul li a:hover {\r\n  background-color: blue;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 230px;\r\n}\r\n\r\n#logout {\r\n  padding-bottom: 0px;\r\n  margin-bottom: 0px;\r\n}\r\n\r\n.table1 {\r\n  margin-left: 0px;\r\n  margin-right: -10px;\r\n  padding-right: 18px;\r\n  width: 500px;\r\n  padding-left: -10px;\r\n}\r\n\r\n.DateTable {\r\n  margin-right: 5px;\r\n  padding-right: 5px;\r\n  margin-left: 200px;\r\n}\r\n\r\n.DateActivity1 {\r\n  border-radius: 10px;\r\n  width: 200px;\r\n  gap: 2px;\r\n  padding-top: -5px;\r\n  margin-left: 200px;\r\n  margin-top: -20px;\r\n  height: 320px;\r\n  overflow: scroll;\r\n  overflow-x: hidden; \r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  width: 390px;\r\n  height: auto;\r\n  padding-left: 10px;\r\n  padding-top: 10px;\r\n  margin-right: 20px;\r\n  margin-top:-5px;\r\n  width: 400px;\r\n height: 280px;\r\n\r\n}\r\n\r\n\r\n.WeekBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: palevioletred;\r\n  width: 180px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  height: 120px;\r\n  padding-left: 3px;\r\n}\r\n\r\n.MonthBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: rgb(70, 206, 70);\r\n  width: 180px;\r\n  height: 120px;\r\n  padding-left: 3px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.AbsentBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: rgb(231, 14, 14);\r\n  width: 180px;\r\n  margin-left: 20px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  height: 120px;\r\n  margin-right: 10px;\r\n  padding-left: 3px;\r\n}\r\n\r\n.WeekLeaves {\r\n  font-size: 22px;\r\n  padding-left: 4px;\r\n  font-family: 'Times New Roman', Times, serif;\r\n  color: palevioletred;\r\n}\r\n\r\n.MonthLeaves {\r\n  font-size: 22px;\r\n  padding-left: 4px;\r\n  color: rgb(70, 206, 70);\r\n  font-family: 'Times New Roman', Times, serif;\r\n}\r\n\r\n.leavebalance3 {\r\n  font-size: 30px;\r\n  padding-left: 4px;\r\n  color: rgb(231, 14, 14);\r\n  font-family: 'Times New Roman', Times, serif;\r\n}\r\n\r\n.StatisticsContainer {\r\n  display: flex;\r\n  border-radius: 10px;\r\n  padding-bottom: 2px;\r\n  width: 500px;\r\n  padding-top: 7px;\r\n  height: 170px;\r\n  padding-left: 15px;\r\n  margin-left: -4%;\r\n  \r\n\r\n}\r\n\r\n.DateHeading {\r\n  padding-top: -10px;\r\n  padding-bottom: 10px;\r\n  margin-bottom: 4px;\r\n  font-size: 25px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  color: rgb(214, 60, 32);\r\n}\r\n\r\n.AttendenceTable {\r\n\r\n  padding-left: 10px;\r\n  padding-right: 20px;\r\n  margin-right: 10px;\r\n  border: 1px #ccc;\r\n  border-radius: 5px;\r\n  background-color: beige;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  margin-left: 1%;\r\n}\r\n\r\n.searchElement {\r\n  border-radius: 5px;\r\n  height: 35px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n  width: 180px;\r\n  padding-left: 4px;\r\n}\r\n\r\n.punchheading {\r\n  color: red;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n}\r\n\r\n.punchValues {\r\n  color: black;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n}\r\n\r\n.pagination {\r\n  margin-top: 2px;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-left: 1000px;\r\n}\r\n\r\n.pagination button {\r\n  padding: 8px 12px;\r\n  background-color: #007bff;\r\n  color: white;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  margin-right: 5px;\r\n}\r\n\r\n.pagination button:disabled {\r\n  background-color: #ccc;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.pagination span {\r\n  margin: 0 10px;\r\n  font-size: 16px;\r\n}\r\n.StatisticsHeading{\r\n  padding-top: 10px;\r\n  padding-left: -2px;\r\n  padding-bottom: 5px;\r\n  font-size: 25px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  color: rgb(214, 60, 32)\r\n}\r\n</style>"],"mappings":";AA0HA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,gBAAgB,EAAE,IAAI;MACtBC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE,IAAI;MACnBC,KAAK,EAAE,IAAI;MACXC,WAAW,EAAE,CAAC;MACdC,WAAW,EAAE,CAAC;MACdC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE;QACXC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE,EAAE;QACXC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH,CAAC;EACAC,QAAQ,EAAE;IACX;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACEC,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,cAAc;IAC3C;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR;IACE,IAAI,CAACC,aAAa,CAAC,CAAC;EACxB,CAAC;EACDC,OAAO,EAAE;IACPD,aAAaA,CAAA,EAAE;MACb,IAAI,IAAI,CAACJ,MAAM,CAACM,KAAK,CAACC,QAAO,IAAK,IAAI,CAACP,MAAM,CAACM,KAAK,CAACC,QAAQ,CAACC,MAAK,GAAI,CA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}