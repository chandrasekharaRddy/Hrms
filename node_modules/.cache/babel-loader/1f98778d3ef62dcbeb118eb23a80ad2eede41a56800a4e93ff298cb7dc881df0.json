{"ast":null,"code":"export default {\n  data() {\n    return {\n      workingHours: [],\n      goals: []\n    };\n  },\n  computed: {\n    userData() {\n      return this.$store.getters.getUserData;\n    }\n  },\n  watch: {\n    userData: {\n      handler(newValue) {\n        if (Array.isArray(newValue.details)) {\n          this.workingHours = newValue.details.map(detail => ({\n            Date: detail.Date,\n            WorkingHours: this.calculateWorkingHours(detail.InTime1, detail.OutTime2)\n          }));\n          this.goals = newValue.details.map(detail => ({\n            employeeName: newValue.employeeName,\n            Date: detail.Date,\n            InTime1: detail.InTime1,\n            OutTime1: detail.OutTime1,\n            InTime2: detail.InTime2,\n            OutTime2: detail.OutTime2\n          }));\n        } else {\n          this.workingHours = [];\n          this.goals = [];\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    calculateWorkingHours(inTime1, outTime2) {\n      console.log('Input times:', inTime1, outTime2);\n\n      // Trim whitespace from the time values\n      const trimmedInTime = inTime1.trim();\n      const trimmedOutTime = outTime2.trim();\n      console.log('Trimmed times:', trimmedInTime, trimmedOutTime);\n\n      // Regular expression to match time format (HH:mm AM/PM or HH:mm)\n      const timeFormatRegex = /^(0?[1-9]|1[0-2]):[0-5][0-9] (AM|PM)|([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\n      if (!timeFormatRegex.test(trimmedInTime) || !timeFormatRegex.test(trimmedOutTime)) {\n        console.error('Invalid time format.');\n        return 'Invalid working hours';\n      }\n      const startTime = new Date(`2000-01-01T${trimmedInTime}`);\n      const endTime = new Date(`2000-01-01T${trimmedOutTime}`);\n      console.log('Start time:', startTime);\n      console.log('End time:', endTime);\n      if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {\n        console.error('Invalid time values.');\n        return 'Invalid working hours';\n      }\n      const diff = endTime - startTime;\n      const totalHours = Math.floor(diff / (1000 * 60 * 60));\n      const totalMinutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n      return `${totalHours} hours ${totalMinutes} minutes`;\n    }\n  }\n};","map":{"version":3,"names":["data","workingHours","goals","computed","userData","$store","getters","getUserData","watch","handler","newValue","Array","isArray","details","map","detail","Date","WorkingHours","calculateWorkingHours","InTime1","OutTime2","employeeName","OutTime1","InTime2","immediate","methods","inTime1","outTime2","console","log","trimmedInTime","trim","trimmedOutTime","timeFormatRegex","test","error","startTime","endTime","isNaN","getTime","diff","totalHours","Math","floor","totalMinutes"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <table class=\"table table-bordered\">\r\n      <!-- Working Hours Table -->\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(hours, index) in workingHours\" :key=\"index\">\r\n          <td>{{ hours.Date }}</td>\r\n          <td>{{ hours.WorkingHours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Goals Table -->\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>InTime1</th>\r\n          <th>OutTime1</th>\r\n          <th>InTime2</th>\r\n          <th>OutTime2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(goal, index) in goals\" :key=\"index\">\r\n          <td>{{ goal.employeeName }}</td>\r\n          <td>{{ goal.Date }}</td>\r\n          <td>{{ goal.InTime1 }}</td>\r\n          <td>{{ goal.OutTime1 }}</td>\r\n          <td>{{ goal.InTime2 }}</td>\r\n          <td>{{ goal.OutTime2 }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      workingHours: [],\r\n      goals: [],\r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData;\r\n    },\r\n  },\r\n  watch: {\r\n    userData: {\r\n      handler(newValue) {\r\n        if (Array.isArray(newValue.details)) {\r\n          this.workingHours = newValue.details.map((detail) => ({\r\n            Date: detail.Date,\r\n            WorkingHours: this.calculateWorkingHours(detail.InTime1, detail.OutTime2),\r\n          }));\r\n\r\n          this.goals = newValue.details.map((detail) => ({\r\n            employeeName: newValue.employeeName,\r\n            Date: detail.Date,\r\n            InTime1: detail.InTime1,\r\n            OutTime1: detail.OutTime1,\r\n            InTime2: detail.InTime2,\r\n            OutTime2: detail.OutTime2,\r\n          }));\r\n        } else {\r\n          this.workingHours = [];\r\n          this.goals = [];\r\n        }\r\n      },\r\n       immediate: true,\r\n    \r\n    },\r\n  },\r\n  methods: {\r\n    calculateWorkingHours(inTime1, outTime2) {\r\n  console.log('Input times:', inTime1, outTime2);\r\n\r\n  // Trim whitespace from the time values\r\n  const trimmedInTime = inTime1.trim();\r\n  const trimmedOutTime = outTime2.trim();\r\n\r\n  console.log('Trimmed times:', trimmedInTime, trimmedOutTime);\r\n\r\n  // Regular expression to match time format (HH:mm AM/PM or HH:mm)\r\n  const timeFormatRegex = /^(0?[1-9]|1[0-2]):[0-5][0-9] (AM|PM)|([01]?[0-9]|2[0-3]):[0-5][0-9]$/;\r\n\r\n  if (!timeFormatRegex.test(trimmedInTime) || !timeFormatRegex.test(trimmedOutTime)) {\r\n    console.error('Invalid time format.');\r\n    return 'Invalid working hours';\r\n  }\r\n\r\n  const startTime = new Date(`2000-01-01T${trimmedInTime}`);\r\n  const endTime = new Date(`2000-01-01T${trimmedOutTime}`);\r\n\r\n  console.log('Start time:', startTime);\r\n  console.log('End time:', endTime);\r\n\r\n  if (isNaN(startTime.getTime()) || isNaN(endTime.getTime())) {\r\n    console.error('Invalid time values.');\r\n    return 'Invalid working hours';\r\n  }\r\n\r\n  const diff = endTime - startTime;\r\n  const totalHours = Math.floor(diff / (1000 * 60 * 60));\r\n  const totalMinutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n  return `${totalHours} hours ${totalMinutes} minutes`;\r\n}\r\n\r\n\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"AA6CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW;IACxC;EACF,CAAC;EACDC,KAAK,EAAE;IACLJ,QAAQ,EAAE;MACRK,OAAOA,CAACC,QAAQ,EAAE;QAChB,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAACG,OAAO,CAAC,EAAE;UACnC,IAAI,CAACZ,YAAW,GAAIS,QAAQ,CAACG,OAAO,CAACC,GAAG,CAAEC,MAAM,KAAM;YACpDC,IAAI,EAAED,MAAM,CAACC,IAAI;YACjBC,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAACH,MAAM,CAACI,OAAO,EAAEJ,MAAM,CAACK,QAAQ;UAC1E,CAAC,CAAC,CAAC;UAEH,IAAI,CAAClB,KAAI,GAAIQ,QAAQ,CAACG,OAAO,CAACC,GAAG,CAAEC,MAAM,KAAM;YAC7CM,YAAY,EAAEX,QAAQ,CAACW,YAAY;YACnCL,IAAI,EAAED,MAAM,CAACC,IAAI;YACjBG,OAAO,EAAEJ,MAAM,CAACI,OAAO;YACvBG,QAAQ,EAAEP,MAAM,CAACO,QAAQ;YACzBC,OAAO,EAAER,MAAM,CAACQ,OAAO;YACvBH,QAAQ,EAAEL,MAAM,CAACK;UACnB,CAAC,CAAC,CAAC;QACL,OAAO;UACL,IAAI,CAACnB,YAAW,GAAI,EAAE;UACtB,IAAI,CAACC,KAAI,GAAI,EAAE;QACjB;MACF,CAAC;MACAsB,SAAS,EAAE;IAEd;EACF,CAAC;EACDC,OAAO,EAAE;IACPP,qBAAqBA,CAACQ,OAAO,EAAEC,QAAQ,EAAE;MAC3CC,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEH,OAAO,EAAEC,QAAQ,CAAC;;MAE9C;MACA,MAAMG,aAAY,GAAIJ,OAAO,CAACK,IAAI,CAAC,CAAC;MACpC,MAAMC,cAAa,GAAIL,QAAQ,CAACI,IAAI,CAAC,CAAC;MAEtCH,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,aAAa,EAAEE,cAAc,CAAC;;MAE5D;MACA,MAAMC,eAAc,GAAI,sEAAsE;MAE9F,IAAI,CAACA,eAAe,CAACC,IAAI,CAACJ,aAAa,KAAK,CAACG,eAAe,CAACC,IAAI,CAACF,cAAc,CAAC,EAAE;QACjFJ,OAAO,CAACO,KAAK,CAAC,sBAAsB,CAAC;QACrC,OAAO,uBAAuB;MAChC;MAEA,MAAMC,SAAQ,GAAI,IAAIpB,IAAI,CAAE,cAAac,aAAc,EAAC,CAAC;MACzD,MAAMO,OAAM,GAAI,IAAIrB,IAAI,CAAE,cAAagB,cAAe,EAAC,CAAC;MAExDJ,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEO,SAAS,CAAC;MACrCR,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEQ,OAAO,CAAC;MAEjC,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,CAAC,CAAC,KAAKD,KAAK,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;QAC1DX,OAAO,CAACO,KAAK,CAAC,sBAAsB,CAAC;QACrC,OAAO,uBAAuB;MAChC;MAEA,MAAMK,IAAG,GAAIH,OAAM,GAAID,SAAS;MAChC,MAAMK,UAAS,GAAIC,IAAI,CAACC,KAAK,CAACH,IAAG,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;MACtD,MAAMI,YAAW,GAAIF,IAAI,CAACC,KAAK,CAAEH,IAAG,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;MAExE,OAAQ,GAAEC,UAAU,UAAUG,YAAY,UAAU;IACtD;EAGE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}