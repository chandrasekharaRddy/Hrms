{"ast":null,"code":"export default {\n  data() {\n    return {\n      workingHours: [],\n      goals: []\n    };\n  },\n  computed: {\n    userData() {\n      return this.$store.getters.getUserData;\n    }\n  },\n  watch: {\n    userData: {\n      handler(newValue) {\n        this.goals = [newValue];\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    logout(user) {\n      const currentDate = new Date();\n      user.signOut = currentDate.toLocaleTimeString();\n      this.$store.dispatch('updateUserData', user);\n      this.goals = [...this.goals];\n    },\n    selectDate(date) {\n      const selectedGoals = this.goals.filter(goal => goal.date === date);\n      console.log(\"Selected Goals:\", selectedGoals);\n      this.workingHours = selectedGoals.map(goal => {\n        const hours = this.calculate(goal.signIn, goal.signOut);\n        console.log(`Working Hours for ${goal.date}:`, hours);\n        return {\n          date: goal.presentDate,\n          hours: hours\n        };\n      });\n    },\n    calculate(signIn, signOut) {\n      if (signIn && signOut) {\n        const signInTime = new Date(`2000-01-01 ${signIn}`);\n        const signOutTime = new Date(`2000-01-01 ${signOut}`);\n\n        // Check if Date objects are valid\n        if (isNaN(signInTime.getTime()) || isNaN(signOutTime.getTime())) {\n          return \"Invalid date format\";\n        }\n        const timeDiff = signOutTime - signInTime;\n        console.log(\"Time Difference (ms):\", timeDiff);\n        const hours = Math.floor(timeDiff / (1000 * 60 * 60));\n        const minutes = Math.floor(timeDiff % (1000 * 60 * 60) / (1000 * 60));\n        console.log(\"Hours:\", hours);\n        console.log(\"Minutes:\", minutes);\n        return `${hours} hrs ${minutes} mins`;\n      } else {\n        return \"0 hrs 0 mins\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","workingHours","goals","computed","userData","$store","getters","getUserData","watch","handler","newValue","immediate","methods","logout","user","currentDate","Date","signOut","toLocaleTimeString","dispatch","selectDate","date","selectedGoals","filter","goal","console","log","map","hours","calculate","signIn","presentDate","signInTime","signOutTime","isNaN","getTime","timeDiff","Math","floor","minutes"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":[" <template>\r\n  <div>\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(workingHour, index) in workingHours\" :key=\"index\">\r\n          <td>{{ workingHour.date }}</td>\r\n          <td>{{ workingHour.hours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>SignIn</th>\r\n          <th>SignOut</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(goal, index) in goals\" :key=\"index\">\r\n          <td>{{ goal.username }}</td>\r\n          <td @click=\"selectDate(goal.date)\">{{ goal.presentDate }}</td>\r\n          <td>{{ goal.presentTime }}</td>\r\n          <td>{{ goal.signOut }}</td>\r\n          <td><button @click=\"logout(goal)\">SignOut</button></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      workingHours: [],\r\n      goals: [],\r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData;\r\n    },\r\n  },\r\n  watch: {\r\n    userData: {\r\n      handler(newValue) {\r\n        this.goals = [newValue];\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  methods: {\r\n    logout(user) {\r\n      const currentDate = new Date();\r\n      user.signOut = currentDate.toLocaleTimeString();\r\n      this.$store.dispatch('updateUserData', user);\r\n      this.goals = [...this.goals];\r\n    },\r\n    selectDate(date) {\r\n  const selectedGoals = this.goals.filter((goal) => goal.date === date);\r\n  console.log(\"Selected Goals:\", selectedGoals);\r\n\r\n  this.workingHours = selectedGoals.map((goal) => {\r\n    const hours = this.calculate(goal.signIn, goal.signOut);\r\n    console.log(`Working Hours for ${goal.date}:`, hours);\r\n    \r\n    return {\r\n      date: goal.presentDate,\r\n      hours: hours,\r\n    };\r\n  });\r\n}\r\n\r\n,\r\ncalculate(signIn, signOut) {\r\n  if (signIn && signOut) {\r\n    const signInTime = new Date(`2000-01-01 ${signIn}`);\r\n    const signOutTime = new Date(`2000-01-01 ${signOut}`);\r\n\r\n    // Check if Date objects are valid\r\n    if (isNaN(signInTime.getTime()) || isNaN(signOutTime.getTime())) {\r\n      return \"Invalid date format\";\r\n    }\r\n\r\n    const timeDiff = signOutTime - signInTime;\r\n    console.log(\"Time Difference (ms):\", timeDiff);\r\n\r\n    const hours = Math.floor(timeDiff / (1000 * 60 * 60));\r\n    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\r\n    console.log(\"Hours:\", hours);\r\n    console.log(\"Minutes:\", minutes);\r\n\r\n    return `${hours} hrs ${minutes} mins`;\r\n  } else {\r\n    return \"0 hrs 0 mins\";\r\n  }\r\n}\r\n\r\n,\r\n  },\r\n};\r\n</script> \r\n\r\n\r\n"],"mappings":"AAwCA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAE;MAChBC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW;IACxC;EACF,CAAC;EACDC,KAAK,EAAE;IACLJ,QAAQ,EAAE;MACRK,OAAOA,CAACC,QAAQ,EAAE;QAChB,IAAI,CAACR,KAAI,GAAI,CAACQ,QAAQ,CAAC;MACzB,CAAC;MACDC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACPC,MAAMA,CAACC,IAAI,EAAE;MACX,MAAMC,WAAU,GAAI,IAAIC,IAAI,CAAC,CAAC;MAC9BF,IAAI,CAACG,OAAM,GAAIF,WAAW,CAACG,kBAAkB,CAAC,CAAC;MAC/C,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,gBAAgB,EAAEL,IAAI,CAAC;MAC5C,IAAI,CAACZ,KAAI,GAAI,CAAC,GAAG,IAAI,CAACA,KAAK,CAAC;IAC9B,CAAC;IACDkB,UAAUA,CAACC,IAAI,EAAE;MACnB,MAAMC,aAAY,GAAI,IAAI,CAACpB,KAAK,CAACqB,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACH,IAAG,KAAMA,IAAI,CAAC;MACrEI,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEJ,aAAa,CAAC;MAE7C,IAAI,CAACrB,YAAW,GAAIqB,aAAa,CAACK,GAAG,CAAEH,IAAI,IAAK;QAC9C,MAAMI,KAAI,GAAI,IAAI,CAACC,SAAS,CAACL,IAAI,CAACM,MAAM,EAAEN,IAAI,CAACP,OAAO,CAAC;QACvDQ,OAAO,CAACC,GAAG,CAAE,qBAAoBF,IAAI,CAACH,IAAK,GAAE,EAAEO,KAAK,CAAC;QAErD,OAAO;UACLP,IAAI,EAAEG,IAAI,CAACO,WAAW;UACtBH,KAAK,EAAEA;QACT,CAAC;MACH,CAAC,CAAC;IACJ;IAGAC,SAASA,CAACC,MAAM,EAAEb,OAAO,EAAE;MACzB,IAAIa,MAAK,IAAKb,OAAO,EAAE;QACrB,MAAMe,UAAS,GAAI,IAAIhB,IAAI,CAAE,cAAac,MAAO,EAAC,CAAC;QACnD,MAAMG,WAAU,GAAI,IAAIjB,IAAI,CAAE,cAAaC,OAAQ,EAAC,CAAC;;QAErD;QACA,IAAIiB,KAAK,CAACF,UAAU,CAACG,OAAO,CAAC,CAAC,KAAKD,KAAK,CAACD,WAAW,CAACE,OAAO,CAAC,CAAC,CAAC,EAAE;UAC/D,OAAO,qBAAqB;QAC9B;QAEA,MAAMC,QAAO,GAAIH,WAAU,GAAID,UAAU;QACzCP,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAAEU,QAAQ,CAAC;QAE9C,MAAMR,KAAI,GAAIS,IAAI,CAACC,KAAK,CAACF,QAAO,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;QACrD,MAAMG,OAAM,GAAIF,IAAI,CAACC,KAAK,CAAEF,QAAO,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;QACvEX,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEE,KAAK,CAAC;QAC5BH,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEa,OAAO,CAAC;QAEhC,OAAQ,GAAEX,KAAK,QAAQW,OAAO,OAAO;MACvC,OAAO;QACL,OAAO,cAAc;MACvB;IACF;EAGE;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}