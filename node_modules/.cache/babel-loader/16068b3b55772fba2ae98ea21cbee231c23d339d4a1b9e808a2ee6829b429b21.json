{"ast":null,"code":"const RenderHelper = {\n  drawMarker: function (x, y, ctx, markerType, markerSize, markerColor, markerBorderColor, markerBorderThickness) {\n    if (!ctx) return;\n    var alpha = 1;\n    ctx.fillStyle = markerColor ? markerColor : \"#000000\";\n    ctx.strokeStyle = markerBorderColor ? markerBorderColor : \"#000000\";\n    ctx.lineWidth = markerBorderThickness ? markerBorderThickness : 0;\n    if (markerType === \"circle\") {\n      ctx.moveTo(x, y);\n      ctx.beginPath();\n      //return;\n\n      ctx.arc(x, y, markerSize / 2, 0, Math.PI * 2, false);\n      if (markerColor) ctx.fill();\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n    } else if (markerType === \"square\") {\n      //ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\n      ctx.beginPath();\n      ctx.rect(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize);\n      if (markerColor) ctx.fill();\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n    } else if (markerType === \"triangle\") {\n      ctx.beginPath();\n      ctx.moveTo(x - markerSize / 2, y + markerSize / 2);\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\n      ctx.lineTo(x, y - markerSize / 2);\n      ctx.closePath();\n      if (markerColor) ctx.fill();\n      if (markerBorderThickness) {\n        if (!markerBorderColor) {\n          alpha = ctx.globalAlpha;\n          ctx.globalAlpha = .15;\n          ctx.strokeStyle = \"black\";\n          ctx.stroke();\n          ctx.globalAlpha = alpha;\n        } else ctx.stroke();\n      }\n      ctx.beginPath();\n    } else if (markerType === \"cross\") {\n      ctx.strokeStyle = markerColor;\n      markerBorderThickness = markerSize / 4;\n      ctx.lineWidth = markerBorderThickness;\n      ctx.beginPath();\n      ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\n      ctx.stroke();\n      ctx.moveTo(x + markerSize / 2, y - markerSize / 2);\n      ctx.lineTo(x - markerSize / 2, y + markerSize / 2);\n      ctx.stroke();\n    }\n  },\n  drawMarkers: function (markers) {\n    for (var i = 0; i < markers.length; i++) {\n      var marker = markers[i];\n      RenderHelper.drawMarker(marker.x, marker.y, marker.ctx, marker.type, marker.size, marker.color, marker.borderColor, marker.borderThickness);\n    }\n  }\n  //,\n  //draw1pxLine: function (x1, y1, x2, y2, color, ctx) {\n  //\tctx.beginPath();\n  //\tctx.drawRect(x1, y1, x2 - x1, y2 - y1);\n  //\tctx.stroke();\n  //}\n};\nexport default RenderHelper;","map":{"version":3,"names":["RenderHelper","drawMarker","x","y","ctx","markerType","markerSize","markerColor","markerBorderColor","markerBorderThickness","alpha","fillStyle","strokeStyle","lineWidth","moveTo","beginPath","arc","Math","PI","fill","globalAlpha","stroke","rect","lineTo","closePath","drawMarkers","markers","i","length","marker","type","size","color","borderColor","borderThickness"],"sources":["C:/Users/IMPEGNOABS010/Desktop/HRMSROUT/node_modules/canvasjs/src/helpers/render.js"],"sourcesContent":["const RenderHelper = {\r\n\r\n  drawMarker: function (x, y, ctx, markerType, markerSize, markerColor, markerBorderColor, markerBorderThickness) {\r\n\r\n    if (!ctx)\r\n      return;\r\n\r\n    var alpha = 1;\r\n\r\n    ctx.fillStyle = markerColor ? markerColor : \"#000000\";\r\n    ctx.strokeStyle = markerBorderColor ? markerBorderColor : \"#000000\";\r\n    ctx.lineWidth = markerBorderThickness ? markerBorderThickness : 0;\r\n\r\n\r\n    if (markerType === \"circle\") {\r\n\r\n      ctx.moveTo(x, y);\r\n      ctx.beginPath();\r\n      //return;\r\n\r\n      ctx.arc(x, y, markerSize / 2, 0, Math.PI * 2, false);\r\n\r\n      if (markerColor)\r\n        ctx.fill();\r\n\r\n      if (markerBorderThickness) {\r\n\r\n        if (!markerBorderColor) {\r\n          alpha = ctx.globalAlpha;\r\n          ctx.globalAlpha = .15;\r\n          ctx.strokeStyle = \"black\";\r\n          ctx.stroke();\r\n          ctx.globalAlpha = alpha;\r\n        } else\r\n          ctx.stroke();\r\n\r\n      }\r\n    }\r\n    else if (markerType === \"square\") {\r\n\r\n      //ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\r\n      ctx.beginPath();\r\n      ctx.rect(x - markerSize / 2, y - markerSize / 2, markerSize, markerSize);\r\n\r\n      if (markerColor)\r\n        ctx.fill();\r\n\r\n      if (markerBorderThickness) {\r\n\r\n        if (!markerBorderColor) {\r\n          alpha = ctx.globalAlpha;\r\n          ctx.globalAlpha = .15;\r\n          ctx.strokeStyle = \"black\";\r\n          ctx.stroke();\r\n          ctx.globalAlpha = alpha;\r\n        } else\r\n          ctx.stroke();\r\n\r\n      }\r\n    } else if (markerType === \"triangle\") {\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(x - markerSize / 2, y + markerSize / 2);\r\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\r\n      ctx.lineTo(x, y - markerSize / 2);\r\n      ctx.closePath();\r\n\r\n      if (markerColor)\r\n        ctx.fill();\r\n\r\n      if (markerBorderThickness) {\r\n\r\n        if (!markerBorderColor) {\r\n          alpha = ctx.globalAlpha;\r\n          ctx.globalAlpha = .15;\r\n          ctx.strokeStyle = \"black\";\r\n          ctx.stroke();\r\n          ctx.globalAlpha = alpha;\r\n        } else\r\n          ctx.stroke();\r\n\r\n      }\r\n      ctx.beginPath();\r\n    } else if (markerType === \"cross\") {\r\n\r\n      ctx.strokeStyle = markerColor;\r\n      markerBorderThickness = markerSize / 4;\r\n      ctx.lineWidth = markerBorderThickness;\r\n\r\n      ctx.beginPath();\r\n      ctx.moveTo(x - markerSize / 2, y - markerSize / 2);\r\n      ctx.lineTo(x + markerSize / 2, y + markerSize / 2);\r\n      ctx.stroke();\r\n\r\n      ctx.moveTo(x + markerSize / 2, y - markerSize / 2);\r\n      ctx.lineTo(x - markerSize / 2, y + markerSize / 2);\r\n      ctx.stroke();\r\n\r\n    }\r\n\r\n\r\n  },\r\n  drawMarkers: function (markers) {\r\n    for (var i = 0; i < markers.length; i++) {\r\n      var marker = markers[i];\r\n\r\n      RenderHelper.drawMarker(marker.x, marker.y, marker.ctx, marker.type, marker.size, marker.color, marker.borderColor, marker.borderThickness);\r\n    }\r\n  }\r\n  //,\r\n  //draw1pxLine: function (x1, y1, x2, y2, color, ctx) {\r\n  //\tctx.beginPath();\r\n  //\tctx.drawRect(x1, y1, x2 - x1, y2 - y1);\r\n  //\tctx.stroke();\r\n  //}\r\n}\r\n\r\nexport default RenderHelper;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}