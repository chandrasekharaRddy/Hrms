{"ast":null,"code":"export default {\n  data() {\n    return {\n      workingHours: [],\n      goals: [],\n      selectedDateGoals: []\n    };\n  },\n  computed: {\n    userData() {\n      return this.$store.getters.getUserData;\n    }\n  },\n  watch: {\n    userData: {\n      handler(newValue) {\n        if (Array.isArray(newValue.details)) {\n          this.workingHours = newValue.details.map(detail => ({\n            Date: detail.Date,\n            WorkingHours: this.calculateWorkingHours(detail.InTime1, detail.OutTime2)\n          }));\n          this.goals = newValue.details.map(detail => ({\n            employeeName: newValue.employeeName,\n            Date: detail.Date,\n            InTime1: detail.InTime1,\n            OutTime1: detail.OutTime1,\n            InTime2: detail.InTime2,\n            OutTime2: detail.OutTime2\n          }));\n        } else {\n          this.workingHours = [];\n          this.goals = [];\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    calculateWorkingHours(inTime1, outTime2) {\n      const parseTime = timeString => {\n        const [time, period] = timeString.split(' ');\n        const [hours, minutes] = time.split(':');\n        let parsedHours = parseInt(hours, 10);\n        if (period === 'PM' && parsedHours !== 12) {\n          parsedHours += 12;\n        } else if (period === 'AM' && parsedHours === 12) {\n          parsedHours = 0;\n        }\n        return new Date(2000, 0, 1, parsedHours, parseInt(minutes, 10));\n      };\n      const startTime = parseTime(inTime1);\n      const endTime = parseTime(outTime2);\n      if (isNaN(startTime) || isNaN(endTime)) {\n        return 'Invalid date';\n      }\n      const diff = endTime - startTime;\n      const totalHours = Math.floor(diff / (1000 * 60 * 60));\n      const totalMinutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n      return `${totalHours} hours ${totalMinutes} minutes`;\n    },\n    showGoals(selectedDate) {\n      this.selectedDateGoals = this.goals.filter(goal => goal.Date === selectedDate);\n    }\n  }\n};","map":{"version":3,"names":["data","workingHours","goals","selectedDateGoals","computed","userData","$store","getters","getUserData","watch","handler","newValue","Array","isArray","details","map","detail","Date","WorkingHours","calculateWorkingHours","InTime1","OutTime2","employeeName","OutTime1","InTime2","immediate","methods","inTime1","outTime2","parseTime","timeString","time","period","split","hours","minutes","parsedHours","parseInt","startTime","endTime","isNaN","diff","totalHours","Math","floor","totalMinutes","showGoals","selectedDate","filter","goal"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\hrmsAttendenceLevel.vue"],"sourcesContent":["<!-- <template>\r\n  <div>\r\n    <table class=\"table table-bordered\" >\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(hour, index) in workingHours\" :key=\"index\">\r\n          <td @click=\"getDate(hour.Date)\">{{ hour.Date }}</td>\r\n          <td>{{ hour.WorkingHours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <div>\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>InTime1</th>\r\n          <th>OutTime1</th>\r\n          <th>InTime2</th>\r\n          <th>OutTime2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(goal, index) in selectedDateGoals\" :key=\"index\">\r\n          <td>{{ goal.name }}</td>\r\n          <td>{{ goal.Date }}</td>\r\n          <td>{{ goal.Intime1 }}</td>\r\n          <td>{{ goal.Outtime1 }}</td>\r\n          <td>{{ goal.Intime2 }}</td>\r\n          <td>{{ goal.Outtime2 }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      username:[],\r\n      Password:[],\r\n      selectedDateGoals: [],\r\n      workingHours:[],\r\n     \r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData;\r\n    },\r\n  },\r\n  created() {\r\n    axios.get(\"http://localhost:5296/api/Todoapp/GetNotes\")\r\n      .then(response => {\r\n        this.selectedDateGoals = response.data;\r\n        this.calculateWorkingHours();\r\n     \r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  },\r\n  methods: {\r\n    calculateWorkingHours(){\r\n     \r\n    this.workingHours=this.selectedDateGoals.map(goal =>{\r\n     \r\n    const inTime1 = parseFloat(goal.Intime1.replace(\":\", \".\"));\r\n    const outTime1 = parseFloat(goal.Outtime1.replace(\":\", \".\"));\r\n    const inTime2 = parseFloat(goal.Intime2.replace(\":\", \".\"));\r\n    const outTime2 = parseFloat(goal.Outtime2.replace(\":\", \".\"));\r\n    const totalHours = (outTime1 - inTime1) + (outTime2 - inTime2);\r\n    //console.log(\"ðŸš€ ~ calculateWorkingHours ~ totalHours :\", totalHours )\r\n   \r\n    return {\r\n      Date: goal.Date,\r\n      WorkingHours: totalHours.toFixed(1) \r\n    };\r\n\r\n    })\r\n    },\r\n    getDate(date){\r\n      this.selectedDateGoals = this.selectedDateGoals.filter((goal) => goal.Date === date);\r\n    }\r\n  }\r\n};\r\n\r\n</script> -->\r\n<template>\r\n  <div>\r\n    <table class=\"table table-bordered\" >\r\n      <!-- Working Hours Table -->\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(hours, index) in workingHours\" :key=\"index\" @click=\"showGoals(hours.Date)\">\r\n          <td>{{ hours.Date }}</td>\r\n          <td>{{ hours.WorkingHours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n</div>\r\n<div>\r\n  <h1>Hi</h1>\r\n    <!-- Goals Table -->\r\n    <table  class=\"table table-bordered\" >\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>InTime1</th>\r\n          <th>OutTime1</th>\r\n          <th>InTime2</th>\r\n          <th>OutTime2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(goal, index) in selectedDateGoals\" :key=\"index\">\r\n          <td>{{ goal.employeeName }}</td>\r\n          <td>{{ goal.Date }}</td>\r\n          <td>{{ goal.InTime1 }}</td>\r\n          <td>{{ goal.OutTime1 }}</td>\r\n          <td>{{ goal.InTime2 }}</td>\r\n          <td>{{ goal.OutTime2 }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      workingHours: [],\r\n      goals: [],\r\n      selectedDateGoals: [],\r\n      \r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData;\r\n    },\r\n  },\r\n  watch: {\r\n    userData: {\r\n      handler(newValue) {\r\n        if (Array.isArray(newValue.details)) {\r\n          this.workingHours = newValue.details.map((detail) => ({\r\n            Date: detail.Date,\r\n            WorkingHours: this.calculateWorkingHours(detail.InTime1, detail.OutTime2),\r\n          }));\r\n\r\n          this.goals = newValue.details.map((detail) => ({\r\n            employeeName: newValue.employeeName,\r\n            Date: detail.Date,\r\n            InTime1: detail.InTime1,\r\n            OutTime1: detail.OutTime1,\r\n            InTime2: detail.InTime2,\r\n            OutTime2: detail.OutTime2,\r\n          }));\r\n        } else {\r\n          this.workingHours = [];\r\n          this.goals = [];\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  methods: {\r\n    calculateWorkingHours(inTime1, outTime2) {\r\n  const parseTime = (timeString) => {\r\n    const [time, period] = timeString.split(' ');\r\n    const [hours, minutes] = time.split(':');\r\n    let parsedHours = parseInt(hours, 10);\r\n\r\n    if (period === 'PM' && parsedHours !== 12) {\r\n      parsedHours += 12;\r\n    } else if (period === 'AM' && parsedHours === 12) {\r\n      parsedHours = 0;\r\n    }\r\n\r\n    return new Date(2000, 0, 1, parsedHours, parseInt(minutes, 10));\r\n  };\r\n\r\n  const startTime = parseTime(inTime1);\r\n  const endTime = parseTime(outTime2);\r\n\r\n  if (isNaN(startTime) || isNaN(endTime)) {\r\n    return 'Invalid date';\r\n  }\r\n\r\n  const diff = endTime - startTime;\r\n  const totalHours = Math.floor(diff / (1000 * 60 * 60));\r\n  const totalMinutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n  return `${totalHours} hours ${totalMinutes} minutes`;\r\n},\r\n\r\n    showGoals(selectedDate) {\r\n      this.selectedDateGoals = this.goals.filter((goal) => goal.Date === selectedDate);\r\n    \r\n    },\r\n  },\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}