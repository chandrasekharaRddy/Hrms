{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", {\n  class: \"container-fluid border w-100 p-2 mainHeading\"\n}, \"HRMS - Human Resource Management System\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  class: \"container-fluid mainContainer\"\n};\nconst _hoisted_3 = {\n  class: \"row flex-nowrap\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"bg-dark col-auto col-md-2 col-lg-2 min-vh-100 d-flex flex-column justify-content\\\"><div class=\\\"bg-dark p-2\\\"><ul class=\\\"nav nav-pills flex-column mainnav mt-5 gap-3\\\"><li class=\\\"nav-item py-2 py-sm-0\\\"><a href=\\\"#\\\" class=\\\"nav-link text-white\\\"><i class=\\\"fa-solid fa-house\\\"></i><span class=\\\"fs-4 d-none d-sm-inline\\\"> Dashboard</span></a></li><li class=\\\"nav-item py-2 py-sm-0\\\"><a href=\\\"#\\\" class=\\\"nav-link text-white\\\"><i class=\\\"fa-solid fa-calendar-days\\\"></i><span class=\\\"fs-4 d-none d-sm-inline\\\"> Attendance</span></a></li><li class=\\\"nav-item py-2 py-sm-0\\\"><a href=\\\"#\\\" class=\\\"nav-link text-white\\\"><i class=\\\"fa-solid fa-users\\\"></i><span class=\\\"fs-4 d-none d-sm-inline\\\"> Team Members</span></a></li></ul></div></div>\", 1);\nconst _hoisted_5 = {\n  class: \"col p-4 content-area\"\n};\nconst _hoisted_6 = {\n  class: \"container-fluid\"\n};\nconst _hoisted_7 = {\n  class: \"row\"\n};\nconst _hoisted_8 = {\n  class: \"container\"\n};\nconst _hoisted_9 = {\n  class: \"d-flex flex-wrap\"\n};\nconst _hoisted_10 = {\n  class: \"card text-center\"\n};\nconst _hoisted_11 = {\n  class: \"card-header\"\n};\nconst _hoisted_12 = {\n  class: \"d-flex justify-content-center\"\n};\nconst _hoisted_13 = {\n  class: \"col-sm\"\n};\nconst _hoisted_14 = /*#__PURE__*/_createElementVNode(\"i\", {\n  class: \"fa-solid fa-circle-user\"\n}, null, -1 /* HOISTED */);\nconst _hoisted_15 = /*#__PURE__*/_createElementVNode(\"h6\", {\n  class: \"attendHeading\"\n}, \"Avg Check-in\", -1 /* HOISTED */);\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, [_createElementVNode(\"div\", _hoisted_9, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.filteredEmployeeList, (employee, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      class: \"col-md-3 mb-3\",\n      key: index\n    }, [_createElementVNode(\"div\", _hoisted_10, [_createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, [_createElementVNode(\"div\", _hoisted_13, [_hoisted_14, _hoisted_15, _createElementVNode(\"h6\", null, _toDisplayString(this.summaryavgcheckIn), 1 /* TEXT */)])])])])]);\n  }), 128 /* KEYED_FRAGMENT */))])])])])])])])]);\n}","map":{"version":3,"names":["_createElementVNode","class","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_Fragment","_renderList","$options","filteredEmployeeList","employee","index","key","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_toDisplayString","summaryavgcheckIn"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\teamMembers.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"container-fluid border w-100 p-2 mainHeading\">HRMS - Human Resource Management System</div>\r\n    <div class=\"container-fluid mainContainer\">\r\n      <div class=\"row flex-nowrap\">\r\n        <div class=\"bg-dark col-auto col-md-2 col-lg-2 min-vh-100 d-flex flex-column justify-content\">\r\n          <div class=\"bg-dark p-2\">\r\n            <ul class=\"nav nav-pills flex-column mainnav mt-5 gap-3\">\r\n              <li class=\"nav-item py-2 py-sm-0\">\r\n                <a href=\"#\" class=\"nav-link text-white\">\r\n                  <i class=\"fa-solid fa-house\"></i><span class=\"fs-4 d-none d-sm-inline\"> Dashboard</span>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item py-2 py-sm-0\">\r\n                <a href=\"#\" class=\"nav-link text-white\">\r\n                  <i class=\"fa-solid fa-calendar-days\"></i><span class=\"fs-4 d-none d-sm-inline\"> Attendance</span>\r\n                </a>\r\n              </li>\r\n              <li class=\"nav-item py-2 py-sm-0\">\r\n                <a href=\"#\" class=\"nav-link text-white\">\r\n                  <i class=\"fa-solid fa-users\"></i><span class=\"fs-4 d-none d-sm-inline\"> Team Members</span>\r\n                </a>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        <div class=\"col p-4 content-area\">\r\n          <div class=\"container-fluid\">\r\n            <div class=\"row\">\r\n              <div class=\"container\">\r\n  <div class=\"d-flex flex-wrap\">\r\n    <div class=\"col-md-3 mb-3\" v-for=\"(employee, index) in filteredEmployeeList\" :key=\"index\">\r\n      <div class=\"card text-center\">\r\n    <div class=\"card-header \">\r\n      <div class=\"d-flex justify-content-center\">\r\n        <div class=\"col-sm\">\r\n          <i class=\"fa-solid fa-circle-user\"></i>\r\n          <h6 class=\"attendHeading\">Avg Check-in</h6>\r\n          <h6>{{ this.summaryavgcheckIn }}</h6>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { Chart, registerables } from 'chart.js/auto';\r\nChart.register(...registerables);\r\nimport axios from 'axios'\r\nexport default {\r\n  name: 'BarGraph',\r\n  data() {\r\n    return {\r\n      selectedEmployee: null,\r\n      employeeTable: true,\r\n      workingHours: false,\r\n      hours: true,\r\n      currentPage: 1,\r\n      rowsPerPage: 5,\r\n      Search: \"\",\r\n      punchValues: {\r\n        Intime1: null,\r\n        Intime2: null,\r\n        Outtime1: null,\r\n        Outtime2: null,\r\n        Intime3: [],\r\n        Outtime3: []\r\n      },\r\n      showDetails:false,\r\n      teamMembers:true,\r\n      leaveData:[],\r\n\r\n     \r\n      chart1: null, \r\n      chartData1: {\r\n        labels: ['Vamsi', 'Ramesh', 'siva', 'Sriraag', 'Sandeep', 'Hemanth','Nithish'],\r\n        datasets: [\r\n          {\r\n          label: 'January',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'Febuaury',\r\n          data: [0,0,0,0,0,0]\r\n        },\r\n        {\r\n          label: 'March',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'April',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'May',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'June',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n      ]\r\n      },\r\n      chartOptions1: {\r\n         responsive: true,\r\n          maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n            \r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      },\r\n      chart2: null, \r\n      chartData2: {\r\n        labels: ['Vamsi', 'Ramesh', 'siva', 'Sriraag', 'Sandeep', 'Hemanth','Nithish'],\r\n        datasets: [\r\n          {\r\n          label: 'ActualHours',\r\n          data: [9,9,9,9,9,9],\r\n        },\r\n        {\r\n          label: 'WorkedHours',\r\n          data: [0,0,0,0,0,0]\r\n        },\r\n        \r\n      ]\r\n      },\r\n      chartOptions2: {\r\n         responsive: true,\r\n          maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n          },\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      },\r\n      chart: null,\r\n      chartData3: {\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n        datasets: [\r\n          { label: 'earlyEntry', data: [0, 0, 0, 0, 0, 0] },\r\n          { label: 'ontime', data: [0, 0, 0, 0, 0, 0] },\r\n          { label: 'late', data: [0, 0, 0, 0, 0, 0] },\r\n          { label: 'earlyleave', data: [0, 0, 0, 0, 0, 0] },\r\n          { label: 'overtime', data: [0, 0, 0, 0, 0, 0] },\r\n        ]\r\n      },\r\n      chartOptions3: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      }\r\n    };\r\n  },\r\n  \r\n  created(){\r\n    this.UpdatedTeamGraph();\r\n  },\r\n  mounted(){\r\n    this.getChart1();\r\n    \r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.state.userData && this.$store.state.userData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n        const userId = this.userDetails ? this.userDetails.userId : null;\r\n        if (userId) {\r\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\r\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n            const key = employee.empId;\r\n            if (!acc[key]) {\r\n              acc[key] = {\r\n                empId: employee.empId,\r\n                empName: employee.empName,\r\n                empRole: employee.empRole,\r\n                empdate:employee.date,\r\n                attendances: []\r\n              };\r\n            }\r\n            acc[key].attendances.push(employee);\r\n            return acc;\r\n          }, {});\r\n          const uniqueEmployees = Object.values(groupedEmployees);\r\n          return uniqueEmployees;\r\n      }\r\n      }\r\n      return [];\r\n    },\r\n    filteredEmployeeList() {\r\n      return this.employeeList.filter(employee =>\r\n        employee.empName.toLowerCase(),\r\n      );\r\n    },\r\n    filteredWorkingHoursData() {\r\n  if (this.selectedEmployee) {\r\n    const attendanceDates = {};\r\n    this.selectedEmployee.attendances.forEach(attendance => {\r\n      if (!attendanceDates[attendance.date]) {\r\n        attendanceDates[attendance.date] = {\r\n          date: attendance.date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0\r\n        };\r\n      }\r\n      attendanceDates[attendance.date].Intime.push(attendance.inTime);\r\n      if (attendance.outTime) {\r\n        const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n        const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[attendance.date].totalDifference += diff;\r\n        attendanceDates[attendance.date].Outtime.push(attendance.outTime);\r\n      } \r\n    });\r\n    const filteredData = Object.values(attendanceDates).map(dateInfo => {\r\n      const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n      const minutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n      return {\r\n        date: dateInfo.date,\r\n        Intime: dateInfo.Intime,\r\n        Outtime: dateInfo.Outtime,\r\n        totalHours: hours,\r\n        totalMinutes: minutes\r\n      };\r\n    }).filter(record => record.date.includes(this.Search));\r\n    return filteredData;\r\n  } else {\r\n    return [];\r\n  }\r\n},\r\n    getteam() {\r\n      return this.$store.getters.getTeamMembers;\r\n    },\r\n    chartData5() {\r\n      return {\r\n        labels: ['Today', 'Week', 'Month', 'Overtime'],\r\n        datasets: [{\r\n          data: [\r\n        { value: 0, max: 9 },\r\n        { value: 0, max: 45 },\r\n        { value: 0, max: 180 }\r\n      ],\r\n          backgroundColor: [\r\n            'rgba(255, 26, 104, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 192, 192, 0.2)',\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 26, 104, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)',\r\n          ],\r\n          borderWidth: 1,\r\n          borderSkipped: false,\r\n          borderRadius: 5,\r\n          barPercentage: 0.2,\r\n          categoryPercentage: 0.5,\r\n        }]\r\n      };\r\n    },\r\n    chartOptions5() {\r\n      return {\r\n        indexAxis: 'y',\r\n        plugins: {\r\n          legend: { display: false }\r\n        },\r\n        scales: {\r\n          x: { grid: { display: false }, ticks: { display: false } },\r\n          y: { beginAtZero: true, grid: { display: false }, ticks: { display: false } }\r\n        }\r\n      };\r\n    },\r\n    progressBarPlugin5() {\r\n  return {\r\n    beforeDatasetDraw(chart) {\r\n      const { ctx, chartArea: { left, right, width, height }, scales: { y } } = chart;\r\n      ctx.save();\r\n\r\n      const dataset = chart.data.datasets[0];\r\n      const barHeight = height / y.ticks.length * dataset.barPercentage * dataset.categoryPercentage;\r\n\r\n      dataset.data.forEach((data, index) => {\r\n        const yPosition = y.getPixelForValue(index) - barHeight / 2;\r\n\r\n        ctx.font = '15px sans-serif';\r\n        ctx.fillStyle = 'rgba(102, 102, 102, 1)';\r\n        ctx.textAlign = 'left';\r\n        ctx.textBaseline = 'middle';\r\n        ctx.fillText(chart.data.labels[index], left, yPosition - 10);\r\n\r\n        const dataText = `${data.value}/${data.max} Hrs`;\r\n        ctx.font = 'bold 15px sans-serif';\r\n        ctx.textAlign = 'right';\r\n        ctx.fillText(dataText, right, yPosition - 10);\r\n\r\n      \r\n        const barWidth = width * (data.value / data.max);\r\n        ctx.fillStyle = dataset.borderColor[index];\r\n        ctx.fillRect(left, yPosition, barWidth, barHeight);\r\n      });\r\n\r\n      ctx.restore();\r\n    }\r\n  };\r\n}\r\n  \r\n  },\r\n  methods: {\r\n    goback(){\r\n      console.log('bkjh')\r\nthis.showDetails=false\r\nthis.teamMembers=true\r\nwindow.location.reload();\r\n    },\r\n    \r\n    showEmployeeDetails(employee) {\r\n      this.selectedEmployee = employee;\r\n      this.workingHours = true;\r\n      this.employeeTable = false;\r\n      this.showDetails = true;\r\n      this.teamMembers = false;\r\n      this.updateEntry();\r\n      this.getLeaveTable();\r\n      this.filterTeamAttendance();\r\n      this.avgTeamCheckIn();\r\n      this.avgTeamCheckOut();\r\n      this.teamAvgHours();\r\n      this.TeamOnTime();\r\n      this.WeekHours();\r\n      this. averageHours();\r\n      this.MonthHours();\r\n      this.$nextTick(() => {\r\n        this.initChart1();\r\n      });\r\n      this.$nextTick(() => {\r\n        this.initChart();\r\n      });\r\n      \r\n    },\r\n   \r\n    updateEntry() {\r\n      if (this.selectedEmployee) {\r\n        const attendanceDates = {};\r\n        this.selectedEmployee.attendances.forEach(attendance => {\r\n          if (!attendanceDates[attendance.date]) {\r\n            attendanceDates[attendance.date] = {\r\n              date: attendance.date,\r\n              Intime: [],\r\n              Outtime: [],\r\n              totalDifference: 0\r\n            };\r\n          }\r\n          attendanceDates[attendance.date].Intime.push(attendance.inTime);\r\n          if (attendance.outTime) {\r\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n            const diff = Math.abs(outtimeDate - intimeDate);\r\n            attendanceDates[attendance.date].totalDifference += diff;\r\n            attendanceDates[attendance.date].Outtime.push(attendance.outTime);\r\n          }\r\n        });\r\n\r\n      \r\n        const processMonthData = (month) => {\r\n          const earlyEntry = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n            if (new Date(dateInfo.date).getMonth() === month) {\r\n              return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\r\n            }\r\n            return count;\r\n          }, 0);\r\n\r\n          const onTime = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n            if (new Date(dateInfo.date).getMonth() === month) {\r\n              return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n            }\r\n            return count;\r\n          }, 0);\r\n\r\n          const lateEntry = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n            if (new Date(dateInfo.date).getMonth() === month) {\r\n              return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n            }\r\n            return count;\r\n          }, 0);\r\n\r\n          const overTime = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n            if (new Date(dateInfo.date).getMonth() === month) {\r\n              return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n            }\r\n            return count;\r\n          }, 0);\r\n\r\n          const earlyLeave = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n            if (new Date(dateInfo.date).getMonth() === month) {\r\n              return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n            }\r\n            return count;\r\n          }, 0);\r\n\r\n          return { earlyEntry, onTime, lateEntry, overTime, earlyLeave };\r\n        };\r\n\r\n        const marchData = processMonthData(2); \r\n        const aprilData = processMonthData(3); \r\n\r\n        \r\n        this.chartData3.datasets[0].data[2] = marchData.earlyEntry;\r\n        this.chartData3.datasets[1].data[2] = marchData.onTime;\r\n        this.chartData3.datasets[2].data[2] = marchData.lateEntry;\r\n        this.chartData3.datasets[3].data[2] = marchData.earlyLeave;\r\n        this.chartData3.datasets[4].data[2] = marchData.overTime;\r\n\r\n       \r\n        this.chartData3.datasets[0].data[3] = aprilData.earlyEntry;\r\n        this.chartData3.datasets[1].data[3] = aprilData.onTime;\r\n        this.chartData3.datasets[2].data[3] = aprilData.lateEntry;\r\n        this.chartData3.datasets[3].data[3] = aprilData.earlyLeave;\r\n        this.chartData3.datasets[4].data[3] = aprilData.overTime;\r\n        if (this.chart) {\r\n          this.chart.update();\r\n        }\r\n      }\r\n    },\r\n    initChart() {\r\n      let canvas = this.$refs.myChart3;\r\n      if (canvas) {\r\n        const ctx = canvas.getContext('2d');\r\n        if (this.chart) {\r\n          this.chart.destroy();\r\n        }\r\n        this.chart = new Chart(ctx, {\r\n          type: 'bar',\r\n          data: this.chartData3,\r\n          options: this.chartOptions3\r\n        });\r\n      } else {\r\n        console.error(\"Canvas element not found.\");\r\n      }\r\n    },\r\n      filterTeamAttendance(){\r\n      if (this.filteredWorkingHoursData.length > 0) {\r\n        const record =  this.filteredWorkingHoursData[0];\r\n        this.punchValues.Intime1 = record.Intime[0];\r\n        this.punchValues.Intime2 = record.Intime[1];\r\n        this.punchValues.Outtime1 = record.Outtime[0];\r\n        this.punchValues.Outtime2 = record.Outtime[1];\r\n        this.punchValues.Intime3 = record.Intime[2] || [];\r\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n \r\n      }\r\n    },\r\n    getPunchDetails(record) {\r\n      this.punchValues.Intime1 = record.Intime[0];\r\n      this.punchValues.Intime2 = record.Intime[1];\r\n      this.punchValues.Outtime1 = record.Outtime[0];\r\n      this.punchValues.Outtime2 = record.Outtime[1];\r\n      this.punchValues.Intime3 = record.Intime[2] || [];\r\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n    },\r\n    getLeaveTable() {\r\n  const empId = this.selectedEmployee.empId;\r\n  axios.get('https://localhost:7188/api/User/getleave')\r\n    .then(response => {\r\n      this.leaveData = response.data.filter(leave => leave.emp_id === empId);\r\n      console.log(\"🚀 ~ getLeaveTable ~   this.leaveData :\",   this.leaveData )\r\n    })\r\n    .catch(error => {\r\n      console.error('Error fetching leave data:', error);\r\n    });\r\n},\r\n async updateStatus(index) {\r\n  try {\r\n    const leaveId = this.leaveData[index].leave_id; \r\n    const status = 'Approved'; \r\n    const response = await axios.put('https://localhost:7188/api/User/updateleave', { leave_id: leaveId, status: status });\r\n    console.log(response.data);\r\n    this.leaveData[index].status = status;\r\n  } catch (error) {\r\n    console.error('Error updating leave status:', error);\r\n  }\r\n},\r\nasync DenyLeave(index) {\r\n  try {\r\n    const leaveId = this.leaveData[index].leave_id; \r\n    const status = 'Deny'; \r\n    const response = await axios.put('https://localhost:7188/api/User/updateleave', { leave_id: leaveId, status: status });\r\n    console.log(response.data);\r\n    this.leaveData[index].status = status;\r\n  } catch (error) {\r\n    console.error('Error updating leave status:', error);\r\n  }\r\n},\r\ngetChart1() {\r\n      const ctx = this.$refs.myChart1.getContext('2d');\r\n      this.chart1 = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData1,\r\n        options: this.chartOptions1\r\n      });\r\n      this.getChart2();\r\n    },\r\n    getChart2() {\r\n      const ctx = this.$refs.myChart2.getContext('2d');\r\n      this.chart2 = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData2,\r\n        options: this.chartOptions2\r\n      });\r\n    },\r\n    initChart1() {\r\n      const ctx = this.$refs.myChart.getContext('2d');\r\n      this.chart2 = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData5,\r\n        options: this.chartOptions5,\r\n        plugins: [this.progressBarPlugin5]\r\n      });\r\n    },\r\n    UpdatedTeamGraph() {\r\n  this.filterWorkteam();\r\n  if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n    const userId = this.userDetails ? this.userDetails.userId : null;\r\n    if (userId) {\r\n      const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\r\n\r\n      const updateDataset = (empId, monthIndex, dataIndex) => {\r\n        const filteredEmployee = filteredEmployees.filter(employee => employee.empId === empId);\r\n        const presentDays = filteredEmployee.reduce((count, employee) => {\r\n          const date = new Date(employee.date);\r\n          const month = date.getMonth();\r\n          if (month === monthIndex) { \r\n            return count + 1/2; \r\n          }\r\n          return count;\r\n        }, 0);\r\n        this.chartData1.datasets[dataIndex].data[empId - 3] = presentDays;\r\n      };\r\n\r\n      [3, 4, 5, 6, 7, 8, 9].forEach(empId => {\r\n        updateDataset(empId, 2, 2); \r\n        updateDataset(empId, 3, 3); \r\n      });\r\n    }\r\n  }\r\n  return [];\r\n},\r\nfilterWorkteam() {\r\n  if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n    const userId = this.userDetails ? this.userDetails.userId : null;\r\n    if (userId) {\r\n      const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId !== userId);\r\n      const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n        const key = employee.empId;\r\n        if (!acc[key]) {\r\n          acc[key] = {\r\n            empId: employee.empId,\r\n            empName: employee.empName,\r\n            empRole: employee.empRole,\r\n            empDate: employee.date,\r\n            attendances: []\r\n          };\r\n        }\r\n        acc[key].attendances.push(employee);\r\n        return acc;\r\n      }, {});\r\n\r\n      const uniqueEmployees = Object.values(groupedEmployees);\r\n\r\n      const filteredData = uniqueEmployees.map(employee => {\r\n        const lastAttendance = employee.attendances[employee.attendances.length - 1];\r\n        if (!lastAttendance) {\r\n          console.log(`No attendance found for employee with empId ${employee.empId}.`);\r\n          return null;\r\n        }\r\n        const intimeDate = new Date(`01/01/2000 ${lastAttendance.inTime}`);\r\n        const outtimeDate = lastAttendance.outTime ? new Date(`01/01/2000 ${lastAttendance.outTime}`) : new Date();\r\n        const totalDifference = Math.abs(outtimeDate - intimeDate);\r\n        const hours = Math.min(Math.floor(totalDifference / (1000 * 60 * 60)), 9); \r\n        const minutes = Math.min(Math.floor((totalDifference % (1000 * 60 * 60)) / (1000 * 60)), 9); \r\n\r\n        return {\r\n          empId: employee.empId,\r\n          lastAttendanceDate: lastAttendance.date,\r\n          totalDifference: totalDifference,\r\n          totalHours: hours,\r\n          totalMinutes: minutes\r\n        };\r\n      });\r\n      console.log(\"🚀 ~ filteredData:\", filteredData);\r\n      const chartData = this.chartData2.datasets[1].data;\r\n      chartData[0] = filteredData.find(emp => emp.empId === 3).totalHours;\r\n      chartData[1] = filteredData.find(emp => emp.empId === 4).totalHours;\r\n      chartData[2] = filteredData.find(emp => emp.empId === 5).totalHours;\r\n      chartData[3] = filteredData.find(emp => emp.empId === 6).totalHours;\r\n      chartData[4] = filteredData.find(emp => emp.empId === 7).totalHours;\r\n\r\n      this.chartData2.datasets[1].data = chartData;\r\n\r\n      return filteredData;\r\n    }\r\n  }\r\n  return [];\r\n},\r\navgTeamCheckIn() {\r\n  if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\r\n    console.log(\"Employee or attendances not found.\");\r\n    return; \r\n  }\r\n\r\n  let totalFilteredTime = 0;\r\n  let filteredEntryCount = 0;\r\n\r\n  this.selectedEmployee.attendances.forEach(attendance => {\r\n    const { inTime } = attendance;\r\n    const timeParts = inTime.split(':').map(part => parseInt(part, 10));\r\n    const hour = timeParts[0];\r\n    const minute = timeParts[1];\r\n    const second = timeParts[2];\r\n\r\n    if (hour >= 8 && hour < 10) {\r\n      totalFilteredTime += hour * 3600 * 1000 + minute * 60 * 1000 + second * 1000;\r\n      filteredEntryCount++;\r\n    }\r\n  });\r\n\r\n  const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\r\n  const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\r\n  const averageMinute = Math.floor((averageTimeMilliseconds % (1000 * 60 * 60)) / (1000 * 60));\r\n  const averageSecond = Math.floor((averageTimeMilliseconds % (1000 * 60)) / 1000);\r\n  const averageSecondPadded = String(averageSecond).padStart(2, '0');\r\n  const averageCheckIn = `${averageHour}:${averageMinute}:${averageSecondPadded}`;\r\n\r\n  console.log(\"🚀 ~ TeamaverageCheckIn :\", averageCheckIn);\r\n  this.TeamsummaryavgcheckIn = averageCheckIn;\r\n  return averageCheckIn;\r\n},\r\navgTeamCheckOut() {\r\n  if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\r\n    console.log(\"Employee or attendances not found.\");\r\n    return; \r\n  }\r\n\r\n  let totalFilteredTime = 0;\r\n  let filteredEntryCount = 0;\r\n\r\n  this.selectedEmployee.attendances.forEach(attendance => {\r\n    const { outTime } = attendance;\r\n    if (outTime) {\r\n      const timeParts = outTime.split(':').map(part => parseInt(part, 10));\r\n      const hour = timeParts[0];\r\n      const minute = timeParts[1];\r\n      const second = timeParts[2];\r\n\r\n      if (hour >= 17 && hour < 18) {\r\n        totalFilteredTime += hour * 3600 * 1000 + minute * 60 * 1000 + second * 1000;\r\n        filteredEntryCount++;\r\n      }\r\n    }\r\n  });\r\n\r\n  const averageTimeMilliseconds = filteredEntryCount ? totalFilteredTime / filteredEntryCount : 0;\r\n  const averageHour = Math.floor(averageTimeMilliseconds / (1000 * 60 * 60));\r\n  const averageMinute = Math.floor((averageTimeMilliseconds % (1000 * 60 * 60)) / (1000 * 60));\r\n  const averageSecond = Math.floor((averageTimeMilliseconds % (1000 * 60)) / 1000);\r\n  const averageSecondPadded = String(averageSecond).padStart(2, '0');\r\n  const averageCheckOut = `${averageHour}:${averageMinute}:${averageSecondPadded}`;\r\n\r\n  console.log(\"🚀 ~ averageCheckOut :\", averageCheckOut);\r\n  this.TeamsummaryavgcheckOut  = averageCheckOut;\r\n  return averageCheckOut;\r\n},\r\nteamAvgHours(){\r\n    if (this.selectedEmployee) {\r\n        const attendanceDates = {};\r\n        this.selectedEmployee.attendances.forEach(attendance => {\r\n            if (!attendanceDates[attendance.date]) {\r\n                attendanceDates[attendance.date] = {\r\n                    date: attendance.date,\r\n                    totalDifference: 0\r\n                };\r\n            }\r\n            if (attendance.outTime) {\r\n                const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n                const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n                const diff = Math.abs(outtimeDate - intimeDate);\r\n                attendanceDates[attendance.date].totalDifference += diff;\r\n            }\r\n        });\r\n\r\n        const filteredData = Object.values(attendanceDates).map(dateInfo => {\r\n            const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n            return {\r\n                date: dateInfo.date,\r\n                totalHours: hours\r\n            };\r\n        }).filter(record => record.date.includes(this.Search));\r\n\r\n        const totalAttendanceDates = filteredData.length;\r\n        const totalHours = filteredData.reduce((sum, record) => sum + record.totalHours, 0);\r\n        const averageTotalHours = totalAttendanceDates > 0 ? totalHours / totalAttendanceDates : 0;\r\n\r\n        console.log(\"Average Total Hours:\", averageTotalHours.toFixed(2)+'hrs');\r\n        this.Teamsummaryavghrs=averageTotalHours.toFixed(2)\r\n\r\n        return averageTotalHours;\r\n    } else {\r\n        return 0;\r\n    }\r\n},\r\nTeamOnTime() {\r\n  if (!this.selectedEmployee || !this.selectedEmployee.attendances) {\r\n    console.log(\"Employee or attendances not found.\");\r\n    return;\r\n  }\r\n\r\n  let onTimeCount = 0;\r\n  let totalEntriesCount = 0;\r\n\r\n  this.selectedEmployee.attendances.forEach(attendance => {\r\n    const { inTime } = attendance;\r\n    const timeParts = inTime.split(':').map(part => parseInt(part, 10));\r\n    const hour = timeParts[0];\r\n    const minute = timeParts[1];\r\n    totalEntriesCount++;\r\n\r\n    if ((hour === 9 && minute === 0) || (hour === 8 && minute >= 55 && hour < 9)) {\r\n      onTimeCount++;\r\n    }\r\n  });\r\n  const onTimePercentage = Math.round((onTimeCount / totalEntriesCount) * 100);\r\n  console.log(\"🚀 ~ onTimePercentage:\", onTimePercentage + '%');\r\n  this.TeamonTimePercentage = onTimePercentage;\r\n  return onTimePercentage;\r\n},\r\nWeekHours() {\r\n      if (this.filteredWorkingHoursData.length > 0) {\r\n        const totalHours = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / 5;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.filteredWorkingHoursData.length;\r\n         console.log(totallength);\r\n         this.chartData5.datasets[0].data[1] = { value: averageHours, max: 45 };\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n      }\r\n      return null;\r\n    },\r\n    MonthHours() {\r\n      if (this.filteredWorkingHoursData.length > 0) {\r\n        const totalHours = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.filteredWorkingHoursData.length;\r\n         console.log(totallength);\r\n         this.chartData5.datasets[0].data[2] = { value: averageHours, max: 180 };\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n      }\r\n      return null;\r\n    },\r\n    averageHours() {\r\n      if (this.filteredWorkingHoursData.length> 0) {\r\n        const totalHours = this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes =  this.filteredWorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / this.filteredWorkingHoursData.length;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength= this.filteredWorkingHoursData.length;\r\n        console.log(totallength);\r\n        this.chartData5.datasets[0].data[0] = { value: averageHours, max: 9 };\r\n        return `${averageHours} hrs ${averageMinutes} mins`;\r\n       \r\n      }\r\n      return null;\r\n    }\r\n},\r\n\r\n}\r\n\r\n      \r\n</script>\r\n\r\n\r\n<style>\r\n.mainHeading {\r\n  background-color: aqua;\r\n}\r\n\r\n.mainContainer {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n}\r\n\r\n.bg-dark {\r\n  background-color: #343a40 !important;\r\n}\r\n\r\n.nav-link {\r\n  display: flex;\r\n  align-items: center;\r\n}\r\n\r\n.nav-link i {\r\n  margin-right: 5px;\r\n}\r\n\r\n.content-area {\r\n  padding: 20px;\r\n  background-color: #f8f9fa;\r\n  flex-grow: 1;\r\n  overflow-y: auto;\r\n}\r\n.custom-icon-size {\r\n  font-size: 3em; \r\n}\r\n.card-header {\r\n  border-bottom: none; \r\n}\r\n.table {\r\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n.MainHeading {\r\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n  color: red;\r\n}\r\n.search {\r\n   padding-top: 12px;\r\n}\r\n.mainnav{\r\n  padding-top: 40px;\r\n} \r\n@media (max-width: 768px) {\r\n  .mainHeading {\r\n    text-align: center;}\r\n  }\r\n  </style>"],"mappings":";gCAEIA,mBAAA,CAAuG;EAAlGC,KAAK,EAAC;AAA8C,GAAC,yCAAuC;;EAC5FA,KAAK,EAAC;AAA+B;;EACnCA,KAAK,EAAC;AAAiB;;;EAsBrBA,KAAK,EAAC;AAAsB;;EAC1BA,KAAK,EAAC;AAAiB;;EACrBA,KAAK,EAAC;AAAK;;EACTA,KAAK,EAAC;AAAW;;EAC7BA,KAAK,EAAC;AAAkB;;EAEpBA,KAAK,EAAC;AAAkB;;EAC1BA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAA+B;;EACnCA,KAAK,EAAC;AAAQ;iCACjBD,mBAAA,CAAuC;EAApCC,KAAK,EAAC;AAAyB;iCAClCD,mBAAA,CAA2C;EAAvCC,KAAK,EAAC;AAAe,GAAC,cAAY;;uBApC9CC,mBAAA,CAmDM,cAlDJC,UAAuG,EACvGH,mBAAA,CAgDM,OAhDNI,UAgDM,GA/CJJ,mBAAA,CA8CM,OA9CNK,UA8CM,GA7CJC,UAoBM,EACNN,mBAAA,CAuBM,OAvBNO,UAuBM,GAtBJP,mBAAA,CAqBM,OArBNQ,UAqBM,GApBJR,mBAAA,CAmBM,OAnBNS,UAmBM,GAlBJT,mBAAA,CAgBR,OAhBQU,UAgBR,GAfJV,mBAAA,CAcM,OAdNW,UAcM,I,kBAbJT,mBAAA,CAYMU,SAAA,QAAAC,WAAA,CAZiDC,QAAA,CAAAC,oBAAoB,GAAxCC,QAAQ,EAAEC,KAAK;yBAAlDf,mBAAA,CAYM;MAZDD,KAAK,EAAC,eAAe;MAAoDiB,GAAG,EAAED;QACjFjB,mBAAA,CAUE,OAVFmB,WAUE,GATJnB,mBAAA,CAQM,OARNoB,WAQM,GAPJpB,mBAAA,CAMM,OANNqB,WAMM,GALJrB,mBAAA,CAIM,OAJNsB,WAIM,GAHJC,WAAuC,EACvCC,WAA2C,EAC3CxB,mBAAA,CAAqC,YAAAyB,gBAAA,MAAzBC,iBAAiB,iB"},"metadata":{},"sourceType":"module","externalDependencies":[]}