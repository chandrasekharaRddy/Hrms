{"ast":null,"code":"export default {\n  data() {\n    return {\n      selectedDate1: \"\",\n      selectedDate2: \"\",\n      workingHours: [],\n      goals: []\n    };\n  },\n  computed: {\n    userData() {\n      return this.$store.getters.getUserData;\n    }\n  },\n  watch: {\n    userData: {\n      handler(newValue) {\n        if (Array.isArray(newValue)) {\n          this.goals = newValue.filter(user => user.Date === this.selectedDate1 || user.Date === this.selectedDate2);\n          this.workingHours = this.goals.map(user => ({\n            Date: user.Date,\n            WorkingHours: this.calculateWorkingHours(user.InTime1, user.OutTime1, user.InTime2, user.OutTime2)\n          }));\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    calculateWorkingHours(inTime1, outTime1, inTime2, outTime2) {\n      const startTime = new Date(`2000-01-01T${inTime1}`);\n      const endTime = new Date(`2000-01-01T${outTime2}`);\n      const diff = endTime - startTime;\n      const hours = Math.floor(diff / (1000 * 60 * 60));\n      const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n      return `${hours} hours ${minutes} minutes`;\n    }\n  }\n};","map":{"version":3,"names":["data","selectedDate1","selectedDate2","workingHours","goals","computed","userData","$store","getters","getUserData","watch","handler","newValue","Array","isArray","filter","user","Date","map","WorkingHours","calculateWorkingHours","InTime1","OutTime1","InTime2","OutTime2","immediate","methods","inTime1","outTime1","inTime2","outTime2","startTime","endTime","diff","hours","Math","floor","minutes"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<!-- <template>\r\n  <div>\r\n   \r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"hours in workingHours\" :key=\"hours.Date\">\r\n          <td>{{ hours.Date }}</td>\r\n          <td>{{ hours.WorkingHours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>InTime1</th>\r\n          <th>OutTime1</th>\r\n          <th>InTime2</th>\r\n          <th>OutTime2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"goal in goals\" :key=\"goal.employeeName\">\r\n          <td>{{ goal.employeeName }}</td>\r\n          <td>{{ goal.Date }}</td>\r\n          <td>{{ goal.InTime1 }}</td>\r\n          <td>{{ goal.OutTime1 }}</td>\r\n          <td>{{ goal.InTime2 }}</td>\r\n          <td>{{ goal.OutTime2 }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      workingHours: [],\r\n      goals: [], // assuming this is an array of user data\r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData;\r\n    },\r\n  },\r\n  watch: {\r\n    userData: {\r\n      handler(newValue) {\r\n        if (Array.isArray(newValue)) {\r\n          // Assuming workingHours is an array of objects with Date and WorkingHours properties\r\n          this.workingHours = newValue.map((user) => ({\r\n            Date: user.Date,\r\n            WorkingHours: this.calculateWorkingHours(user.InTime1, user.OutTime1, user.InTime2, user.OutTime2),\r\n          }));\r\n          \r\n          this.goals = newValue;\r\n        } else if (newValue) {\r\n          // Handle the case when newValue is a single object\r\n          this.workingHours = [{\r\n            Date: newValue.Date,\r\n            WorkingHours: this.calculateWorkingHours(newValue.InTime1, newValue.OutTime1, newValue.InTime2, newValue.OutTime2),\r\n          }];\r\n\r\n          this.goals = [newValue];\r\n        } else {\r\n          // Handle other cases or set goals to an empty array if needed\r\n          this.workingHours = [];\r\n          this.goals = [];\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  methods: {\r\n    calculateWorkingHours(inTime1, outTime1, inTime2, outTime2) {\r\n    \r\n      const startTime = new Date(`2000-01-01T${inTime1}`);\r\n      const endTime = new Date(`2000-01-01T${outTime2}`);\r\n      const diff = endTime - startTime;\r\n\r\n      // Convert milliseconds to hours and minutes\r\n      const hours = Math.floor(diff / (1000 * 60 * 60));\r\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n      return `${hours} hours ${minutes} minutes`;\r\n    },\r\n  },\r\n};\r\n</script> -->\r\n<template>\r\n  <div>\r\n    <label for=\"date1\">Select Date 1:</label>\r\n    <input type=\"date\" id=\"date1\" v-model=\"selectedDate1\">\r\n    <label for=\"date2\">Select Date 2:</label>\r\n    <input type=\"date\" id=\"date2\" v-model=\"selectedDate2\">\r\n\r\n    <!-- Table for working hours -->\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"hours in workingHours\" :key=\"hours.Date\">\r\n          <td>{{ hours.Date }}</td>\r\n          <td>{{ hours.WorkingHours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Table for user details -->\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>InTime1</th>\r\n          <th>OutTime1</th>\r\n          <th>InTime2</th>\r\n          <th>OutTime2</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"goal in goals\" :key=\"goal.employeeName\">\r\n          <td>{{ goal.employeeName }}</td>\r\n          <td>{{ goal.Date }}</td>\r\n          <td>{{ goal.InTime1 }}</td>\r\n          <td>{{ goal.OutTime1 }}</td>\r\n          <td>{{ goal.InTime2 }}</td>\r\n          <td>{{ goal.OutTime2 }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedDate1: \"\",\r\n      selectedDate2: \"\",\r\n      workingHours: [],\r\n      goals: [],\r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.getUserData;\r\n    },\r\n  },\r\n  watch: {\r\n    userData: {\r\n      handler(newValue) {\r\n        if (Array.isArray(newValue)) {\r\n          \r\n          this.goals = newValue.filter(user => user.Date === this.selectedDate1 || user.Date === this.selectedDate2);\r\n          this.workingHours = this.goals.map((user) => ({\r\n            Date: user.Date,\r\n            WorkingHours: this.calculateWorkingHours(user.InTime1, user.OutTime1, user.InTime2, user.OutTime2),\r\n          }));\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  methods: {\r\n    calculateWorkingHours(inTime1, outTime1, inTime2, outTime2) {\r\n   \r\n      const startTime = new Date(`2000-01-01T${inTime1}`);\r\n      const endTime = new Date(`2000-01-01T${outTime2}`);\r\n      const diff = endTime - startTime;\r\n\r\n      const hours = Math.floor(diff / (1000 * 60 * 60));\r\n      const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n\r\n      return `${hours} hours ${minutes} minutes`;\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n"],"mappings":"AAuJA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,aAAa,EAAE,EAAE;MACjBC,aAAa,EAAE,EAAE;MACjBC,YAAY,EAAE,EAAE;MAChBC,KAAK,EAAE;IACT,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,QAAQA,CAAA,EAAG;MACT,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW;IACxC;EACF,CAAC;EACDC,KAAK,EAAE;IACLJ,QAAQ,EAAE;MACRK,OAAOA,CAACC,QAAQ,EAAE;QAChB,IAAIC,KAAK,CAACC,OAAO,CAACF,QAAQ,CAAC,EAAE;UAE3B,IAAI,CAACR,KAAI,GAAIQ,QAAQ,CAACG,MAAM,CAACC,IAAG,IAAKA,IAAI,CAACC,IAAG,KAAM,IAAI,CAAChB,aAAY,IAAKe,IAAI,CAACC,IAAG,KAAM,IAAI,CAACf,aAAa,CAAC;UAC1G,IAAI,CAACC,YAAW,GAAI,IAAI,CAACC,KAAK,CAACc,GAAG,CAAEF,IAAI,KAAM;YAC5CC,IAAI,EAAED,IAAI,CAACC,IAAI;YACfE,YAAY,EAAE,IAAI,CAACC,qBAAqB,CAACJ,IAAI,CAACK,OAAO,EAAEL,IAAI,CAACM,QAAQ,EAAEN,IAAI,CAACO,OAAO,EAAEP,IAAI,CAACQ,QAAQ;UACnG,CAAC,CAAC,CAAC;QACL;MACF,CAAC;MACDC,SAAS,EAAE;IACb;EACF,CAAC;EACDC,OAAO,EAAE;IACPN,qBAAqBA,CAACO,OAAO,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,EAAE;MAE1D,MAAMC,SAAQ,GAAI,IAAId,IAAI,CAAE,cAAaU,OAAQ,EAAC,CAAC;MACnD,MAAMK,OAAM,GAAI,IAAIf,IAAI,CAAE,cAAaa,QAAS,EAAC,CAAC;MAClD,MAAMG,IAAG,GAAID,OAAM,GAAID,SAAS;MAEhC,MAAMG,KAAI,GAAIC,IAAI,CAACC,KAAK,CAACH,IAAG,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;MACjD,MAAMI,OAAM,GAAIF,IAAI,CAACC,KAAK,CAAEH,IAAG,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;MAEnE,OAAQ,GAAEC,KAAK,UAAUG,OAAO,UAAU;IAC5C;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}