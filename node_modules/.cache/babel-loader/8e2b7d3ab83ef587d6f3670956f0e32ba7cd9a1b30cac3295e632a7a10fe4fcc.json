{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"barDrawing\"\n};\nconst _hoisted_2 = {\n  class: \"bargraph1\"\n};\nconst _hoisted_3 = {\n  ref: \"myChart3\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"canvas\", _hoisted_3, null, 512 /* NEED_PATCH */)])]);\n}","map":{"version":3,"names":["class","ref","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\leaveForm.vue"],"sourcesContent":["<template>\r\n  <div class=\"barDrawing\">\r\n      <div class=\"bargraph1\">\r\n      <canvas ref=\"myChart3\"></canvas>\r\n    </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { Chart, registerables } from 'chart.js/auto';\r\nChart.register(...registerables);\r\nexport default{\r\n data(){\r\n  return{\r\n\r\n  }\r\n },\r\n  methods: {\r\n    showEmployeeDetails(employee) { \r\n      this.selectedEmployee = employee;\r\n    this.updateEntry();\r\n    this.getChart3();\r\n    },\r\n    updateEntry(){\r\n      if (this.selectedEmployee) {\r\n    const attendanceDates = {};\r\n    this.selectedEmployee.attendances.forEach(attendance => {\r\n      if (!attendanceDates[attendance.date]) {\r\n        attendanceDates[attendance.date] = {\r\n          date: attendance.date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0\r\n        };\r\n      }\r\n      attendanceDates[attendance.date].Intime.push(attendance.inTime);\r\n      if (attendance.outTime) {\r\n        const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n        const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[attendance.date].totalDifference += diff;\r\n        attendanceDates[attendance.date].Outtime.push(attendance.outTime);\r\n      } \r\n    });\r\n    const earlyEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const onTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const lateEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const overTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  console.log(earlyEntry3);\r\nconsole.log(onTime3);\r\nconsole.log(lateEntry3)\r\nconsole.log(earlyLeave3)\r\nconsole.log(overTime3)\r\n  this.chartData3.datasets[0].data[2] = earlyEntry3;\r\n  this.chartData3.datasets[1].data[2] = onTime3;\r\n  this.chartData3.datasets[2].data[2] = lateEntry3;\r\n  this.chartData3.datasets[3].data[2] = earlyLeave3;\r\n  this.chartData3.datasets[4].data[2] = overTime3;\r\n\r\n  const earlyEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const onTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const lateEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const overTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconsole.log(earlyEntry4);\r\nconsole.log(onTime4);\r\nconsole.log(lateEntry4)\r\nconsole.log(earlyLeave4)\r\nconsole.log(overTime4)\r\n  this.chartData3.datasets[0].data[3] = earlyEntry4;\r\n  this.chartData3.datasets[1].data[3] = onTime4;\r\n  this.chartData3.datasets[2].data[3] = lateEntry4;\r\n  this.chartData3.datasets[3].data[3] = earlyLeave4;\r\n  this.chartData3.datasets[4].data[3] = overTime4;\r\n\r\n    const filteredData = Object.values(attendanceDates).map(dateInfo => {\r\n      const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n      const minutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n      return {\r\n        date: dateInfo.date,\r\n        Intime: dateInfo.Intime,\r\n        Outtime: dateInfo.Outtime,\r\n        totalHours: hours,\r\n        totalMinutes: minutes\r\n      };\r\n    }).filter(record => record.date.includes(this.Search));\r\n    return filteredData;\r\n  } else {\r\n    return [];\r\n  }\r\n},\r\ngetChart3(){\r\n  const ctx = this.$refs.myChart3.getContext('2d');\r\n\r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData3,\r\n        options: this.chartOptions3\r\n      });\r\n    },\r\n}\r\n}\r\n</script>"],"mappings":";;EACOA,KAAK,EAAC;AAAY;;EACdA,KAAK,EAAC;AAAW;;EACdC,GAAG,EAAC;AAAU;;uBAF1BC,mBAAA,CAIQ,OAJRC,UAIQ,GAHJC,mBAAA,CAEI,OAFJC,UAEI,GADJD,mBAAA,CAAgC,UAAhCE,UAAgC,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}