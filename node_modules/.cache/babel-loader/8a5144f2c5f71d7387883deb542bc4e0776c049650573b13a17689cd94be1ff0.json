{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart, registerables } from 'chart.js/auto';\nChart.register(...registerables);\nimport axios from 'axios';\nexport default {\n  name: 'BarGraph',\n  data() {\n    return {\n      chart: null,\n      chartData3: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n        datasets: [{\n          label: 'earlyEntry',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'ontime',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'late',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'earlyleave',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'overtime',\n          data: [0, 0, 0, 0, 0, 0]\n        }]\n      },\n      chartOptions3: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Attendance'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    showEmployeeDetails(employee) {\n      this.selectedEmployee = employee;\n      this.workingHours = true;\n      this.employeeTable = false;\n      this.showDetails = true;\n      this.teamMembers = false;\n      this.updateEntry();\n      this.getLeaveTable();\n      this.filterTeamAttendance();\n      this.avgTeamCheckIn();\n      this.avgTeamCheckOut();\n      this.teamAvgHours();\n      this.TeamOnTime();\n      this.initChart();\n      // this.getChart0();\n    },\n    updateEntry() {\n      console.log('hi');\n      if (this.selectedEmployee) {\n        const attendanceDates = {};\n        this.selectedEmployee.attendances.forEach(attendance => {\n          if (!attendanceDates[attendance.date]) {\n            attendanceDates[attendance.date] = {\n              date: attendance.date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[attendance.date].Intime.push(attendance.inTime);\n          if (attendance.outTime) {\n            const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n            const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[attendance.date].totalDifference += diff;\n            attendanceDates[attendance.date].Outtime.push(attendance.outTime);\n          }\n        });\n        const earlyEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\n          }\n          return count;\n        }, 0);\n        const onTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n          }\n          return count;\n        }, 0);\n        const lateEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n          }\n          return count;\n        }, 0);\n        const overTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n          }\n          return count;\n        }, 0);\n        const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 2) {\n            return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n          }\n          return count;\n        }, 0);\n        console.log(earlyEntry3);\n        console.log(onTime3);\n        console.log(lateEntry3);\n        console.log(earlyLeave3);\n        console.log(overTime3);\n        this.chartData3.datasets[0].data[2] = earlyEntry3;\n        this.chartData3.datasets[1].data[2] = onTime3;\n        this.chartData3.datasets[2].data[2] = lateEntry3;\n        this.chartData3.datasets[3].data[2] = earlyLeave3;\n        this.chartData3.datasets[4].data[2] = overTime3;\n        const earlyEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\n          }\n          return count;\n        }, 0);\n        const onTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n          }\n          return count;\n        }, 0);\n        const lateEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n          }\n          return count;\n        }, 0);\n        const overTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n          }\n          return count;\n        }, 0);\n        const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n          if (new Date(dateInfo.date).getMonth() === 3) {\n            return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n          }\n          return count;\n        }, 0);\n        console.log(earlyEntry4);\n        console.log(onTime4);\n        console.log(lateEntry4);\n        console.log(earlyLeave4);\n        console.log(overTime4);\n        this.chartData3.datasets[0].data[3] = earlyEntry4;\n        this.chartData3.datasets[1].data[3] = onTime4;\n        this.chartData3.datasets[2].data[3] = lateEntry4;\n        this.chartData3.datasets[3].data[3] = earlyLeave4;\n        this.chartData3.datasets[4].data[3] = overTime4;\n        const filteredData = Object.values(attendanceDates).map(dateInfo => {\n          const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n          const minutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n          return {\n            date: dateInfo.date,\n            Intime: dateInfo.Intime,\n            Outtime: dateInfo.Outtime,\n            totalHours: hours,\n            totalMinutes: minutes\n          };\n        }).filter(record => record.date.includes(this.Search));\n        return filteredData;\n      } else {\n        return [];\n      }\n    },\n    initChart() {\n      let canvas = this.$refs.bar.ge;\n      console.log(canvas);\n      if (canvas) {\n        console.log(\"hichart\");\n        const ctx = canvas.getContext('2d');\n        this.chart = new Chart(ctx, {\n          type: 'bar',\n          data: this.chartData3,\n          options: this.chartOptions3\n        });\n      } else {\n        console.error(\"Canvas element not found.\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","axios","name","data","chart","chartData3","labels","datasets","label","chartOptions3","responsive","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","methods","showEmployeeDetails","employee","selectedEmployee","workingHours","employeeTable","showDetails","teamMembers","updateEntry","getLeaveTable","filterTeamAttendance","avgTeamCheckIn","avgTeamCheckOut","teamAvgHours","TeamOnTime","initChart","console","log","attendanceDates","attendances","forEach","attendance","date","Intime","Outtime","totalDifference","push","inTime","outTime","intimeDate","Date","outtimeDate","diff","Math","abs","earlyEntry3","Object","values","reduce","count","dateInfo","getMonth","filter","time","length","onTime3","lateEntry3","overTime3","earlyLeave3","earlyEntry4","onTime4","lateEntry4","overTime4","earlyLeave4","filteredData","map","hours","floor","minutes","totalHours","totalMinutes","record","includes","Search","canvas","$refs","bar","ge","ctx","getContext","type","options","error"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\leaveForm.vue"],"sourcesContent":["<!-- \r\n<template>\r\n  <div class=\"mainHeading\">\r\n    <p>HRMS- Human Resource Management System</p>\r\n  </div>\r\n  <div class=\"AttendenceContainer\">\r\n    <div class=\"DateContainer\">\r\n      <div class=\"table1\">\r\n        <h3 class=\"StatisticsHeading\">Satistics</h3>\r\n        <div class=\"StatisticsContainer\">\r\n          <div class=\"WeekBox\">\r\n            <label class=\"label\">Week</label>\r\n            <div class=\"WeekLeaves\">{{ WeekHours}} /45Hrs</div>\r\n          </div><br>\r\n          <div class=\"MonthBox\">\r\n            <label class=\"label\">Month</label>\r\n            <div class=\"MonthLeaves\">{{ MonthHours}} /198Hrs</div>\r\n          </div><br>\r\n          <div class=\"AbsentBox\">\r\n            <label class=\"label\">Absent/month</label>\r\n            <div class=\"leavebalance3\">\r\n              <h3>0</h3>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n        <div class=\"punchMainHeading\"><h3>Date Activity</h3>\r\n        <div class=\"DateActivity1\" > \r\n          <div class=\"insidepunch\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Intime1 }}</p>\r\n          <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Outtime1 }}</p>\r\n        </div>\r\n        <div class=\"insidepunch\">\r\n          <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime2 }}</p>\r\n          <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime2 }}</p>\r\n        </div>\r\n        </div>\r\n          <div v-if=\"punchValues.Intime3 && punchValues.Intime3.length > 1\" >\r\n            <div class=\"insidepunch\">\r\n        <h4 class=\"punchheading\">Punch In At:</h4>\r\n        <p class=\"punchValues\">{{  punchValues.Intime3 }}</p>\r\n        <h4 class=\"punchheading\">Punch Out At:</h4>\r\n        <p class=\"punchValues\">{{ punchValues.Outtime3 }}</p>\r\n      </div>\r\n      </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"AttendenceTable\">\r\n      <div>\r\n        <h3 class=\"Heading\">Attendence</h3>\r\n      </div>\r\n\r\n      <div><input type=\"text\" placeholder=\"Search\" class=\"searchElement\" v-model=\"Search\">\r\n        <div>\r\n          <table class=\"table table-bordered\" id=\"table6\">\r\n            <thead>\r\n              <tr>\r\n                <th>Date</th>\r\n                <th>InTime</th>\r\n                <th>OutTime</th>\r\n                <th>WorkingHours</th>\r\n              </tr>\r\n            </thead>\r\n            <tr v-for=\"(record, index) in workingHoursData\" :key=\"index\" @click=\"getPunchDetails(record)\">\r\n              <td>{{ record.date }}</td>\r\n              <td>{{ record.Intime[0] }}</td>\r\n              <td>{{ record.Outtime[1] }}</td>\r\n              <td>{{ record.totalHours }} hrs {{ record.totalMinutes }} mins</td>\r\n            </tr>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div>\r\n      <canvas ref=\"myChart1\"></canvas>\r\n    </div>\r\n    </div>\r\n  \r\n  <div class=\"sidebar\">\r\n    <div class=\"nav\">\r\n      <div class=\"menu\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-home'></i>\r\n              <RouterLink to=\"/navigation\" class=\"text\"> Home</RouterLink>\r\n            </a>\r\n          </li>\r\n          <li class=\"active\" v-if=\"getteam\">\r\n            <a href=\"#\">\r\n              <i class=\"fa-solid fa-users\"></i>\r\n              <RouterLink to=\"/members\" class=\"text\"> Team Members</RouterLink>\r\n            </a>\r\n          </li>\r\n          <li class=\"active\">\r\n            <a href=\"#\">\r\n              <i class='bx bxs-calendar'></i>\r\n\r\n              <RouterLink to=\"/attendence\" class=\"text\">Attendence</RouterLink>\r\n            </a>\r\n          </li>\r\n\r\n        </ul>\r\n      </div>\r\n      <div class=\"menu\" id=\"logout\">\r\n        <ul>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-info-circle'></i>\r\n              <span class=\"text\">Help</span>\r\n            </a>\r\n          </li>\r\n          <li>\r\n            <a href=\"#\">\r\n              <i class='bx bx-log-out'></i>\r\n              <RouterLink to=\"/\" class=\"text\" @click=\"logout\"> Logout</RouterLink>\r\n            </a>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\nexport default {\r\n  name: 'BarGraph',\r\n  data() {\r\n    return {\r\n      selectedEmployee: null,\r\n      selectedDate: null,\r\n      employeeTable: true,\r\n      hours: true,\r\n      Search: \"\",\r\n      punchValues: {\r\n        Intime1: null,\r\n        Intime2: null,\r\n        Outtime1: null,\r\n        Outtime2: null,\r\n        Intime3: [],\r\n        Outtime3: []\r\n      },\r\n    };\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.getters. getUserData && this.$store.getters.getUserData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n      if (this.$store.getters. getUserData && this.$store.getters.getUserData.length > 0) {\r\n        const userId = this.userDetails ? this.userDetails.userId : null;\r\n        if (userId) {\r\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\r\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n            const key = employee.empId;\r\n            if (!acc[key]) {\r\n              acc[key] = {\r\n                empId: employee.empId,\r\n                empName: employee.empName,\r\n                empRole: employee.empRole,\r\n                attendances: []\r\n              };\r\n            }\r\n            acc[key].attendances.push(employee);\r\n            return acc;\r\n          }, {});\r\n          const uniqueEmployees = Object.values(groupedEmployees);\r\n          return uniqueEmployees;\r\n        }\r\n      }\r\n      return [];\r\n    },\r\n    workingHoursData() {\r\n  const attendanceDates = {};\r\n  const referenceDate = '01/01/2000';\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { date, inTime, outTime } = attendance;\r\n      if (!attendanceDates[date]) {\r\n        attendanceDates[date] = {\r\n          date: date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0,\r\n        };\r\n      }\r\n      attendanceDates[date].Intime.push(inTime);\r\n      if (outTime) {\r\n        const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n        const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[date].totalDifference += diff;\r\n        attendanceDates[date].Outtime.push(outTime);\r\n      }\r\n    });\r\n  });\r\n  const result = Object.values(attendanceDates).map(dateInfo => {\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n    return {\r\n      date: dateInfo.date,\r\n      Intime: dateInfo.Intime,\r\n      Outtime: dateInfo.Outtime,\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  }).filter(record => record.date.includes(this.Search));\r\n  return result;\r\n},\r\n\r\n    // WeekHours() {\r\n    //   if (this.workingHoursData.length > 0) {\r\n    //     const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n    //     const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n    //     const totalInMinutes = totalHours * 60 + totalMinutes;\r\n    //     const averageInMinutes = totalInMinutes / 5;\r\n    //     const averageHours = Math.floor(averageInMinutes / 60);\r\n    //     const averageMinutes = Math.floor(averageInMinutes % 60);\r\n    //     const totallength = this.workingHoursData.length;\r\n    //     console.log(totallength);\r\n    //     return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n    //   }\r\n    //   return null;\r\n    // },\r\n    // MonthHours() {\r\n    //   if (this.workingHoursData.length > 0) {\r\n    //     const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n    //     const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n    //     const totalInMinutes = totalHours * 60 + totalMinutes;\r\n    //     const averageInMinutes = totalInMinutes;\r\n    //     const averageHours = Math.floor(averageInMinutes / 60);\r\n    //     const averageMinutes = Math.floor(averageInMinutes % 60);\r\n    //     const totallength = this.workingHoursData.length;\r\n    //     console.log(totallength);\r\n    //     return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n    //   }\r\n    //   return null;\r\n    // },\r\n    getteam() {\r\n      return this.$store.getters.getTeamMembers;\r\n    }\r\n  },\r\n  created() {\r\n    this.initializePunchValues();\r\n  },\r\n  mounted(){\r\n    this.renderChart();\r\n  },\r\n  methods: {\r\n    initializePunchValues() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const record = this.workingHoursData[0];\r\n        this.punchValues.Intime1 = record.Intime[0];\r\n        this.punchValues.Intime2 = record.Intime[1];\r\n        this.punchValues.Outtime1 = record.Outtime[0];\r\n        this.punchValues.Outtime2 = record.Outtime[1];\r\n        this.punchValues.Intime3 = record.Intime[2] || [];\r\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n      }\r\n      this.updateEnteries();\r\n    },\r\n    getPunchDetails(record) {\r\n      this.punchValues.Intime1 = record.Intime[0];\r\n      this.punchValues.Intime2 = record.Intime[1];\r\n      this.punchValues.Outtime1 = record.Outtime[0];\r\n      this.punchValues.Outtime2 = record.Outtime[1];\r\n      this.punchValues.Intime3 = record.Intime[2] || [];\r\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n    },\r\n    updateEnteries(){\r\n      const attendanceDates = {};\r\n  const referenceDate = '01/01/2000';\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { date, inTime, outTime } = attendance;\r\n      if (!attendanceDates[date]) {\r\n        attendanceDates[date] = {\r\n          date: date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0,\r\n        };\r\n      }\r\n      attendanceDates[date].Intime.push(inTime);\r\n      if (outTime) {\r\n        const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n        const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[date].totalDifference += diff;\r\n        attendanceDates[date].Outtime.push(outTime);\r\n      }\r\n    });\r\n  });\r\n  const avgIntime = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  return count + dateInfo.Intime.filter(time => time >'08:00:00' && time <'10:00:00')/dateInfo.Intime.length;\r\n}, 0);\r\n\r\nconsole.log( avgIntime);\r\n\r\n  const earlyentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n      const month = new Date(dateInfo.date).getMonth();\r\n      if (month === 2) {\r\n        return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\r\n        \r\n      }\r\n      return count;\r\n    }, 0);\r\n  const ontime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const lateentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const overtime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconst earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const month = new Date(dateInfo.date).getMonth();\r\n  if (month === 2) {\r\n  return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n  }\r\n  return count;\r\n}, 0);\r\n\r\n  // console.log(\"🚀 ~ early:\", earlyentry3);\r\n  // console.log(\"🚀 ~ ontime:\", ontime3);\r\n  // console.log(\"🚀 ~ lateentry:\", lateentry3);\r\n  // console.log(\"🚀 ~ overtime:\", overtime3);\r\n  // console.log(\"🚀 ~ earlyLeave:\", earlyLeave3);\r\n  this.chartData1.datasets[0].data[2] = earlyentry3;\r\n      this.chartData1.datasets[1].data[2] = ontime3;\r\n      this.chartData1.datasets[2].data[2] = lateentry3;\r\n      this.chartData1.datasets[3].data[2] = earlyLeave3;\r\n      this.chartData1.datasets[4].data[2] = overtime3;\r\n\r\n     \r\n  \r\n  const earlyentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n      const month = new Date(dateInfo.date).getMonth();\r\n      if (month === 3) {\r\n        return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\r\n      }\r\n      return count;\r\n    }, 0);\r\n  const ontime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const lateentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const overtime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconst earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const month = new Date(dateInfo.date).getMonth();\r\n  if (month === 4) {\r\n  return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n  }\r\n  return count;\r\n}, 0);\r\n  // console.log(\"🚀 ~ early:\", earlyentry4);\r\n  // console.log(\"🚀 ~ ontime:\", ontime4);\r\n  // console.log(\"🚀 ~ lateentry:\", lateentry4);\r\n  // console.log(\"🚀 ~ overtime:\", overtime4);\r\n  // console.log(\"🚀 ~ earlyLeave:\", earlyLeave4);\r\n  this.chartData1.datasets[0].data[3] = earlyentry4;\r\n      this.chartData1.datasets[1].data[3] = ontime4;\r\n      this.chartData1.datasets[2].data[3] = lateentry4;\r\n      this.chartData1.datasets[3].data[3] = earlyLeave4;\r\n      this.chartData1.datasets[4].data[3] = overtime4;\r\n\r\n  const result = Object.values(attendanceDates).map(dateInfo => {\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n    return {\r\n      date: dateInfo.date,\r\n      Intime: dateInfo.Intime,\r\n      Outtime: dateInfo.Outtime,\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  })\r\n  return result;\r\n},\r\n\r\n    renderChart() {\r\n      const ctx = this.$refs.myChart1.getContext('2d');\r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData1,\r\n        options: this.chartOptions1\r\n      });\r\n    }\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n@import url(https://fonts.googleapis.com/css?family=Inter:100,200,300,regular,500,600,700,800,900);\r\n\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n.mainHeading {\r\n  font-family: 'Calibri Light';\r\n  color: black;\r\n  font-size: 22px;\r\n  background-color: aqua;\r\n  text-align: left;\r\n  padding-left: 45px;\r\n  height: 40px;\r\n}\r\n.AttendenceContainer {\r\n  margin-top: -12px;\r\n  border-radius: 20px;\r\n  margin-left: 18%;\r\n  margin-right: 4px;\r\n  border: 5px solid #000;\r\n  margin-top: 10px;\r\n  height: auto\r\n}\r\n\r\n.DateContainer {\r\n  display: flex;\r\n  margin-top: 10px;\r\n  padding-top: 5px;\r\n  padding-left: 30px;\r\n  padding-right: 10px;\r\n  background-color:beige;\r\n  border-radius: 10px;\r\n  margin-right: 20px;\r\n  margin-bottom: 10px;\r\n  padding-bottom: 10px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  margin-left: 1%;\r\n}\r\n\r\nbody {\r\n  background-color: white;\r\n  background-size: 20%;\r\n  background-repeat: no-repeat;\r\n  background-position: 55% center;\r\n}\r\n\r\n.leavesummary {\r\n  padding-right: 200px;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\n.sidebar {\r\n  position: fixed;\r\n  top: 40px;\r\n  left: 0;\r\n  width: px;\r\n  height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  background-color: #1f3050;\r\n  padding: 24px;\r\n  gap: 40px;\r\n  transition: all 0.3s;\r\n  padding-left: 0%;\r\n  padding-top: 100px;\r\n}\r\n\r\n.menu .title {\r\n  position: absolute;\r\n  padding-left: 20px;\r\n  font-size: 10px;\r\n  font-weight: 500;\r\n  color: white;\r\n  text-transform: uppercase;\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.menu ul li {\r\n  position: relative;\r\n  list-style: none;\r\n  margin-bottom: 5px;\r\n}\r\n\r\n.menu ul li a.bx {\r\n  font-size: 20px;\r\n}\r\n\r\n.menu ul li a.bi {\r\n  font-size: 20px;\r\n}\r\n\r\n.menu ul li a {\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  font-size: 22px;\r\n  font-weight: 500;\r\n  color: white;\r\n  text-decoration: none;\r\n  padding: 10px 4px;\r\n  padding-left: 5px;\r\n  border-radius: 8px;\r\n  transition: all 0.3s;\r\n  font-family: Arial, Helvetica, sans-serif\r\n}\r\n\r\n.menu ul li a:hover {\r\n  background-color: blue;\r\n}\r\n\r\n.nav {\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 230px;\r\n}\r\n\r\n#logout {\r\n  padding-bottom: 0px;\r\n  margin-bottom: 0px;\r\n}\r\n\r\n.table1 {\r\n  margin-left: 0px;\r\n  margin-right: -10px;\r\n  padding-right: 18px;\r\n  width: 500px;\r\n  padding-left: -10px;\r\n}\r\n\r\n.DateTable {\r\n  margin-right: 5px;\r\n  padding-right: 5px;\r\n  margin-left: 200px;\r\n}\r\n\r\n.DateActivity1 {\r\n  border-radius: 10px;\r\n  gap: 2px;\r\n  padding-top: -5px;\r\n  margin-top: 14px;\r\n  overflow: scroll;\r\n  overflow-x: hidden; \r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  width: 390px;\r\n  padding-left: 10px;\r\n  padding-top: 10px;\r\n  margin-right: 20px;\r\n  width: 450px;\r\nheight: auto;\r\n\r\n}\r\n\r\n\r\n.WeekBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: palevioletred;\r\n  width: 180px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  height: 120px;\r\n  padding-left: 3px;\r\n}\r\n\r\n.MonthBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: rgb(70, 206, 70);\r\n  width: 180px;\r\n  height: 120px;\r\n  padding-left: 3px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.AbsentBox {\r\n  display: inline-block;\r\n  border-left: 6px solid;\r\n  border-color: rgb(231, 14, 14);\r\n  width: 180px;\r\n  margin-left: 20px;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  height: 120px;\r\n  margin-right: 10px;\r\n  padding-left: 3px;\r\n}\r\n\r\n.WeekLeaves {\r\n  font-size: 22px;\r\n  padding-left: 4px;\r\n  font-family: 'Times New Roman', Times, serif;\r\n  color: palevioletred;\r\n}\r\n\r\n.MonthLeaves {\r\n  font-size: 22px;\r\n  padding-left: 4px;\r\n  color: rgb(70, 206, 70);\r\n  font-family: 'Times New Roman', Times, serif;\r\n}\r\n\r\n.leavebalance3 {\r\n  font-size: 30px;\r\n  padding-left: 4px;\r\n  color: rgb(231, 14, 14);\r\n  font-family: 'Times New Roman', Times, serif;\r\n}\r\n\r\n.StatisticsContainer {\r\n  display: flex;\r\n  border-radius: 10px;\r\n  padding-bottom: 2px;\r\n  width: 500px;\r\n  padding-top: 7px;\r\n  height: 170px;\r\n  padding-left: 15px;\r\n  margin-left: -4%;\r\n  \r\n\r\n}\r\n\r\n.DateHeading {\r\n  padding-top: -10px;\r\n  padding-bottom: 10px;\r\n  margin-bottom: 4px;\r\n  font-size: 25px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  color: rgb(214, 60, 32);\r\n}\r\n\r\n.AttendenceTable {\r\n\r\n  padding-left: 10px;\r\n  padding-right: 20px;\r\n  margin-right: 10px;\r\n  border: 1px #ccc;\r\n  border-radius: 5px;\r\n  background-color: beige;\r\n  box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.5);\r\n  margin-left: 1%;\r\n}\r\n\r\n.searchElement {\r\n  border-radius: 5px;\r\n  height: 35px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n  width: 180px;\r\n  padding-left: 4px;\r\n}\r\n\r\n.punchheading {\r\n  color: red;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n}\r\n\r\n.punchValues {\r\n  color: black;\r\n  padding-left: 5px;\r\n  margin-right: 2px;\r\n  font-size: 20px;\r\n}\r\n.StatisticsHeading{\r\n  padding-top: 10px;\r\n  padding-left: -2px;\r\n  padding-bottom: 5px;\r\n  font-size: 25px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  color: rgb(214, 60, 32)\r\n}\r\n#table6 th{\r\n  background-color: beige;\r\n}\r\n#table6 td{\r\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n}\r\n.insidepunch{\r\n  display: flex;\r\n  gap: 5px;\r\n}\r\n.barchart{\r\n  margin-left: 1%;\r\n}\r\n</style> -->\r\n<template>\r\n  <canvas  ref=\"myChart3\"></canvas>\r\n</template>\r\n<script>\r\nimport { Chart, registerables } from 'chart.js/auto';\r\nChart.register(...registerables);\r\nimport axios from 'axios'\r\nexport default {\r\n  name: 'BarGraph',\r\n  data() {\r\n    return {\r\n      chart: null, \r\n      chartData3: {\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n        datasets: [\r\n          {\r\n          label: 'earlyEntry',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'ontime',\r\n          data: [0,0,0,0,0,0]\r\n        },\r\n        {\r\n          label: 'late',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'earlyleave',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'overtime',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n      ]\r\n      },\r\n      \r\n      chartOptions3: {\r\n         responsive: true,\r\n          maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n            \r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      }\r\n\r\n     \r\n    };\r\n  },\r\n  methods: {\r\n    showEmployeeDetails(employee) {\r\n      this.selectedEmployee = employee;\r\n      this.workingHours = true;\r\n      this.employeeTable = false;\r\n    this.showDetails=true;\r\n    this.teamMembers=false\r\n    this.updateEntry();\r\n    this.getLeaveTable();\r\n    this.filterTeamAttendance();\r\n    this.avgTeamCheckIn();\r\n    this.avgTeamCheckOut();\r\n    this.teamAvgHours();\r\n    this.TeamOnTime();\r\n    this.initChart();\r\n    // this.getChart0();\r\n  \r\n    },\r\n   \r\n    updateEntry(){\r\n      console.log('hi')\r\n      if (this.selectedEmployee) {\r\n    const attendanceDates = {};\r\n    this.selectedEmployee.attendances.forEach(attendance => {\r\n      if (!attendanceDates[attendance.date]) {\r\n        attendanceDates[attendance.date] = {\r\n          date: attendance.date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0\r\n        };\r\n      }\r\n      attendanceDates[attendance.date].Intime.push(attendance.inTime);\r\n      if (attendance.outTime) {\r\n        const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n        const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[attendance.date].totalDifference += diff;\r\n        attendanceDates[attendance.date].Outtime.push(attendance.outTime);\r\n      } \r\n    });\r\n    const earlyEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const onTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const lateEntry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const overTime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 2) {\r\n      return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  console.log(earlyEntry3);\r\nconsole.log(onTime3);\r\nconsole.log(lateEntry3)\r\nconsole.log(earlyLeave3)\r\nconsole.log(overTime3)\r\n  this.chartData3.datasets[0].data[2] = earlyEntry3;\r\n  this.chartData3.datasets[1].data[2] = onTime3;\r\n  this.chartData3.datasets[2].data[2] = lateEntry3;\r\n  this.chartData3.datasets[3].data[2] = earlyLeave3;\r\n  this.chartData3.datasets[4].data[2] = overTime3;\r\n\r\n  const earlyEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const onTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const lateEntry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const overTime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n\r\n  const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    if (new Date(dateInfo.date).getMonth() === 3) {\r\n      return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconsole.log(earlyEntry4);\r\nconsole.log(onTime4);\r\nconsole.log(lateEntry4)\r\nconsole.log(earlyLeave4)\r\nconsole.log(overTime4)\r\n  this.chartData3.datasets[0].data[3] = earlyEntry4;\r\n  this.chartData3.datasets[1].data[3] = onTime4;\r\n  this.chartData3.datasets[2].data[3] = lateEntry4;\r\n  this.chartData3.datasets[3].data[3] = earlyLeave4;\r\n  this.chartData3.datasets[4].data[3] = overTime4;\r\n\r\n    const filteredData = Object.values(attendanceDates).map(dateInfo => {\r\n      const hours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n      const minutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n      return {\r\n        date: dateInfo.date,\r\n        Intime: dateInfo.Intime,\r\n        Outtime: dateInfo.Outtime,\r\n        totalHours: hours,\r\n        totalMinutes: minutes\r\n      };\r\n    }).filter(record => record.date.includes(this.Search));\r\n    return filteredData;\r\n    \r\n  } else {\r\n    return [];\r\n  }\r\n},\r\ninitChart() {\r\n  let canvas = this.$refs.bar.ge;\r\n  console.log(canvas)\r\n  if (canvas) {\r\n    console.log(\"hichart\")\r\n    const ctx = canvas.getContext('2d');\r\n    this.chart = new Chart(ctx, {\r\n      type: 'bar',\r\n      data: this.chartData3,\r\n      options: this.chartOptions3\r\n    });\r\n  } else {\r\n    console.error(\"Canvas element not found.\");\r\n  }\r\n},\r\n}\r\n}\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}