{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      selectedEmployee: null,\n      workingHours: false\n    };\n  },\n  computed: {\n    userDetails() {\n      return this.$store.state.userData && this.$store.state.userData.length > 0 ? this.$store.state.userData[0] : null;\n    },\n    employeeList() {\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n        const groupedEmployees = this.$store.state.userData.reduce((acc, employee) => {\n          const key = employee.empId;\n          if (!acc[key]) {\n            acc[key] = {\n              empId: employee.empId,\n              empName: employee.empName,\n              attendances: []\n            };\n          }\n          acc[key].attendances.push(employee);\n          return acc;\n        }, {});\n        const uniqueEmployees = Object.values(groupedEmployees);\n        return uniqueEmployees;\n      }\n      return [];\n    }\n  },\n  methods: {\n    showEmployeeDetails(employee) {\n      console.log(\"Selected Employee:\", employee);\n      this.selectedEmployee = employee;\n      this.workingHours = true;\n    },\n    calculateWorkingHoursForDate(date) {\n      const attendancesForDate = this.selectedEmployee.attendances.filter(attendance => attendance.date === date);\n      let totalDifference = 0;\n\n      // Grouping the inTime and outTime entries by date\n      const groupedAttendances = {};\n      attendancesForDate.forEach(attendance => {\n        if (!groupedAttendances[attendance.date]) {\n          groupedAttendances[attendance.date] = [];\n        }\n        groupedAttendances[attendance.date].push(attendance);\n      });\n\n      // Calculating the difference for each pair of inTime and outTime entries for each date\n      Object.values(groupedAttendances).forEach(attendances => {\n        if (attendances.length >= 2) {\n          const inTime1 = new Date(`01/01/2000 ${attendances[0].inTime}`);\n          const outTime1 = new Date(`01/01/2000 ${attendances[0].outTime}`);\n          const inTime2 = new Date(`01/01/2000 ${attendances[1].inTime}`);\n          const outTime2 = new Date(`01/01/2000 ${attendances[1].outTime}`);\n          const diff1 = Math.abs(outTime1 - inTime1);\n          const diff2 = Math.abs(outTime2 - inTime2);\n          const totalDiff = diff1 + diff2;\n          totalDifference += totalDiff;\n        }\n      });\n\n      // Converting the total difference to hours and minutes\n      const totalHours = Math.floor(totalDifference / (1000 * 60 * 60));\n      const totalMinutes = Math.floor(totalDifference % (1000 * 60 * 60) / (1000 * 60));\n      return `${totalHours} hours ${totalMinutes} minutes`;\n    },\n    getWorkingHoursTable() {\n      this.workingHours = true;\n    }\n  }\n};","map":{"version":3,"names":["data","selectedEmployee","workingHours","computed","userDetails","$store","state","userData","length","employeeList","groupedEmployees","reduce","acc","employee","key","empId","empName","attendances","push","uniqueEmployees","Object","values","methods","showEmployeeDetails","console","log","calculateWorkingHoursForDate","date","attendancesForDate","filter","attendance","totalDifference","groupedAttendances","forEach","inTime1","Date","inTime","outTime1","outTime","inTime2","outTime2","diff1","Math","abs","diff2","totalDiff","totalHours","floor","totalMinutes","getWorkingHoursTable"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- User Table -->\r\n    <table v-if=\"userDetails\" class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>UserId</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>{{ userDetails.userId }}</td>\r\n          <td>{{ userDetails.userName }}</td>\r\n          <td>{{ userDetails.email }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <!-- Employee Table -->\r\n    <table v-if=\"employeeList && employeeList.length > 0\" class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>EmployeeId</th>\r\n          <th>EmployeeName</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(employee, index) in employeeList\" :key=\"'emp_' + index\">\r\n          <td @click=\"showEmployeeDetails(employee)\">{{ employee.empId }}</td>\r\n          <td>{{ employee.empName }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <!-- Employee Details Table -->\r\n  <div v-if=\"selectedEmployee\">\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>EmployeeId</th>\r\n          <th>Date</th>\r\n          <th>Intime</th>\r\n          <th>Outtime</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(attendance, index) in selectedEmployee.attendances\" :key=\"index\">\r\n          <td>{{ selectedEmployee.empId }}</td>\r\n          <td @click=\"getWorkingHoursTable()\">{{ attendance.date }}</td>\r\n          <td>{{ attendance.inTime }}</td>\r\n          <td>{{ attendance.outTime }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <!-- Employee Working Hours Table -->\r\n  <div v-if=\"workingHours\">\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>WorkingHours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(attendance, index) in selectedEmployee.attendances\" :key=\"'work_' + index\">\r\n          <td>{{ attendance.date }}</td>\r\n          <td>{{ calculateWorkingHoursForDate(attendance.date) }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedEmployee: null,\r\n      workingHours: false\r\n    };\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.state.userData && this.$store.state.userData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n        const groupedEmployees = this.$store.state.userData.reduce((acc, employee) => {\r\n          const key = employee.empId;\r\n          if (!acc[key]) {\r\n            acc[key] = {\r\n              empId: employee.empId,\r\n              empName: employee.empName,\r\n              attendances: []\r\n            };\r\n          }\r\n          acc[key].attendances.push(employee);\r\n          return acc;\r\n        }, {});\r\n        const uniqueEmployees = Object.values(groupedEmployees);\r\n        return uniqueEmployees;\r\n      }\r\n      return [];\r\n    }\r\n  },\r\n  methods: {\r\n    showEmployeeDetails(employee) {\r\n      console.log(\"Selected Employee:\", employee);\r\n      this.selectedEmployee = employee;\r\n      this.workingHours = true;\r\n    },\r\n    calculateWorkingHoursForDate(date) {\r\n  const attendancesForDate = this.selectedEmployee.attendances.filter(attendance => attendance.date === date);\r\n  let totalDifference = 0;\r\n  \r\n  // Grouping the inTime and outTime entries by date\r\n  const groupedAttendances = {};\r\n  attendancesForDate.forEach(attendance => {\r\n    if (!groupedAttendances[attendance.date]) {\r\n      groupedAttendances[attendance.date] = [];\r\n    }\r\n    groupedAttendances[attendance.date].push(attendance);\r\n  });\r\n\r\n  // Calculating the difference for each pair of inTime and outTime entries for each date\r\n  Object.values(groupedAttendances).forEach(attendances => {\r\n    if (attendances.length >= 2) {\r\n      const inTime1 = new Date(`01/01/2000 ${attendances[0].inTime}`);\r\n      const outTime1 = new Date(`01/01/2000 ${attendances[0].outTime}`);\r\n      const inTime2 = new Date(`01/01/2000 ${attendances[1].inTime}`);\r\n      const outTime2 = new Date(`01/01/2000 ${attendances[1].outTime}`);\r\n      const diff1 = Math.abs(outTime1 - inTime1);\r\n      const diff2 = Math.abs(outTime2 - inTime2);\r\n      const totalDiff = diff1 + diff2;\r\n      totalDifference += totalDiff;\r\n    }\r\n  });\r\n\r\n  // Converting the total difference to hours and minutes\r\n  const totalHours = Math.floor(totalDifference / (1000 * 60 * 60));\r\n  const totalMinutes = Math.floor((totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n  \r\n  return `${totalHours} hours ${totalMinutes} minutes`;\r\n}\r\n,\r\n    getWorkingHoursTable() {\r\n      this.workingHours = true;\r\n    }\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}