{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  data() {\n    return {\n      selectedEmployee: null,\n      workingHours: false,\n      selectedDate: null,\n      employeeTable: true\n    };\n  },\n  computed: {\n    userDetails() {\n      return this.$store.state.userData && this.$store.state.userData.length > 0 ? this.$store.state.userData[0] : null;\n    },\n    employeeList() {\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\n        const groupedEmployees = this.$store.state.userData.reduce((acc, employee) => {\n          const key = employee.empId;\n          if (!acc[key]) {\n            acc[key] = {\n              empId: employee.empId,\n              empName: employee.empName,\n              empRole: employee.empRole,\n              attendances: []\n            };\n          }\n          acc[key].attendances.push(employee);\n          return acc;\n        }, {});\n        const uniqueEmployees = Object.values(groupedEmployees);\n        return uniqueEmployees;\n      }\n      return [];\n    },\n    filteredAttendances() {\n      if (this.selectedEmployee && this.selectedDate) {\n        const groupedAttendances = {};\n        this.selectedEmployee.attendances.forEach(attendance => {\n          if (!groupedAttendances[attendance.date]) {\n            groupedAttendances[attendance.date] = [];\n          }\n          groupedAttendances[attendance.date].push(attendance);\n        });\n        const workingHoursPerDate = Object.keys(groupedAttendances).map(date => {\n          const attendances = groupedAttendances[date];\n          const totalWorkingHours = attendances.reduce((total, attendance) => {\n            if (attendance.inTime && attendance.outTime) {\n              const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\n              const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\n              const diff = Math.abs(outtimeDate - intimeDate);\n              const hours = Math.floor(diff / (1000 * 60 * 60));\n              const minutes = Math.floor(diff % (1000 * 60 * 60) / (1000 * 60));\n              return total + hours + minutes / 60; // Convert minutes to hours\n            }\n            return total;\n          }, 0);\n          return {\n            date,\n            totalWorkingHours\n          };\n        });\n        return workingHoursPerDate;\n      }\n      return [];\n    }\n  },\n  methods: {\n    showEmployeeDetails(employee) {\n      console.log(\"Selected Employee:\", employee);\n      this.selectedEmployee = employee;\n      this.workingHours = true;\n      this.employeeTable = false;\n    },\n    getValues(date) {\n      this.selectedDate = date;\n    }\n  }\n};","map":{"version":3,"names":["data","selectedEmployee","workingHours","selectedDate","employeeTable","computed","userDetails","$store","state","userData","length","employeeList","groupedEmployees","reduce","acc","employee","key","empId","empName","empRole","attendances","push","uniqueEmployees","Object","values","filteredAttendances","groupedAttendances","forEach","attendance","date","workingHoursPerDate","keys","map","totalWorkingHours","total","inTime","outTime","intimeDate","Date","outtimeDate","diff","Math","abs","hours","floor","minutes","methods","showEmployeeDetails","console","log","getValues"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- User Table -->\r\n    <table v-if=\"userDetails\" class=\"table table-bordered\">\r\n      <thead class=\"table-dark\" id=\"tbl\">\r\n        <tr>\r\n          <th>UserId</th>\r\n          <th>Name</th>\r\n          <th>Email</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr>\r\n          <td>{{ userDetails.userId }}</td>\r\n          <td>{{ userDetails.userName }}</td>\r\n          <td>{{ userDetails.email }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <!-- Employee Table -->\r\n    <div v-if=\"employeeTable\">\r\n      <table v-if=\"employeeList && employeeList.length > 0\" class=\"table table-bordered\" id=\"tbl\">\r\n        <thead class=\"table-dark\">\r\n          <tr>\r\n            <th>EmployeeId</th>\r\n            <th>EmployeeName</th>\r\n            <th>EmployeeRole</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"(employee, index) in employeeList\" :key=\"index\" @click=\"showEmployeeDetails(employee)\">\r\n            <td>{{ employee.empId }}</td>\r\n            <td>{{ employee.empName }}</td>\r\n            <td>{{employee.empRole}}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </div>\r\n  <div v-if=\"workingHours\">\r\n    <table class=\"table table-bordered\" id=\"tbl\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Total Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(attendance, index) in filteredAttendances\" :key=\"'work_' + index\">\r\n          <td @click=\"getValues(attendance.date)\">{{ attendance.date }}</td>\r\n          <td>{{ attendance.totalWorkingHours }} hours</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n  <!-- Employee Details Table -->\r\n  <div v-if=\"selectedEmployee\">\r\n    <table class=\"table table-bordered\" id=\"tbl\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>EmployeeId</th>\r\n          <th>Date</th>\r\n          <th>Intime</th>\r\n          <th>Outtime</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(attendance, index) in filteredAttendances\" :key=\"index\">\r\n          <td>{{ selectedEmployee.empId }}</td>\r\n          <td>{{ attendance.date }}</td>\r\n          <td>{{ attendance.inTime }}</td>\r\n          <td>{{ attendance.outTime }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      selectedEmployee: null,\r\n      workingHours: false,\r\n      selectedDate: null,\r\n      employeeTable:true\r\n    };\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.state.userData && this.$store.state.userData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n      if (this.$store.state.userData && this.$store.state.userData.length > 0) {\r\n        const groupedEmployees = this.$store.state.userData.reduce((acc, employee) => {\r\n          const key = employee.empId;\r\n          if (!acc[key]) {\r\n            acc[key] = {\r\n              empId: employee.empId,\r\n              empName: employee.empName,\r\n              empRole:employee.empRole,\r\n              attendances: []\r\n            };\r\n          }\r\n          acc[key].attendances.push(employee);\r\n          return acc;\r\n        }, {});\r\n        const uniqueEmployees = Object.values(groupedEmployees);\r\n        return uniqueEmployees;\r\n      }\r\n      return [];\r\n    },\r\n    filteredAttendances() {\r\n      if (this.selectedEmployee && this.selectedDate) {\r\n        const groupedAttendances = {};\r\n        this.selectedEmployee.attendances.forEach(attendance => {\r\n          if (!groupedAttendances[attendance.date]) {\r\n            groupedAttendances[attendance.date] = [];\r\n          }\r\n          groupedAttendances[attendance.date].push(attendance);\r\n        });\r\n\r\n        const workingHoursPerDate = Object.keys(groupedAttendances).map(date => {\r\n          const attendances = groupedAttendances[date];\r\n          const totalWorkingHours = attendances.reduce((total, attendance) => {\r\n            if (attendance.inTime && attendance.outTime) {\r\n              const intimeDate = new Date(`01/01/2000 ${attendance.inTime}`);\r\n              const outtimeDate = new Date(`01/01/2000 ${attendance.outTime}`);\r\n              const diff = Math.abs(outtimeDate - intimeDate);\r\n              const hours = Math.floor(diff / (1000 * 60 * 60));\r\n              const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));\r\n              return total + hours + minutes / 60; // Convert minutes to hours\r\n            }\r\n            return total;\r\n          }, 0);\r\n\r\n          return { date, totalWorkingHours };\r\n        });\r\n\r\n        return workingHoursPerDate;\r\n      }\r\n      return [];\r\n    }\r\n  },\r\n  methods: {\r\n    showEmployeeDetails(employee) {\r\n      console.log(\"Selected Employee:\", employee);\r\n      this.selectedEmployee = employee;\r\n      this.workingHours = true;\r\n      this.employeeTable=false\r\n    },\r\n    getValues(date) {\r\n      this.selectedDate = date;\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#tbl tr:nth-child(even){\r\n  background:#ccc;\r\n}\r\n#tbl tr:hover td{\r\n  background: #839192;\r\n  color: #000;\r\n  transition: all 0.3s ease-in;\r\n  cursor: pointer;\r\n}\r\n</style>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}