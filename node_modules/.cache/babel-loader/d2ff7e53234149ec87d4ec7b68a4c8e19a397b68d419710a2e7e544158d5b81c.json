{"ast":null,"code":"export default {\n  data() {\n    return {\n      goals: [],\n      workingHours: []\n    };\n  },\n  props: {\n    useDate: Object\n  },\n  created() {\n    this.addItem();\n  },\n  methods: {\n    addItem() {\n      // const newItem = {\n      //   date: this.useDate.presentDate,\n      //   signIn: this.useDate.presentTime,\n      //   signOut: \"\",\n      //   username: this.useDate.username,\n      // };\n      // this.goals.push(newItem);\n      console.log(this.useDate);\n    },\n    logout(goal) {\n      const logoutUser = this.goals.find(u => u === goal);\n      if (logoutUser) {\n        const currentDate = new Date();\n        logoutUser.signOut = currentDate.toLocaleTimeString();\n        this.calculateWorkingHours();\n      }\n    },\n    calculateWorkingHours() {\n      this.workingHours = this.goals.map(goal => ({\n        date: goal.date,\n        hours: this.calculate(goal.signIn, goal.signOut)\n      }));\n    },\n    calculate(signIn, signOut) {\n      if (signIn && signOut) {\n        const signInTime = new Date(`2000-01-01 ${signIn}`);\n        const signOutTime = new Date(`2000-01-01 ${signOut}`);\n        const timeDiff = signOutTime - signInTime;\n        const hours = Math.floor(timeDiff / (1000 * 60 * 60));\n        const minutes = Math.floor(timeDiff % (1000 * 60 * 60) / (1000 * 60));\n        return `${hours} hrs ${minutes} mins `;\n      } else {\n        return \"0\";\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","goals","workingHours","props","useDate","Object","created","addItem","methods","console","log","logout","goal","logoutUser","find","u","currentDate","Date","signOut","toLocaleTimeString","calculateWorkingHours","map","date","hours","calculate","signIn","signInTime","signOutTime","timeDiff","Math","floor","minutes"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- Display working hours table -->\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(workingHour, index) in workingHours\" :key=\"index\">\r\n          <td>{{ workingHour.date }}</td>\r\n          <td>{{ workingHour.hours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <!-- Display goals table -->\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>SignIn</th>\r\n          <th>SignOut</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(goal, index) in goals\" :key=\"index\">\r\n          <td>{{ goal.username }}</td>\r\n          <td>{{ goal.date }}</td>\r\n          <td>{{ goal.signIn }}</td>\r\n          <td>{{ goal.signOut }}</td>\r\n          <td><button @click=\"logout(goal)\">SignOut</button></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      goals: [],\r\n      workingHours: [],\r\n    };\r\n  },\r\n  props: {\r\n  \r\n    useDate: Object,\r\n  },\r\n  created() {\r\n    this.addItem();\r\n  },\r\n  methods: {\r\n    addItem() {\r\n      // const newItem = {\r\n      //   date: this.useDate.presentDate,\r\n      //   signIn: this.useDate.presentTime,\r\n      //   signOut: \"\",\r\n      //   username: this.useDate.username,\r\n      // };\r\n      // this.goals.push(newItem);\r\n      console.log(this.useDate)\r\n    },\r\n    logout(goal) {\r\n      const logoutUser = this.goals.find((u) => u === goal);\r\n      if (logoutUser) {\r\n        const currentDate = new Date();\r\n        logoutUser.signOut = currentDate.toLocaleTimeString();\r\n        this.calculateWorkingHours();\r\n      }\r\n    },\r\n    calculateWorkingHours() {\r\n      this.workingHours = this.goals.map((goal) => ({\r\n        date: goal.date,\r\n        hours: this.calculate(goal.signIn, goal.signOut),\r\n      }));\r\n    },\r\n    calculate(signIn, signOut) {\r\n      if (signIn && signOut) {\r\n        const signInTime = new Date(`2000-01-01 ${signIn}`);\r\n        const signOutTime = new Date(`2000-01-01 ${signOut}`);\r\n        const timeDiff = signOutTime - signInTime;\r\n        const hours = Math.floor(timeDiff / (1000 * 60 * 60));\r\n        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\r\n        return `${hours} hrs ${minutes} mins `;\r\n      } else {\r\n        return \"0\";\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<!-- <template>\r\n  <div>\r\n      <table class=\"table table-bordered\">\r\n          <thead>\r\n             <tr>\r\n               <th>Date</th>\r\n               <th>WorkingHours</th>\r\n              </tr>\r\n          </thead>\r\n              <tbody>\r\n                <tr v-for=\"(workingHour, index) in workingHours\" :key=\"index\">\r\n          <td>{{ workingHour.date }}</td>\r\n          <td>{{ workingHour.hours }}</td>\r\n        </tr>\r\n              </tbody>\r\n          </table>\r\n  </div>\r\n  <div>\r\n      <table  class=\"table table-bordered\">\r\n          <thead class=\"table-dark\">\r\n              <tr>\r\n              <th>Name</th>\r\n              <th>Date</th>\r\n              <th>SignIn</th>\r\n              <th>signOut</th>\r\n              <th>signOut</th>\r\n          </tr>\r\n          </thead>\r\n          <tbody>\r\n          <tr v-for=\"(goal, index) in goals\" :key=\"index\">\r\n            <td>{{ goal.username }}</td>\r\n            <td>{{ goal.date}}</td>\r\n            <td @click=\"selectDate(goal.date)\">{{ goal.date }}</td> \r\n            <td>{{ goal.signIn}}</td>\r\n            <td>{{goal.signOut}}</td>\r\n            <td><button @click=\"logout(goal)\">signOut</button></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      goals:[],\r\n      selectedDate: null,\r\n    workingHours:\"\",\r\n    };\r\n  },\r\n  props: [\"useData\"],\r\n  created(){\r\n    this.addItem(); \r\n},\r\nmethods:{\r\n  addItem(){\r\n    const newItem = {\r\n        date: this.useData.presentDate,\r\n        signIn: this.useData.presentTime,\r\n        signOut: \"\", \r\n        username: this.useDate.username,\r\n      };\r\n      this.goals.push(newItem);\r\n    console.log(this.useData)\r\n  },\r\nlogout() {\r\n    const logoutUser = this.goals.find((u) => u.username === this.goals.username);\r\n    if (logoutUser) {\r\n      const currentDate = new Date();\r\n      logoutUser.signOut = currentDate.toLocaleTimeString();\r\n      \r\n    }\r\n  }\r\n  }\r\n} -->\r\n\r\n<!-- \r\n\r\n// selectDate(date) {\r\n//     const selectedGoals = this.goals.filter((goal) => goal.date === date);\r\n//     this.workingHours = selectedGoals.map((goal) => ({\r\n//       date: goal.date,\r\n//       hours: this.calculate(goal.signIn, goal.signOut),\r\n//     }));\r\n//   },\r\n// //workingHours\r\n//   calculate(signIn, signOut) {\r\n//     if (signIn && signOut) {\r\n//       const signInTime = new Date(`2000-01-01 ${signIn}`);\r\n//       const signOutTime = new Date(`2000-01-01 ${signOut}`);\r\n//       const timeDiff = signOutTime - signInTime;\r\n//       const hours = Math.floor(timeDiff / (1000 * 60 * 60));\r\n//       const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\r\n//       return `${hours} hrs ${minutes} mins `;\r\n//     } else {\r\n//       return \"0\";\r\n//     }\r\n//   },\r\n// } -->\r\n\r\n<!-- </script>\r\n <template>\r\n  <div>\r\n    <table class=\"table table-bordered\">\r\n      <thead>\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Working Hours</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(workingHour, index) in workingHours\" :key=\"index\">\r\n          <td>{{ workingHour.date }}</td>\r\n          <td>{{ workingHour.hours }}</td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n\r\n    <table class=\"table table-bordered\">\r\n      <thead class=\"table-dark\">\r\n        <tr>\r\n          <th>Name</th>\r\n          <th>Date</th>\r\n          <th>SignIn</th>\r\n          <th>SignOut</th>\r\n          <th>Action</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-for=\"(goal, index) in goals\" :key=\"index\">\r\n          <td>{{ goal.username }}</td>\r\n          <td @click=\"selectDate(goal.date)\">{{ goal.date }}</td>\r\n          <td>{{ goal.signIn }}</td>\r\n          <td>{{ goal.signOut }}</td>\r\n          <td><button @click=\"logout(goal.username)\">SignOut</button></td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      goals: [], \r\n      selectedDate: null,\r\n      workingHours: \"\",\r\n    };\r\n  },\r\n  props: {\r\n    useDate: Object,\r\n  },\r\n  created() {\r\n    this.addItem();\r\n  },\r\n  methods: {\r\n    addItem() {\r\n      const newItem = {\r\n        date: this.useDate.presentDate,\r\n        signIn: this.useDate.presentTime,\r\n        signOut: \"\", \r\n        username: this.useDate.username,\r\n      };\r\n      this.goals.push(newItem);\r\n    },\r\n    logout(username) {\r\n      const logoutUser = this.goals.find((u) => u.username === username);\r\n      if (logoutUser) {\r\n        const currentDate = new Date();\r\n        logoutUser.signOut = currentDate.toLocaleTimeString();\r\n      }\r\n    },\r\n    selectDate(date) {\r\n      const selectedGoals = this.goals.filter((goal) => goal.date === date);\r\n      this.workingHours = selectedGoals.map((goal) => ({\r\n        date: goal.date,\r\n        hours: this.calculate(goal.signIn, goal.signOut),\r\n      }));\r\n    },\r\n    calculate(signIn, signOut) {\r\n      if (signIn && signOut) {\r\n      const signInTime = new Date(`2000-01-01 ${signIn}`);\r\n      const signOutTime = new Date(`2000-01-01 ${signOut}`);\r\n      const timeDiff = signOutTime - signInTime;\r\n      const hours = Math.floor(timeDiff / (1000 * 60 * 60));\r\n      const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));\r\n      return `${hours} hrs ${minutes} mins `;\r\n    } else {\r\n      return \"0\";\r\n    }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n -->\r\n <!-- <template>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      goals: [],\r\n      workingHours: [],\r\n    };\r\n  },\r\n  props: {\r\n    // The prop name should match what you use in the component\r\n    useDate: Object,\r\n  },\r\n  created() {\r\n    this.addItem();\r\n  },\r\n  methods: {\r\n    addItem() {\r\n      const newItem = {\r\n        date: this.useData.presentDate, // This should be this.useDate.presentDate\r\n        signIn: this.useData.presentTime, // This should be this.useDate.presentTime\r\n        signOut: \"\",\r\n        username: this.useData.username,\r\n      };\r\n      this.goals.push(newItem);\r\n    },\r\n    // ...\r\n  },\r\n};\r\n</script> -->\r\n"],"mappings":"AA2CA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,EAAE;MACTC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,KAAK,EAAE;IAELC,OAAO,EAAEC;EACX,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,OAAO,CAAC,CAAC;EAChB,CAAC;EACDC,OAAO,EAAE;IACPD,OAAOA,CAAA,EAAG;MACR;MACA;MACA;MACA;MACA;MACA;MACA;MACAE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACN,OAAO;IAC1B,CAAC;IACDO,MAAMA,CAACC,IAAI,EAAE;MACX,MAAMC,UAAS,GAAI,IAAI,CAACZ,KAAK,CAACa,IAAI,CAAEC,CAAC,IAAKA,CAAA,KAAMH,IAAI,CAAC;MACrD,IAAIC,UAAU,EAAE;QACd,MAAMG,WAAU,GAAI,IAAIC,IAAI,CAAC,CAAC;QAC9BJ,UAAU,CAACK,OAAM,GAAIF,WAAW,CAACG,kBAAkB,CAAC,CAAC;QACrD,IAAI,CAACC,qBAAqB,CAAC,CAAC;MAC9B;IACF,CAAC;IACDA,qBAAqBA,CAAA,EAAG;MACtB,IAAI,CAAClB,YAAW,GAAI,IAAI,CAACD,KAAK,CAACoB,GAAG,CAAET,IAAI,KAAM;QAC5CU,IAAI,EAAEV,IAAI,CAACU,IAAI;QACfC,KAAK,EAAE,IAAI,CAACC,SAAS,CAACZ,IAAI,CAACa,MAAM,EAAEb,IAAI,CAACM,OAAO;MACjD,CAAC,CAAC,CAAC;IACL,CAAC;IACDM,SAASA,CAACC,MAAM,EAAEP,OAAO,EAAE;MACzB,IAAIO,MAAK,IAAKP,OAAO,EAAE;QACrB,MAAMQ,UAAS,GAAI,IAAIT,IAAI,CAAE,cAAaQ,MAAO,EAAC,CAAC;QACnD,MAAME,WAAU,GAAI,IAAIV,IAAI,CAAE,cAAaC,OAAQ,EAAC,CAAC;QACrD,MAAMU,QAAO,GAAID,WAAU,GAAID,UAAU;QACzC,MAAMH,KAAI,GAAIM,IAAI,CAACC,KAAK,CAACF,QAAO,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;QACrD,MAAMG,OAAM,GAAIF,IAAI,CAACC,KAAK,CAAEF,QAAO,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;QACvE,OAAQ,GAAEL,KAAK,QAAQQ,OAAO,QAAQ;MACxC,OAAO;QACL,OAAO,GAAG;MACZ;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}