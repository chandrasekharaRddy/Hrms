{"ast":null,"code":"export default {\n  data() {\n    return {\n      workingHours: [],\n      goals: [],\n      filteredGoals: [],\n      selectedDate: null,\n      dateVisible: true,\n      user: {},\n      // Initialize user object\n      employeeData: {} // Initialize employeeData object\n    };\n  },\n  computed: {\n    userData() {\n      return this.$store.getters.user || {}; // Return empty object if user is undefined\n    },\n    employeeData() {\n      return this.$store.getters.employee || {}; // Return empty object if employeeData is undefined\n    }\n  },\n  watch: {\n    userData: {\n      handler(newValue) {\n        if (Array.isArray(newValue)) {\n          newValue.forEach(user => {\n            this.user.id = user.id;\n            this.user.name = user.name;\n            this.user.email = user.email;\n            this.user.role = user.role;\n          });\n        } else {\n          console.log('Error: Invalid user data format');\n        }\n      },\n      immediate: true\n    },\n    employeeData: {\n      handler(newValue) {\n        if (Array.isArray(newValue)) {\n          newValue.forEach(employeeData => {\n            this.employeeData.id = employeeData.id;\n            this.employeeData.name = employeeData.name;\n            // this.user.email = user.email;\n            // this.user.role = user.role;\n          });\n        } else {\n          console.log('Error: Invalid employee data format');\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    calculateWorkingHours(...timePairs) {\n      let totalHours = 0;\n      for (let i = 0; i < timePairs.length; i += 2) {\n        const inTime = new Date(`2000-01-01T${timePairs[i]}`);\n        const outTime = new Date(`2000-01-01T${timePairs[i + 1]}`);\n        const diff = outTime - inTime;\n        const hours = diff / (1000 * 60 * 60);\n        totalHours += hours;\n      }\n      return totalHours.toFixed(2);\n    },\n    getDate(date) {\n      if (this.selectedDate === date) {\n        this.selectedDate = null;\n      } else {\n        this.selectedDate = date;\n        this.filteredGoals = this.goals.filter(goal => goal.Date === date);\n        this.dateVisible = false;\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","workingHours","goals","filteredGoals","selectedDate","dateVisible","user","employeeData","computed","userData","$store","getters","employee","watch","handler","newValue","Array","isArray","forEach","id","name","email","role","console","log","immediate","methods","calculateWorkingHours","timePairs","totalHours","i","length","inTime","Date","outTime","diff","hours","toFixed","getDate","date","filter","goal"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\hrmsoutAttendenceLevel.vue"],"sourcesContent":["<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      workingHours: [],\r\n      goals: [],\r\n      filteredGoals: [],\r\n      selectedDate: null,\r\n      dateVisible: true,\r\n      user: {}, // Initialize user object\r\n      employeeData: {} // Initialize employeeData object\r\n    };\r\n  },\r\n  computed: {\r\n    userData() {\r\n      return this.$store.getters.user || {}; // Return empty object if user is undefined\r\n    },\r\n    employeeData() {\r\n      return this.$store.getters.employee || {}; // Return empty object if employeeData is undefined\r\n    }\r\n  },\r\n  watch: {\r\n    userData: {\r\n      handler(newValue) {\r\n        if (Array.isArray(newValue)) {\r\n          newValue.forEach(user => {\r\n            this.user.id = user.id;\r\n            this.user.name = user.name;\r\n            this.user.email = user.email;\r\n            this.user.role = user.role;\r\n          });\r\n\r\n        } else {\r\n          console.log('Error: Invalid user data format');\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n    employeeData: {\r\n      handler(newValue) {\r\n        if (Array.isArray(newValue)) {\r\n          newValue.forEach(employeeData => {\r\n            this.employeeData.id = employeeData.id;\r\n            this.employeeData.name = employeeData.name;\r\n            // this.user.email = user.email;\r\n            // this.user.role = user.role;\r\n          });\r\n\r\n        } else {\r\n          console.log('Error: Invalid employee data format');\r\n        }\r\n      },\r\n      immediate: true,\r\n    },\r\n  },\r\n  methods: {\r\n    calculateWorkingHours(...timePairs) {\r\n      let totalHours = 0;\r\n      for (let i = 0; i < timePairs.length; i += 2) {\r\n        const inTime = new Date(`2000-01-01T${timePairs[i]}`);\r\n        const outTime = new Date(`2000-01-01T${timePairs[i + 1]}`);\r\n        const diff = outTime - inTime;\r\n        const hours = diff / (1000 * 60 * 60);\r\n        totalHours += hours;\r\n      }\r\n      return totalHours.toFixed(2);\r\n    },\r\n    getDate(date) {\r\n      if (this.selectedDate === date) {\r\n        this.selectedDate = null; \r\n      } else {\r\n        this.selectedDate = date;\r\n        this.filteredGoals = this.goals.filter((goal) => goal.Date === date);\r\n        this.dateVisible = false;\r\n      }\r\n    },\r\n  }\r\n};\r\n</script>\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}