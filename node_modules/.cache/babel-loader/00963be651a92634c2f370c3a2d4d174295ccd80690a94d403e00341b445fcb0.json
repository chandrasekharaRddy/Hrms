{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { Chart, registerables } from 'chart.js';\nChart.register(...registerables);\nexport default {\n  data() {\n    return {\n      selectedDate: null,\n      employeeTable: true,\n      hours: true,\n      Search: \"\",\n      punchValues: {\n        Intime1: null,\n        Intime2: null,\n        Outtime1: null,\n        Outtime2: null,\n        Intime3: [],\n        Outtime3: []\n      },\n      chart: null,\n      chartData3: {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n        datasets: [{\n          label: 'earlyEntry',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'ontime',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'late',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'earlyleave',\n          data: [0, 0, 0, 0, 0, 0]\n        }, {\n          label: 'overtime',\n          data: [0, 0, 0, 0, 0, 0]\n        }]\n      },\n      chartOptions3: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          title: {\n            display: true,\n            text: 'Attendance'\n          }\n        },\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    };\n  },\n  created() {\n    this.initializePunchValues();\n  },\n  mounted() {\n    this.chartVersion = Chart.version;\n    this.renderChart();\n    const ctx = this.$refs.myChart.getContext('2d');\n    new Chart(ctx, {\n      type: 'bar',\n      data: this.chartData,\n      options: this.chartOptions,\n      plugins: [this.progressBarPlugin]\n    });\n  },\n  computed: {\n    userDetails() {\n      return this.$store.getters.getUserData && this.$store.getters.getUserData.length > 0 ? this.$store.state.userData[0] : null;\n    },\n    employeeList() {\n      if (this.$store.getters.getUserData && this.$store.getters.getUserData.length > 0) {\n        const userId = this.userDetails ? this.userDetails.userId : null;\n        if (userId) {\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\n            const key = employee.empId;\n            if (!acc[key]) {\n              acc[key] = {\n                empId: employee.empId,\n                empName: employee.empName,\n                empRole: employee.empRole,\n                attendances: []\n              };\n            }\n            acc[key].attendances.push(employee);\n            return acc;\n          }, {});\n          const uniqueEmployees = Object.values(groupedEmployees);\n          return uniqueEmployees;\n        }\n      }\n      return [];\n    },\n    workingHoursData() {\n      const attendanceDates = {};\n      const referenceDate = '01/01/2000';\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          const {\n            date,\n            inTime,\n            outTime\n          } = attendance;\n          if (!attendanceDates[date]) {\n            attendanceDates[date] = {\n              date: date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[date].Intime.push(inTime);\n          if (outTime) {\n            const intimeDate = new Date(`${referenceDate} ${inTime}`);\n            const outtimeDate = new Date(`${referenceDate} ${outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[date].totalDifference += diff;\n            attendanceDates[date].Outtime.push(outTime);\n          }\n        });\n      });\n      const result = Object.values(attendanceDates).map(dateInfo => {\n        const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n        const totalMinutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n        return {\n          date: dateInfo.date,\n          Intime: dateInfo.Intime,\n          Outtime: dateInfo.Outtime,\n          totalHours: totalHours,\n          totalMinutes: totalMinutes\n        };\n      }).filter(record => record.date.includes(this.Search));\n      return result;\n    },\n    averageHours() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / this.workingHoursData.length;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.workingHoursData.length;\n        console.log(totallength);\n        return `${averageHours} hrs ${averageMinutes} mins`;\n      }\n      return null;\n    },\n    avgcheckin() {\n      const attendanceDates = {};\n      const referenceDate = '01/01/2000';\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          const {\n            date,\n            inTime,\n            outTime\n          } = attendance;\n          if (!attendanceDates[date]) {\n            attendanceDates[date] = {\n              date: date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[date].Intime.push(inTime);\n          if (outTime) {\n            const intimeDate = new Date(`${referenceDate} ${inTime}`);\n            const outtimeDate = new Date(`${referenceDate} ${outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[date].totalDifference += diff;\n            attendanceDates[date].Outtime.push(outTime);\n          }\n        });\n      });\n      const totalSeconds = Object.values(attendanceDates).reduce((total, dateInfo) => {\n        return total + dateInfo.intime.reduce((acc, time) => {\n          const [hours, minutes, seconds] = time.split(':').map(Number);\n          return acc + hours * 3600 + minutes * 60 + seconds;\n        }, 0);\n      }, 0);\n      const averageSeconds = totalSeconds / Object.values(attendanceDates).reduce((count, dateInfo) => {\n        return count + dateInfo.intime.filter(time => time > '8:30:00' && time < '10:00:00').length;\n        ;\n      }, 0);\n      const hours = Math.floor(averageSeconds / 3600);\n      const minutes = Math.floor(averageSeconds % 3600 / 60);\n      const seconds = Math.floor(averageSeconds % 60);\n      const formattedAvgCheckinTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n      console.log(\"Average Check-in Time:\", formattedAvgCheckinTime);\n      const result = Object.values(attendanceDates).map(dateInfo => {\n        const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n        const totalMinutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n        return {\n          date: dateInfo.date,\n          Intime: dateInfo.Intime,\n          Outtime: dateInfo.Outtime,\n          totalHours: totalHours,\n          totalMinutes: totalMinutes\n        };\n      });\n      return result;\n    },\n    WeekHours() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes / 5;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.filteredWorkingHoursData.length;\n        console.log(totallength);\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\n      }\n      return null;\n    },\n    MonthHours() {\n      if (this.workingHoursData.length > 0) {\n        const totalHours = this.WorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\n        const totalMinutes = this.WorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\n        const totalInMinutes = totalHours * 60 + totalMinutes;\n        const averageInMinutes = totalInMinutes;\n        const averageHours = Math.floor(averageInMinutes / 60);\n        const averageMinutes = Math.floor(averageInMinutes % 60);\n        const totallength = this.filteredWorkingHoursData.length;\n        console.log(totallength);\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\n      }\n      return null;\n    },\n    chartData() {\n      return {\n        labels: ['Today', 'Week', 'Month', 'Overtime'],\n        datasets: [{\n          data: [18, 12, 6, 18],\n          backgroundColor: ['rgba(255, 26, 104, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)'],\n          borderColor: ['rgba(255, 26, 104, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)'],\n          borderWidth: 1,\n          borderSkipped: false,\n          borderRadius: 5,\n          barPercentage: 0.2,\n          categoryPercentage: 0.5\n        }]\n      };\n    },\n    getteam() {\n      return this.$store.getters.getTeamMembers;\n    },\n    chartOptions() {\n      return {\n        indexAxis: 'y',\n        plugins: {\n          legend: {\n            display: false\n          }\n        },\n        scales: {\n          x: {\n            grid: {\n              display: false\n            },\n            ticks: {\n              display: false\n            }\n          },\n          y: {\n            beginAtZero: true,\n            grid: {\n              display: false\n            },\n            ticks: {\n              display: false\n            }\n          }\n        }\n      };\n    },\n    progressBarPlugin() {\n      return {\n        beforeDatasetDraw(chart) {\n          const {\n            ctx,\n            chartArea: {\n              left,\n              right,\n              width,\n              height\n            },\n            scales: {\n              y\n            }\n          } = chart;\n          ctx.save();\n          const barHeight = height / y.ticks.length * chart.data.datasets[0].barPercentage * chart.data.datasets[0].categoryPercentage;\n          chart.data.datasets[0].data.forEach((dataPoint, index) => {\n            const fontSizeLabel = 15;\n            ctx.font = `${fontSizeLabel}px sans-serif`;\n            ctx.fillStyle = 'rgba(102, 102, 102, 1)';\n            ctx.textAlign = 'left';\n            ctx.textBaseline = 'middle';\n            ctx.fillText(chart.data.labels[index], left, y.getPixelForValue(index) - barHeight / 2 - 10);\n            const fontSizeDataPoint = 15;\n            ctx.font = `bold ${fontSizeDataPoint}px sans-serif`;\n            ctx.fillStyle = 'rgba(102, 102, 102, 1)';\n            ctx.textAlign = 'right';\n            ctx.textBaseline = 'middle';\n            ctx.fillText(dataPoint, right, y.getPixelForValue(index) - barHeight / 2 - 10);\n            const barWidth = width * (dataPoint / Math.max(...chart.data.datasets[0].data));\n            ctx.fillStyle = chart.data.datasets[0].borderColor[index];\n            ctx.fillRect(left, y.getPixelForValue(index) - barHeight / 2, barWidth, barHeight);\n          });\n          ctx.restore();\n        }\n      };\n    }\n  },\n  methods: {\n    initializePunchValues() {\n      if (this.workingHoursData.length > 0) {\n        const record = this.workingHoursData[0];\n        this.punchValues.Intime1 = record.Intime[0];\n        this.punchValues.Intime2 = record.Intime[1];\n        this.punchValues.Outtime1 = record.Outtime[0];\n        this.punchValues.Outtime2 = record.Outtime[1];\n        this.punchValues.Intime3 = record.Intime[2] || [];\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\n      }\n      this.updateEnteries();\n    },\n    getPunchDetails(record) {\n      this.punchValues.Intime1 = record.Intime[0];\n      this.punchValues.Intime2 = record.Intime[1];\n      this.punchValues.Outtime1 = record.Outtime[0];\n      this.punchValues.Outtime2 = record.Outtime[1];\n      this.punchValues.Intime3 = record.Intime[2] || [];\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\n    },\n    updateEnteries() {\n      const attendanceDates = {};\n      const referenceDate = '01/01/2000';\n      this.employeeList.forEach(employee => {\n        employee.attendances.forEach(attendance => {\n          const {\n            date,\n            inTime,\n            outTime\n          } = attendance;\n          if (!attendanceDates[date]) {\n            attendanceDates[date] = {\n              date: date,\n              Intime: [],\n              Outtime: [],\n              totalDifference: 0\n            };\n          }\n          attendanceDates[date].Intime.push(inTime);\n          if (outTime) {\n            const intimeDate = new Date(`${referenceDate} ${inTime}`);\n            const outtimeDate = new Date(`${referenceDate} ${outTime}`);\n            const diff = Math.abs(outtimeDate - intimeDate);\n            attendanceDates[date].totalDifference += diff;\n            attendanceDates[date].Outtime.push(outTime);\n          }\n        });\n      });\n      const marchpresentdays = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const date = new Date(dateInfo.date);\n        const month = date.getMonth();\n        if (month === 2) {\n          return count + 1;\n        }\n        return count;\n      }, 0);\n      console.log(\"🚀 ~ no of days present in MarchMonth:\", marchpresentdays);\n      const AprilPresentDays = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const date = new Date(dateInfo.date);\n        const month = date.getMonth();\n        if (month === 3) {\n          return count + 1;\n        }\n        return count;\n      }, 0);\n      console.log(\"🚀 ~ no of days present in April Month:\", AprilPresentDays);\n      const earlyentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\n        }\n        return count;\n      }, 0);\n      const ontime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n        }\n        return count;\n      }, 0);\n      const lateentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n        }\n        return count;\n      }, 0);\n      const overtime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n        }\n        return count;\n      }, 0);\n      const earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 2) {\n          return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n        }\n        return count;\n      }, 0);\n      // console.log(\"🚀 ~ early:\", earlyentry3);\n      // console.log(\"🚀 ~ ontime:\", ontime3);\n      // console.log(\"🚀 ~ lateentry:\", lateentry3);\n      // console.log(\"🚀 ~ overtime:\", overtime3);\n      // console.log(\"🚀 ~ earlyLeave:\", earlyLeave3);\n      this.chartData3.datasets[0].data[2] = earlyentry3;\n      this.chartData3.datasets[1].data[2] = ontime3;\n      this.chartData3.datasets[2].data[2] = lateentry3;\n      this.chartData3.datasets[3].data[2] = earlyLeave3;\n      this.chartData3.datasets[4].data[2] = overtime3;\n      const earlyentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 3) {\n          return count + dateInfo.Intime.filter(time => time < '09:00:00').length;\n        }\n        return count;\n      }, 0);\n      const ontime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 3) {\n          return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\n        }\n        return count;\n      }, 0);\n      const lateentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 3) {\n          return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\n        }\n        return count;\n      }, 0);\n      const overtime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 3) {\n          return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\n        }\n        return count;\n      }, 0);\n      const earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\n        const month = new Date(dateInfo.date).getMonth();\n        if (month === 4) {\n          return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\n        }\n        return count;\n      }, 0);\n      this.chartData3.datasets[0].data[3] = earlyentry4;\n      this.chartData3.datasets[1].data[3] = ontime4;\n      this.chartData3.datasets[2].data[3] = lateentry4;\n      this.chartData3.datasets[3].data[3] = earlyLeave4;\n      this.chartData3.datasets[4].data[3] = overtime4;\n      const result = Object.values(attendanceDates).map(dateInfo => {\n        const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\n        const totalMinutes = Math.floor(dateInfo.totalDifference % (1000 * 60 * 60) / (1000 * 60));\n        return {\n          date: dateInfo.date,\n          Intime: dateInfo.Intime,\n          Outtime: dateInfo.Outtime,\n          totalHours: totalHours,\n          totalMinutes: totalMinutes\n        };\n      });\n      return result;\n    },\n    renderChart() {\n      const ctx = this.$refs.myChart3.getContext('2d');\n      this.chart = new Chart(ctx, {\n        type: 'bar',\n        data: this.chartData3,\n        options: this.chartOptions3\n      });\n    }\n  }\n};","map":{"version":3,"names":["Chart","registerables","register","data","selectedDate","employeeTable","hours","Search","punchValues","Intime1","Intime2","Outtime1","Outtime2","Intime3","Outtime3","chart","chartData3","labels","datasets","label","chartOptions3","responsive","maintainAspectRatio","plugins","title","display","text","scales","y","beginAtZero","created","initializePunchValues","mounted","chartVersion","version","renderChart","ctx","$refs","myChart","getContext","type","chartData","options","chartOptions","progressBarPlugin","computed","userDetails","$store","getters","getUserData","length","state","userData","employeeList","userId","filteredEmployees","filter","employee","empId","groupedEmployees","reduce","acc","key","empName","empRole","attendances","push","uniqueEmployees","Object","values","workingHoursData","attendanceDates","referenceDate","forEach","attendance","date","inTime","outTime","Intime","Outtime","totalDifference","intimeDate","Date","outtimeDate","diff","Math","abs","result","map","dateInfo","totalHours","floor","totalMinutes","record","includes","averageHours","curr","totalInMinutes","averageInMinutes","averageMinutes","totallength","console","log","avgcheckin","totalSeconds","total","intime","time","minutes","seconds","split","Number","averageSeconds","count","formattedAvgCheckinTime","toString","padStart","WeekHours","filteredWorkingHoursData","MonthHours","WorkingHoursData","backgroundColor","borderColor","borderWidth","borderSkipped","borderRadius","barPercentage","categoryPercentage","getteam","getTeamMembers","indexAxis","legend","x","grid","ticks","beforeDatasetDraw","chartArea","left","right","width","height","save","barHeight","dataPoint","index","fontSizeLabel","font","fillStyle","textAlign","textBaseline","fillText","getPixelForValue","fontSizeDataPoint","barWidth","max","fillRect","restore","methods","updateEnteries","getPunchDetails","marchpresentdays","month","getMonth","AprilPresentDays","earlyentry3","ontime3","lateentry3","overtime3","earlyLeave3","earlyentry4","ontime4","lateentry4","overtime4","earlyLeave4","myChart3"],"sources":["C:\\Users\\IMPEGNOABS010\\Desktop\\HRMSROUT\\src\\components\\attendenceForm.vue"],"sourcesContent":["\r\n\r\n<template>\r\n  <div class=\"mainHeading\">\r\n    <p>HRMS- Human Resource Management System</p>\r\n  </div>\r\n  <div class=\"mainContainer\">\r\n    <div class=\"upperContainer\">\r\n      <div class=\"summmaryContainer\">\r\n        <h4 class=\"summaryHeading\">Summary:</h4>\r\n        <div class=\"upperValue\">\r\n          <div class=\"avgAttend\">\r\n            <i class='bx bxs-time attend'></i>\r\n            <h6 class=\"attendHeading\">Avg Hours</h6>\r\n            <div class=\"avgSummaryHrs\">{{ averageHours }}</div>\r\n            \r\n          </div>\r\n          <div class=\"avgCheckin\">\r\n            <i class='bx bxs-log-in-circle attend'></i>\r\n            <h6 class=\"attendHeading\">Avg Check-in</h6>\r\n          </div>\r\n        </div>\r\n        <div class=\"downvalue\">\r\n          <div class=\"avgOntime\">\r\n            <i class='bx bxs-time-five attend' ></i>\r\n            <h6 class=\"attendHeading\">On-time</h6>\r\n          </div>\r\n          <div class=\"avgCheckout\">\r\n            <i class='bx bxs-log-out-circle attend' ></i>\r\n            <h6 class=\"attendHeading\">Avg Check-out</h6>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"statisticsContainer\">\r\n        <h4 class=\"statisticsHeading\">Statistics:</h4>\r\n       <div class=\"statsticsbar\">\r\n    <canvas ref=\"myChart\"  class=\"bargraph2\"></canvas>\r\n  </div>\r\n      </div>\r\n      <div class=\"punchContainer\">\r\n        <h4 class=\"dateactivityHeading\">Date Activity:</h4>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Intime1 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{ punchValues.Outtime1 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime2 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime2 }}</p>\r\n        </div>\r\n        <div v-if=\"punchValues.Intime3 && punchValues.Intime3.length > 1\" >\r\n          <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch In At:</h4>\r\n          <p class=\"punchValues\">{{  punchValues.Intime3 }}</p>\r\n        </div>\r\n        <div class=\"insidepunchValues\">\r\n            <h4 class=\"punchheading\">Punch Out At:</h4>\r\n          <p class=\"punchValues\">{{punchValues.Outtime3 }}</p>\r\n        </div>\r\n          </div>\r\n      </div>\r\n    </div>\r\n    <div class=\"downContainer\">\r\n      <div class=\"attendanceTable\">\r\n        <div><input type=\"text\" placeholder=\"Search\" class=\"searchElement\" v-model=\"Search\"></div>\r\n      <div class=\"attendanceday\">\r\n        <table class=\"table table-bordered\">\r\n<thead>\r\n  <tr>\r\n    <th>Date</th>\r\n    <th>Intime</th>\r\n    <th>Outtime</th>\r\n    <th>WorkingHours</th>\r\n  </tr>\r\n</thead>\r\n<tbody>\r\n  <tr v-for=\"(record, index) in workingHoursData\" :key=\"index\" @click=\"getPunchDetails(record)\">\r\n              <td>{{ record.date }}</td>\r\n              <td>{{ record.Intime[0] }}</td>\r\n              <td>{{ record.Outtime[1] }}</td>\r\n              <td>{{ record.totalHours }} hrs {{ record.totalMinutes }} mins</td>\r\n            </tr>\r\n</tbody>\r\n      </table>\r\n      </div>\r\n    </div>\r\n    <div class=\"barDrawing\">\r\n      <div class=\"bargraph1\">\r\n      <canvas ref=\"myChart3\"></canvas>\r\n    </div>\r\n    </div>\r\n    </div>  \r\n</div>\r\n    <div class=\"sidebar\">\r\n      <div class=\"nav\">\r\n        <div class=\"menu\">\r\n          <ul>\r\n            <li>\r\n              <a href=\"#\">\r\n                <i class='bx bx-home'></i>\r\n                <span class=\"text\">Home</span>\r\n              </a>\r\n            </li>\r\n            <li class=\"active\">\r\n              <a href=\"#\">\r\n                <i class=\"fa-solid fa-users\"></i>\r\n                <RouterLink to=\"/members\" class=\"text\"> Team Members</RouterLink>\r\n              </a>\r\n            </li>\r\n            <li class=\"active\">\r\n              <a href=\"#\">\r\n                <i class='bx bxs-calendar'></i>\r\n              \r\n                <RouterLink to=\"/attendence\" class=\"text\">Attendence</RouterLink>\r\n              </a>\r\n            </li>\r\n            <li class=\"active\">\r\n              <a href=\"#\">\r\n                <i class='bx bxs-calendar'></i>\r\n              \r\n                <RouterLink to=\"/leaveMembers\" class=\"text\">Leave</RouterLink>\r\n              </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div class=\"menu\" id=\"logout\">\r\n          <ul>\r\n            <li>\r\n              <a href=\"#\">\r\n                <i class='bx bx-info-circle'></i>\r\n                <span class=\"text\">Help</span>\r\n              </a>\r\n            </li>\r\n            <li>\r\n              <a href=\"#\">\r\n                <i class='bx bx-log-out'></i>\r\n                <RouterLink to=\"/\" class=\"text\" @click=\"logout\"> Logout</RouterLink>\r\n              </a>\r\n            </li>\r\n            \r\n          </ul>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\n\r\nexport default {\r\n  data() {\r\n    return { \r\n      selectedDate: null,\r\n      employeeTable: true,\r\n      hours: true,\r\n      Search: \"\",\r\n      punchValues: {\r\n        Intime1: null,\r\n        Intime2: null,\r\n        Outtime1: null,\r\n        Outtime2: null,\r\n        Intime3: [],\r\n        Outtime3: []\r\n      },\r\n      chart: null, \r\n      chartData3: {\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June'],\r\n        datasets: [\r\n          {\r\n          label: 'earlyEntry',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'ontime',\r\n          data: [0,0,0,0,0,0]\r\n        },\r\n        {\r\n          label: 'late',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'earlyleave',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n        {\r\n          label: 'overtime',\r\n          data: [0,0,0,0,0,0],\r\n        },\r\n      ]\r\n      },\r\n      \r\n      chartOptions3: {\r\n         responsive: true,\r\n          maintainAspectRatio: false,\r\n        plugins: {\r\n          title: {\r\n            display: true,\r\n            text: 'Attendance'\r\n            \r\n          }\r\n        },\r\n        scales: {\r\n          y: {\r\n            beginAtZero: true,\r\n          }\r\n        }\r\n      }\r\n\r\n    };\r\n  },\r\n  created() {\r\n    this.initializePunchValues();\r\n  },\r\n  mounted() {\r\n    this.chartVersion = Chart.version;\r\n    this.renderChart();\r\n    const ctx = this.$refs.myChart.getContext('2d');\r\n    new Chart(ctx, {\r\n      type: 'bar',\r\n      data: this.chartData,\r\n      options: this.chartOptions,\r\n      plugins: [this.progressBarPlugin]\r\n    });\r\n  },\r\n  computed: {\r\n    userDetails() {\r\n      return this.$store.getters. getUserData && this.$store.getters.getUserData.length > 0\r\n        ? this.$store.state.userData[0]\r\n        : null;\r\n    },\r\n    employeeList() {\r\n      if (this.$store.getters. getUserData && this.$store.getters.getUserData.length > 0) {\r\n        const userId = this.userDetails ? this.userDetails.userId : null;\r\n        if (userId) {\r\n          const filteredEmployees = this.$store.state.userData.filter(employee => employee.empId === userId);\r\n          const groupedEmployees = filteredEmployees.reduce((acc, employee) => {\r\n            const key = employee.empId;\r\n            if (!acc[key]) {\r\n              acc[key] = {\r\n                empId: employee.empId,\r\n                empName: employee.empName,\r\n                empRole: employee.empRole,\r\n                attendances: []\r\n              };\r\n            }\r\n            acc[key].attendances.push(employee);\r\n            return acc;\r\n          }, {});\r\n          const uniqueEmployees = Object.values(groupedEmployees);\r\n          return uniqueEmployees;\r\n        }\r\n      }\r\n      return [];\r\n    },\r\n    workingHoursData() {\r\n  const attendanceDates = {};\r\n  const referenceDate = '01/01/2000';\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { date, inTime, outTime } = attendance;\r\n      if (!attendanceDates[date]) {\r\n        attendanceDates[date] = {\r\n          date: date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0,\r\n        };\r\n      }\r\n      attendanceDates[date].Intime.push(inTime);\r\n      if (outTime) {\r\n        const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n        const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[date].totalDifference += diff;\r\n        attendanceDates[date].Outtime.push(outTime);\r\n      }\r\n    });\r\n  });\r\n  const result = Object.values(attendanceDates).map(dateInfo => {\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n    return {\r\n      date: dateInfo.date,\r\n      Intime: dateInfo.Intime,\r\n      Outtime: dateInfo.Outtime,\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  }).filter(record => record.date.includes(this.Search));\r\n  return result;\r\n},\r\naverageHours() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / this.workingHoursData.length;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength=this.workingHoursData.length;\r\n        console.log(totallength);\r\n        return `${averageHours} hrs ${averageMinutes} mins`;\r\n       \r\n      }\r\n      return null;\r\n    },\r\n    avgcheckin(){\r\n      const attendanceDates = {};\r\n  const referenceDate = '01/01/2000';\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { date, inTime, outTime } = attendance;\r\n      if (!attendanceDates[date]) {\r\n        attendanceDates[date] = {\r\n          date: date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0,\r\n        };\r\n      }\r\n      attendanceDates[date].Intime.push(inTime);\r\n      if (outTime) {\r\n        const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n        const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[date].totalDifference += diff;\r\n        attendanceDates[date].Outtime.push(outTime);\r\n      }\r\n    });\r\n  });\r\n\r\n  const totalSeconds = Object.values(attendanceDates).reduce((total, dateInfo) => {\r\n  return total + dateInfo.intime.reduce((acc, time) => {\r\n    const [hours, minutes, seconds] = time.split(':').map(Number);\r\n    return acc + (hours * 3600) + (minutes * 60) + seconds;\r\n  }, 0);\r\n}, 0);\r\n\r\n\r\nconst averageSeconds = totalSeconds / Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  return count + dateInfo.intime.filter(time => time > '8:30:00' && time < '10:00:00').length;;\r\n}, 0);\r\nconst hours = Math.floor(averageSeconds / 3600);\r\nconst minutes = Math.floor((averageSeconds % 3600) / 60);\r\nconst seconds = Math.floor(averageSeconds % 60);\r\nconst formattedAvgCheckinTime = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\r\n\r\nconsole.log(\"Average Check-in Time:\", formattedAvgCheckinTime);\r\n\r\n  const result = Object.values(attendanceDates).map(dateInfo => {\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n    return {\r\n      date: dateInfo.date,\r\n      Intime: dateInfo.Intime,\r\n      Outtime: dateInfo.Outtime,\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  })\r\n  return result;\r\n},\r\n\r\nWeekHours() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.workingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.workingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes / 5;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.filteredWorkingHoursData.length;\r\n         console.log(totallength);\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n      }\r\n      return null;\r\n    },\r\n    MonthHours() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const totalHours = this.WorkingHoursData.reduce((acc, curr) => acc + curr.totalHours, 0);\r\n        const totalMinutes = this.WorkingHoursData.reduce((acc, curr) => acc + curr.totalMinutes, 0);\r\n        const totalInMinutes = totalHours * 60 + totalMinutes;\r\n        const averageInMinutes = totalInMinutes;\r\n        const averageHours = Math.floor(averageInMinutes / 60);\r\n        const averageMinutes = Math.floor(averageInMinutes % 60);\r\n        const totallength = this.filteredWorkingHoursData.length;\r\n         console.log(totallength);\r\n        return `${averageHours} Hrs ${averageMinutes} Mins`;\r\n\r\n      }\r\n      return null;\r\n    },\r\n    chartData() {\r\n      return {\r\n        labels: ['Today', 'Week', 'Month', 'Overtime'],\r\n        datasets: [{\r\n          data: [18, 12, 6, 18],\r\n          backgroundColor: [\r\n            'rgba(255, 26, 104, 0.2)',\r\n            'rgba(54, 162, 235, 0.2)',\r\n            'rgba(255, 206, 86, 0.2)',\r\n            'rgba(75, 192, 192, 0.2)',\r\n          ],\r\n          borderColor: [\r\n            'rgba(255, 26, 104, 1)',\r\n            'rgba(54, 162, 235, 1)',\r\n            'rgba(255, 206, 86, 1)',\r\n            'rgba(75, 192, 192, 1)',\r\n          ],\r\n          borderWidth: 1,\r\n          borderSkipped: false,\r\n          borderRadius: 5,\r\n          barPercentage: 0.2,\r\n          categoryPercentage: 0.5,\r\n        }]\r\n      };\r\n    },\r\n    getteam() {\r\n      return this.$store.getters.getTeamMembers;\r\n    },\r\n    chartOptions() {\r\n      return {\r\n        indexAxis: 'y',\r\n        plugins: {\r\n          legend: { display: false }\r\n        },\r\n        scales: {\r\n          x: { grid: { display: false }, ticks: { display: false } },\r\n          y: { beginAtZero: true, grid: { display: false }, ticks: { display: false } }\r\n        }\r\n      };\r\n    },\r\n    progressBarPlugin() {\r\n      return {\r\n        beforeDatasetDraw(chart) {\r\n          const { ctx, chartArea: { left, right, width, height }, scales: { y } } = chart;\r\n          ctx.save();\r\n          const barHeight = height / y.ticks.length * chart.data.datasets[0].barPercentage * chart.data.datasets[0].categoryPercentage;\r\n          chart.data.datasets[0].data.forEach((dataPoint, index) => {\r\n            const fontSizeLabel = 15;\r\n            ctx.font = `${fontSizeLabel}px sans-serif`;\r\n            ctx.fillStyle = 'rgba(102, 102, 102, 1)';\r\n            ctx.textAlign = 'left';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillText(chart.data.labels[index], left, y.getPixelForValue(index) - barHeight / 2 - 10);\r\n\r\n            const fontSizeDataPoint = 15;\r\n            ctx.font = `bold ${fontSizeDataPoint}px sans-serif`;\r\n            ctx.fillStyle = 'rgba(102, 102, 102, 1)';\r\n            ctx.textAlign = 'right';\r\n            ctx.textBaseline = 'middle';\r\n            ctx.fillText(dataPoint, right, y.getPixelForValue(index) - barHeight / 2 - 10);\r\n\r\n            const barWidth = width * (dataPoint / Math.max(...chart.data.datasets[0].data));\r\n            ctx.fillStyle = chart.data.datasets[0].borderColor[index];\r\n            ctx.fillRect(left, y.getPixelForValue(index) - (barHeight / 2), barWidth, barHeight);\r\n          });\r\n\r\n          ctx.restore();\r\n        }\r\n      };\r\n    }\r\n  },\r\n  methods:{\r\n    initializePunchValues() {\r\n      if (this.workingHoursData.length > 0) {\r\n        const record = this.workingHoursData[0];\r\n        this.punchValues.Intime1 = record.Intime[0];\r\n        this.punchValues.Intime2 = record.Intime[1];\r\n        this.punchValues.Outtime1 = record.Outtime[0];\r\n        this.punchValues.Outtime2 = record.Outtime[1];\r\n        this.punchValues.Intime3 = record.Intime[2] || [];\r\n        this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n      }\r\n      this.updateEnteries();\r\n    },\r\n    getPunchDetails(record) {\r\n      this.punchValues.Intime1 = record.Intime[0];\r\n      this.punchValues.Intime2 = record.Intime[1];\r\n      this.punchValues.Outtime1 = record.Outtime[0];\r\n      this.punchValues.Outtime2 = record.Outtime[1];\r\n      this.punchValues.Intime3 = record.Intime[2] || [];\r\n      this.punchValues.Outtime3 = record.Outtime[2] || [];\r\n    },\r\n    updateEnteries(){\r\n      const attendanceDates = {};\r\n  const referenceDate = '01/01/2000';\r\n  this.employeeList.forEach(employee => {\r\n    employee.attendances.forEach(attendance => {\r\n      const { date, inTime, outTime } = attendance;\r\n      if (!attendanceDates[date]) {\r\n        attendanceDates[date] = {\r\n          date: date,\r\n          Intime: [],\r\n          Outtime: [],\r\n          totalDifference: 0,\r\n        };\r\n      }\r\n      attendanceDates[date].Intime.push(inTime);\r\n      if (outTime) {\r\n        const intimeDate = new Date(`${referenceDate} ${inTime}`);\r\n        const outtimeDate = new Date(`${referenceDate} ${outTime}`);\r\n        const diff = Math.abs(outtimeDate - intimeDate);\r\n        attendanceDates[date].totalDifference += diff;\r\n        attendanceDates[date].Outtime.push(outTime);\r\n      }\r\n    });\r\n  });\r\n  const  marchpresentdays= Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const date = new Date(dateInfo.date);\r\n  const month = date.getMonth();\r\n  if (month === 2) {\r\n    return count + 1; \r\n  }\r\n  return count;\r\n}, 0);\r\nconsole.log(\"🚀 ~ no of days present in MarchMonth:\", marchpresentdays);\r\nconst  AprilPresentDays= Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const date = new Date(dateInfo.date);\r\n  const month = date.getMonth();\r\n  if (month === 3) {\r\n    return count + 1; \r\n  }\r\n  return count;\r\n}, 0);\r\n\r\nconsole.log(\"🚀 ~ no of days present in April Month:\", AprilPresentDays);\r\n  const earlyentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n      const month = new Date(dateInfo.date).getMonth();\r\n      if (month === 2) {\r\n        return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\r\n        \r\n      }\r\n      return count;\r\n    }, 0);\r\n  const ontime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const lateentry3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const overtime3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 2) {\r\n    return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconst earlyLeave3 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const month = new Date(dateInfo.date).getMonth();\r\n  if (month === 2) {\r\n  return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n  }\r\n  return count;\r\n}, 0);\r\n  // console.log(\"🚀 ~ early:\", earlyentry3);\r\n  // console.log(\"🚀 ~ ontime:\", ontime3);\r\n  // console.log(\"🚀 ~ lateentry:\", lateentry3);\r\n  // console.log(\"🚀 ~ overtime:\", overtime3);\r\n  // console.log(\"🚀 ~ earlyLeave:\", earlyLeave3);\r\n  this.chartData3.datasets[0].data[2] = earlyentry3;\r\n      this.chartData3.datasets[1].data[2] = ontime3;\r\n      this.chartData3.datasets[2].data[2] = lateentry3;\r\n      this.chartData3.datasets[3].data[2] = earlyLeave3;\r\n      this.chartData3.datasets[4].data[2] = overtime3;\r\n\r\n     \r\n  \r\n  const earlyentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n      const month = new Date(dateInfo.date).getMonth();\r\n      if (month === 3) {\r\n        return count + dateInfo.Intime.filter(time => time <'09:00:00').length;\r\n      }\r\n      return count;\r\n    }, 0);\r\n  const ontime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Intime.filter(time => time === '09:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const lateentry4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Intime.filter(time => time > '09:00:00' && time < '12:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\n  const overtime4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n    const month = new Date(dateInfo.date).getMonth();\r\n    if (month === 3) {\r\n    return count + dateInfo.Outtime.filter(time => time > '18:00:00').length;\r\n    }\r\n    return count;\r\n  }, 0);\r\nconst earlyLeave4 = Object.values(attendanceDates).reduce((count, dateInfo) => {\r\n  const month = new Date(dateInfo.date).getMonth();\r\n  if (month === 4) {\r\n  return count + dateInfo.Outtime.filter(time => time > '15:30:00' && time < '18:00:00').length;\r\n  }\r\n  return count;\r\n}, 0);\r\n  \r\n  this.chartData3.datasets[0].data[3] = earlyentry4;\r\n      this.chartData3.datasets[1].data[3] = ontime4;\r\n      this.chartData3.datasets[2].data[3] = lateentry4;\r\n      this.chartData3.datasets[3].data[3] = earlyLeave4;\r\n      this.chartData3.datasets[4].data[3] = overtime4;\r\n\r\n  const result = Object.values(attendanceDates).map(dateInfo => {\r\n    const totalHours = Math.floor(dateInfo.totalDifference / (1000 * 60 * 60));\r\n    const totalMinutes = Math.floor((dateInfo.totalDifference % (1000 * 60 * 60)) / (1000 * 60));\r\n    return {\r\n      date: dateInfo.date,\r\n      Intime: dateInfo.Intime,\r\n      Outtime: dateInfo.Outtime,\r\n      totalHours: totalHours,\r\n      totalMinutes: totalMinutes\r\n    };\r\n  })\r\n  return result;\r\n},\r\n\r\n    renderChart() {\r\n      const ctx = this.$refs.myChart3.getContext('2d');\r\n      this.chart = new Chart(ctx, {\r\n        type: 'bar',\r\n        data: this.chartData3,\r\n        options: this.chartOptions3\r\n      });\r\n    },\r\n  \r\n  }\r\n};\r\n\r\n</script>\r\n<style>\r\n.upperContainer{\r\n  display: flex;\r\n}\r\n.summmaryContainer{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 400px;\r\n  height: 370px;\r\n  margin-top: 20px;\r\n  margin-left:1%;\r\n}\r\n.statisticsContainer{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 400px;\r\n  height: 370px;\r\n  margin-top: 20px;\r\n  margin-left:2%;\r\n}\r\n.punchContainer{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 400px;\r\n  height: 370px;\r\n  margin-top: 20px;\r\n  margin-left:2%;\r\n}\r\n.downContainer{\r\n  display: flex;\r\n}\r\n.searchElement {\r\n  border-radius: 5px;\r\n  margin-top: 5px;\r\n  margin-left: 10px;\r\n  height: 35px;\r\n  font-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\r\n  font-size: 20px;\r\n  width: 180px;\r\n  padding-left: 4px;\r\n}\r\n.attendanceTable{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 830px;\r\n  height: 300px;\r\n  margin-top: 20px;\r\n  margin-left: 1%;\r\n  overflow: scroll;\r\n  overflow-x: hidden;\r\n}\r\n.barDrawing{\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  width: 380px;\r\n  height: 300px;\r\n  margin-top: 20px;\r\n  margin-left:2%;\r\n}\r\n.bargraph1{\r\n  width: 350px;\r\n  height: 300px;\r\n}\r\n.downvalue,.upperValue{\r\n  display: flex;\r\n}\r\n.avgAttend{\r\n  border: 1px solid;\r\n  width: 120px;\r\n  height: 110px;\r\n  margin-top: 25px;\r\n  margin-left: 14%;\r\n  border-radius: 5px;\r\n}\r\n.avgCheckin{\r\n  border: 1px solid;\r\n  width: 120px;\r\n  height: 110px;\r\n  margin-top: 25px;\r\n  margin-left: 10%;\r\n  border-radius: 5px;\r\n}\r\n.avgOntime{\r\n  border: 1px solid;\r\n  width: 120px;\r\n  height: 120px;\r\n  margin-top: 30px;\r\n  margin-left: 14%;\r\n  border-radius: 5px;\r\n}\r\n.avgCheckout{\r\n  border: 1px solid;\r\n  width: 120px;\r\n  height: 120px;\r\n  margin-top: 30px;\r\n  margin-left: 10%;\r\n  border-radius: 5px;\r\n}\r\n.attend{\r\n  font-size: 30px;\r\n  margin-top: 15px;\r\n  margin-left: 20px;\r\n}\r\n.attendHeading{\r\n  margin-left: 13%;\r\n  font-size: 13px;\r\n  font-family:'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\r\n}\r\n.summaryHeading{\r\n  color:rgb(21, 126, 196);\r\n  margin-left: 5%;\r\n  margin-top: 5%;\r\n}\r\n.statisticsHeading{\r\n  color:rgb(21, 126, 196);\r\n  margin-left: 5%;\r\n  margin-top: 5%;\r\n}\r\n.dateactivityHeading{\r\n  color:rgb(21, 126, 196);\r\n  margin-left: 5%;\r\n  margin-top: 5%;\r\n}\r\n.insidepunchValues{\r\n  display: flex;\r\n  margin-left: 70px;\r\n  margin-top: 20px;\r\n}\r\n.attendanceday{\r\n  margin-top: 20px;\r\n  margin-left: 1px;\r\n  margin-right: 1px;\r\n}\r\n.attendanceday table th{\r\n font-family:'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial, sans-serif;\r\n background-color:azure;\r\n}\r\n.bargraph2{\r\n  width: 400px;\r\n  height: 400px;\r\n}\r\n.statsticsbar{\r\n  height: 500px;\r\n  width: 380px;\r\n}\r\n.avgSummaryHrs{\r\n  padding-left: 10px;\r\n}\r\n</style> \r\n\r\n"],"mappings":";AAyJA,SAASA,KAAK,EAAEC,aAAY,QAAS,UAAU;AAC/CD,KAAK,CAACE,QAAQ,CAAC,GAAGD,aAAa,CAAC;AAEhC,eAAe;EACbE,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,IAAI;MAClBC,aAAa,EAAE,IAAI;MACnBC,KAAK,EAAE,IAAI;MACXC,MAAM,EAAE,EAAE;MACVC,WAAW,EAAE;QACXC,OAAO,EAAE,IAAI;QACbC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE,IAAI;QACdC,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAE,EAAE;QACXC,QAAQ,EAAE;MACZ,CAAC;MACDC,KAAK,EAAE,IAAI;MACXC,UAAU,EAAE;QACVC,MAAM,EAAE,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC;QAChEC,QAAQ,EAAE,CACR;UACAC,KAAK,EAAE,YAAY;UACnBhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC,EACD;UACEgB,KAAK,EAAE,QAAQ;UACfhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC,EACD;UACEgB,KAAK,EAAE,MAAM;UACbhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC,EACD;UACEgB,KAAK,EAAE,YAAY;UACnBhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC,EACD;UACEgB,KAAK,EAAE,UAAU;UACjBhB,IAAI,EAAE,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC,EAAC,CAAC;QACpB,CAAC;MAEH,CAAC;MAEDiB,aAAa,EAAE;QACZC,UAAU,EAAE,IAAI;QACfC,mBAAmB,EAAE,KAAK;QAC5BC,OAAO,EAAE;UACPC,KAAK,EAAE;YACLC,OAAO,EAAE,IAAI;YACbC,IAAI,EAAE;UAER;QACF,CAAC;QACDC,MAAM,EAAE;UACNC,CAAC,EAAE;YACDC,WAAW,EAAE;UACf;QACF;MACF;IAEF,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,qBAAqB,CAAC,CAAC;EAC9B,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,YAAW,GAAIjC,KAAK,CAACkC,OAAO;IACjC,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,MAAMC,GAAE,GAAI,IAAI,CAACC,KAAK,CAACC,OAAO,CAACC,UAAU,CAAC,IAAI,CAAC;IAC/C,IAAIvC,KAAK,CAACoC,GAAG,EAAE;MACbI,IAAI,EAAE,KAAK;MACXrC,IAAI,EAAE,IAAI,CAACsC,SAAS;MACpBC,OAAO,EAAE,IAAI,CAACC,YAAY;MAC1BpB,OAAO,EAAE,CAAC,IAAI,CAACqB,iBAAiB;IAClC,CAAC,CAAC;EACJ,CAAC;EACDC,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACC,MAAM,CAACC,OAAO,CAAEC,WAAU,IAAK,IAAI,CAACF,MAAM,CAACC,OAAO,CAACC,WAAW,CAACC,MAAK,GAAI,IAChF,IAAI,CAACH,MAAM,CAACI,KAAK,CAACC,QAAQ,CAAC,CAAC,IAC5B,IAAI;IACV,CAAC;IACDC,YAAYA,CAAA,EAAG;MACb,IAAI,IAAI,CAACN,MAAM,CAACC,OAAO,CAAEC,WAAU,IAAK,IAAI,CAACF,MAAM,CAACC,OAAO,CAACC,WAAW,CAACC,MAAK,GAAI,CAAC,EAAE;QAClF,MAAMI,MAAK,GAAI,IAAI,CAACR,WAAU,GAAI,IAAI,CAACA,WAAW,CAACQ,MAAK,GAAI,IAAI;QAChE,IAAIA,MAAM,EAAE;UACV,MAAMC,iBAAgB,GAAI,IAAI,CAACR,MAAM,CAACI,KAAK,CAACC,QAAQ,CAACI,MAAM,CAACC,QAAO,IAAKA,QAAQ,CAACC,KAAI,KAAMJ,MAAM,CAAC;UAClG,MAAMK,gBAAe,GAAIJ,iBAAiB,CAACK,MAAM,CAAC,CAACC,GAAG,EAAEJ,QAAQ,KAAK;YACnE,MAAMK,GAAE,GAAIL,QAAQ,CAACC,KAAK;YAC1B,IAAI,CAACG,GAAG,CAACC,GAAG,CAAC,EAAE;cACbD,GAAG,CAACC,GAAG,IAAI;gBACTJ,KAAK,EAAED,QAAQ,CAACC,KAAK;gBACrBK,OAAO,EAAEN,QAAQ,CAACM,OAAO;gBACzBC,OAAO,EAAEP,QAAQ,CAACO,OAAO;gBACzBC,WAAW,EAAE;cACf,CAAC;YACH;YACAJ,GAAG,CAACC,GAAG,CAAC,CAACG,WAAW,CAACC,IAAI,CAACT,QAAQ,CAAC;YACnC,OAAOI,GAAG;UACZ,CAAC,EAAE,CAAC,CAAC,CAAC;UACN,MAAMM,eAAc,GAAIC,MAAM,CAACC,MAAM,CAACV,gBAAgB,CAAC;UACvD,OAAOQ,eAAe;QACxB;MACF;MACA,OAAO,EAAE;IACX,CAAC;IACDG,gBAAgBA,CAAA,EAAG;MACrB,MAAMC,eAAc,GAAI,CAAC,CAAC;MAC1B,MAAMC,aAAY,GAAI,YAAY;MAClC,IAAI,CAACnB,YAAY,CAACoB,OAAO,CAAChB,QAAO,IAAK;QACpCA,QAAQ,CAACQ,WAAW,CAACQ,OAAO,CAACC,UAAS,IAAK;UACzC,MAAM;YAAEC,IAAI;YAAEC,MAAM;YAAEC;UAAQ,IAAIH,UAAU;UAC5C,IAAI,CAACH,eAAe,CAACI,IAAI,CAAC,EAAE;YAC1BJ,eAAe,CAACI,IAAI,IAAI;cACtBA,IAAI,EAAEA,IAAI;cACVG,MAAM,EAAE,EAAE;cACVC,OAAO,EAAE,EAAE;cACXC,eAAe,EAAE;YACnB,CAAC;UACH;UACAT,eAAe,CAACI,IAAI,CAAC,CAACG,MAAM,CAACZ,IAAI,CAACU,MAAM,CAAC;UACzC,IAAIC,OAAO,EAAE;YACX,MAAMI,UAAS,GAAI,IAAIC,IAAI,CAAE,GAAEV,aAAa,IAAII,MAAO,EAAC,CAAC;YACzD,MAAMO,WAAU,GAAI,IAAID,IAAI,CAAE,GAAEV,aAAa,IAAIK,OAAQ,EAAC,CAAC;YAC3D,MAAMO,IAAG,GAAIC,IAAI,CAACC,GAAG,CAACH,WAAU,GAAIF,UAAU,CAAC;YAC/CV,eAAe,CAACI,IAAI,CAAC,CAACK,eAAc,IAAKI,IAAI;YAC7Cb,eAAe,CAACI,IAAI,CAAC,CAACI,OAAO,CAACb,IAAI,CAACW,OAAO,CAAC;UAC7C;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,MAAMU,MAAK,GAAInB,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACiB,GAAG,CAACC,QAAO,IAAK;QAC5D,MAAMC,UAAS,GAAIL,IAAI,CAACM,KAAK,CAACF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;QAC1E,MAAMY,YAAW,GAAIP,IAAI,CAACM,KAAK,CAAEF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;QAC5F,OAAO;UACLL,IAAI,EAAEc,QAAQ,CAACd,IAAI;UACnBG,MAAM,EAAEW,QAAQ,CAACX,MAAM;UACvBC,OAAO,EAAEU,QAAQ,CAACV,OAAO;UACzBW,UAAU,EAAEA,UAAU;UACtBE,YAAY,EAAEA;QAChB,CAAC;MACH,CAAC,CAAC,CAACpC,MAAM,CAACqC,MAAK,IAAKA,MAAM,CAAClB,IAAI,CAACmB,QAAQ,CAAC,IAAI,CAACvF,MAAM,CAAC,CAAC;MACtD,OAAOgF,MAAM;IACf,CAAC;IACDQ,YAAYA,CAAA,EAAG;MACT,IAAI,IAAI,CAACzB,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACpB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAACtB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAa,GAAI,IAAI,CAAC3B,gBAAgB,CAACpB,MAAM;QACtE,MAAM6C,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAW,GAAC,IAAI,CAAC9B,gBAAgB,CAACpB,MAAM;QAC9CmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACxB,OAAQ,GAAEL,YAAY,QAAQI,cAAc,OAAO;MAErD;MACA,OAAO,IAAI;IACb,CAAC;IACDI,UAAUA,CAAA,EAAE;MACV,MAAMhC,eAAc,GAAI,CAAC,CAAC;MAC9B,MAAMC,aAAY,GAAI,YAAY;MAClC,IAAI,CAACnB,YAAY,CAACoB,OAAO,CAAChB,QAAO,IAAK;QACpCA,QAAQ,CAACQ,WAAW,CAACQ,OAAO,CAACC,UAAS,IAAK;UACzC,MAAM;YAAEC,IAAI;YAAEC,MAAM;YAAEC;UAAQ,IAAIH,UAAU;UAC5C,IAAI,CAACH,eAAe,CAACI,IAAI,CAAC,EAAE;YAC1BJ,eAAe,CAACI,IAAI,IAAI;cACtBA,IAAI,EAAEA,IAAI;cACVG,MAAM,EAAE,EAAE;cACVC,OAAO,EAAE,EAAE;cACXC,eAAe,EAAE;YACnB,CAAC;UACH;UACAT,eAAe,CAACI,IAAI,CAAC,CAACG,MAAM,CAACZ,IAAI,CAACU,MAAM,CAAC;UACzC,IAAIC,OAAO,EAAE;YACX,MAAMI,UAAS,GAAI,IAAIC,IAAI,CAAE,GAAEV,aAAa,IAAII,MAAO,EAAC,CAAC;YACzD,MAAMO,WAAU,GAAI,IAAID,IAAI,CAAE,GAAEV,aAAa,IAAIK,OAAQ,EAAC,CAAC;YAC3D,MAAMO,IAAG,GAAIC,IAAI,CAACC,GAAG,CAACH,WAAU,GAAIF,UAAU,CAAC;YAC/CV,eAAe,CAACI,IAAI,CAAC,CAACK,eAAc,IAAKI,IAAI;YAC7Cb,eAAe,CAACI,IAAI,CAAC,CAACI,OAAO,CAACb,IAAI,CAACW,OAAO,CAAC;UAC7C;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,MAAM2B,YAAW,GAAIpC,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAAC6C,KAAK,EAAEhB,QAAQ,KAAK;QAChF,OAAOgB,KAAI,GAAIhB,QAAQ,CAACiB,MAAM,CAAC9C,MAAM,CAAC,CAACC,GAAG,EAAE8C,IAAI,KAAK;UACnD,MAAM,CAACrG,KAAK,EAAEsG,OAAO,EAAEC,OAAO,IAAIF,IAAI,CAACG,KAAK,CAAC,GAAG,CAAC,CAACtB,GAAG,CAACuB,MAAM,CAAC;UAC7D,OAAOlD,GAAE,GAAKvD,KAAI,GAAI,IAAI,GAAKsG,OAAM,GAAI,EAAE,GAAIC,OAAO;QACxD,CAAC,EAAE,CAAC,CAAC;MACP,CAAC,EAAE,CAAC,CAAC;MAGL,MAAMG,cAAa,GAAIR,YAAW,GAAIpC,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC/F,OAAOwB,KAAI,GAAIxB,QAAQ,CAACiB,MAAM,CAAClD,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAI,SAAQ,IAAKA,IAAG,GAAI,UAAU,CAAC,CAACzD,MAAM;QAAC;MAC9F,CAAC,EAAE,CAAC,CAAC;MACL,MAAM5C,KAAI,GAAI+E,IAAI,CAACM,KAAK,CAACqB,cAAa,GAAI,IAAI,CAAC;MAC/C,MAAMJ,OAAM,GAAIvB,IAAI,CAACM,KAAK,CAAEqB,cAAa,GAAI,IAAI,GAAI,EAAE,CAAC;MACxD,MAAMH,OAAM,GAAIxB,IAAI,CAACM,KAAK,CAACqB,cAAa,GAAI,EAAE,CAAC;MAC/C,MAAME,uBAAsB,GAAK,GAAE5G,KAAK,CAAC6G,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGR,OAAO,CAACO,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGP,OAAO,CAACM,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAEpJf,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEY,uBAAuB,CAAC;MAE5D,MAAM3B,MAAK,GAAInB,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACiB,GAAG,CAACC,QAAO,IAAK;QAC5D,MAAMC,UAAS,GAAIL,IAAI,CAACM,KAAK,CAACF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;QAC1E,MAAMY,YAAW,GAAIP,IAAI,CAACM,KAAK,CAAEF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;QAC5F,OAAO;UACLL,IAAI,EAAEc,QAAQ,CAACd,IAAI;UACnBG,MAAM,EAAEW,QAAQ,CAACX,MAAM;UACvBC,OAAO,EAAEU,QAAQ,CAACV,OAAO;UACzBW,UAAU,EAAEA,UAAU;UACtBE,YAAY,EAAEA;QAChB,CAAC;MACH,CAAC;MACD,OAAOL,MAAM;IACf,CAAC;IAED8B,SAASA,CAAA,EAAG;MACN,IAAI,IAAI,CAAC/C,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAACpB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAACtB,gBAAgB,CAACV,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAa,GAAI,CAAC;QAC3C,MAAMF,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAU,GAAI,IAAI,CAACkB,wBAAwB,CAACpE,MAAM;QACvDmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACzB,OAAQ,GAAEL,YAAY,QAAQI,cAAc,OAAO;MACrD;MACA,OAAO,IAAI;IACb,CAAC;IACDoB,UAAUA,CAAA,EAAG;MACX,IAAI,IAAI,CAACjD,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAMwC,UAAS,GAAI,IAAI,CAAC8B,gBAAgB,CAAC5D,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACN,UAAU,EAAE,CAAC,CAAC;QACxF,MAAME,YAAW,GAAI,IAAI,CAAC4B,gBAAgB,CAAC5D,MAAM,CAAC,CAACC,GAAG,EAAEmC,IAAI,KAAKnC,GAAE,GAAImC,IAAI,CAACJ,YAAY,EAAE,CAAC,CAAC;QAC5F,MAAMK,cAAa,GAAIP,UAAS,GAAI,EAAC,GAAIE,YAAY;QACrD,MAAMM,gBAAe,GAAID,cAAc;QACvC,MAAMF,YAAW,GAAIV,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACtD,MAAMC,cAAa,GAAId,IAAI,CAACM,KAAK,CAACO,gBAAe,GAAI,EAAE,CAAC;QACxD,MAAME,WAAU,GAAI,IAAI,CAACkB,wBAAwB,CAACpE,MAAM;QACvDmD,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC;QACzB,OAAQ,GAAEL,YAAY,QAAQI,cAAc,OAAO;MAErD;MACA,OAAO,IAAI;IACb,CAAC;IACD1D,SAASA,CAAA,EAAG;MACV,OAAO;QACLxB,MAAM,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,UAAU,CAAC;QAC9CC,QAAQ,EAAE,CAAC;UACTf,IAAI,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;UACrBsH,eAAe,EAAE,CACf,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,CAC1B;UACDC,WAAW,EAAE,CACX,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,EACvB,uBAAuB,CACxB;UACDC,WAAW,EAAE,CAAC;UACdC,aAAa,EAAE,KAAK;UACpBC,YAAY,EAAE,CAAC;UACfC,aAAa,EAAE,GAAG;UAClBC,kBAAkB,EAAE;QACtB,CAAC;MACH,CAAC;IACH,CAAC;IACDC,OAAOA,CAAA,EAAG;MACR,OAAO,IAAI,CAACjF,MAAM,CAACC,OAAO,CAACiF,cAAc;IAC3C,CAAC;IACDtF,YAAYA,CAAA,EAAG;MACb,OAAO;QACLuF,SAAS,EAAE,GAAG;QACd3G,OAAO,EAAE;UACP4G,MAAM,EAAE;YAAE1G,OAAO,EAAE;UAAM;QAC3B,CAAC;QACDE,MAAM,EAAE;UACNyG,CAAC,EAAE;YAAEC,IAAI,EAAE;cAAE5G,OAAO,EAAE;YAAM,CAAC;YAAE6G,KAAK,EAAE;cAAE7G,OAAO,EAAE;YAAM;UAAE,CAAC;UAC1DG,CAAC,EAAE;YAAEC,WAAW,EAAE,IAAI;YAAEwG,IAAI,EAAE;cAAE5G,OAAO,EAAE;YAAM,CAAC;YAAE6G,KAAK,EAAE;cAAE7G,OAAO,EAAE;YAAM;UAAE;QAC9E;MACF,CAAC;IACH,CAAC;IACDmB,iBAAiBA,CAAA,EAAG;MAClB,OAAO;QACL2F,iBAAiBA,CAACxH,KAAK,EAAE;UACvB,MAAM;YAAEqB,GAAG;YAAEoG,SAAS,EAAE;cAAEC,IAAI;cAAEC,KAAK;cAAEC,KAAK;cAAEC;YAAO,CAAC;YAAEjH,MAAM,EAAE;cAAEC;YAAE;UAAE,IAAIb,KAAK;UAC/EqB,GAAG,CAACyG,IAAI,CAAC,CAAC;UACV,MAAMC,SAAQ,GAAIF,MAAK,GAAIhH,CAAC,CAAC0G,KAAK,CAACpF,MAAK,GAAInC,KAAK,CAACZ,IAAI,CAACe,QAAQ,CAAC,CAAC,CAAC,CAAC4G,aAAY,GAAI/G,KAAK,CAACZ,IAAI,CAACe,QAAQ,CAAC,CAAC,CAAC,CAAC6G,kBAAkB;UAC5HhH,KAAK,CAACZ,IAAI,CAACe,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAACsE,OAAO,CAAC,CAACsE,SAAS,EAAEC,KAAK,KAAK;YACxD,MAAMC,aAAY,GAAI,EAAE;YACxB7G,GAAG,CAAC8G,IAAG,GAAK,GAAED,aAAc,eAAc;YAC1C7G,GAAG,CAAC+G,SAAQ,GAAI,wBAAwB;YACxC/G,GAAG,CAACgH,SAAQ,GAAI,MAAM;YACtBhH,GAAG,CAACiH,YAAW,GAAI,QAAQ;YAC3BjH,GAAG,CAACkH,QAAQ,CAACvI,KAAK,CAACZ,IAAI,CAACc,MAAM,CAAC+H,KAAK,CAAC,EAAEP,IAAI,EAAE7G,CAAC,CAAC2H,gBAAgB,CAACP,KAAK,IAAIF,SAAQ,GAAI,IAAI,EAAE,CAAC;YAE5F,MAAMU,iBAAgB,GAAI,EAAE;YAC5BpH,GAAG,CAAC8G,IAAG,GAAK,QAAOM,iBAAkB,eAAc;YACnDpH,GAAG,CAAC+G,SAAQ,GAAI,wBAAwB;YACxC/G,GAAG,CAACgH,SAAQ,GAAI,OAAO;YACvBhH,GAAG,CAACiH,YAAW,GAAI,QAAQ;YAC3BjH,GAAG,CAACkH,QAAQ,CAACP,SAAS,EAAEL,KAAK,EAAE9G,CAAC,CAAC2H,gBAAgB,CAACP,KAAK,IAAIF,SAAQ,GAAI,IAAI,EAAE,CAAC;YAE9E,MAAMW,QAAO,GAAId,KAAI,IAAKI,SAAQ,GAAI1D,IAAI,CAACqE,GAAG,CAAC,GAAG3I,KAAK,CAACZ,IAAI,CAACe,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC;YAC/EiC,GAAG,CAAC+G,SAAQ,GAAIpI,KAAK,CAACZ,IAAI,CAACe,QAAQ,CAAC,CAAC,CAAC,CAACwG,WAAW,CAACsB,KAAK,CAAC;YACzD5G,GAAG,CAACuH,QAAQ,CAAClB,IAAI,EAAE7G,CAAC,CAAC2H,gBAAgB,CAACP,KAAK,IAAKF,SAAQ,GAAI,CAAE,EAAEW,QAAQ,EAAEX,SAAS,CAAC;UACtF,CAAC,CAAC;UAEF1G,GAAG,CAACwH,OAAO,CAAC,CAAC;QACf;MACF,CAAC;IACH;EACF,CAAC;EACDC,OAAO,EAAC;IACN9H,qBAAqBA,CAAA,EAAG;MACtB,IAAI,IAAI,CAACuC,gBAAgB,CAACpB,MAAK,GAAI,CAAC,EAAE;QACpC,MAAM2C,MAAK,GAAI,IAAI,CAACvB,gBAAgB,CAAC,CAAC,CAAC;QACvC,IAAI,CAAC9D,WAAW,CAACC,OAAM,GAAIoF,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;QAC3C,IAAI,CAACtE,WAAW,CAACE,OAAM,GAAImF,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;QAC3C,IAAI,CAACtE,WAAW,CAACG,QAAO,GAAIkF,MAAM,CAACd,OAAO,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACvE,WAAW,CAACI,QAAO,GAAIiF,MAAM,CAACd,OAAO,CAAC,CAAC,CAAC;QAC7C,IAAI,CAACvE,WAAW,CAACK,OAAM,GAAIgF,MAAM,CAACf,MAAM,CAAC,CAAC,KAAK,EAAE;QACjD,IAAI,CAACtE,WAAW,CAACM,QAAO,GAAI+E,MAAM,CAACd,OAAO,CAAC,CAAC,KAAK,EAAE;MACrD;MACA,IAAI,CAAC+E,cAAc,CAAC,CAAC;IACvB,CAAC;IACDC,eAAeA,CAAClE,MAAM,EAAE;MACtB,IAAI,CAACrF,WAAW,CAACC,OAAM,GAAIoF,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACtE,WAAW,CAACE,OAAM,GAAImF,MAAM,CAACf,MAAM,CAAC,CAAC,CAAC;MAC3C,IAAI,CAACtE,WAAW,CAACG,QAAO,GAAIkF,MAAM,CAACd,OAAO,CAAC,CAAC,CAAC;MAC7C,IAAI,CAACvE,WAAW,CAACI,QAAO,GAAIiF,MAAM,CAACd,OAAO,CAAC,CAAC,CAAC;MAC7C,IAAI,CAACvE,WAAW,CAACK,OAAM,GAAIgF,MAAM,CAACf,MAAM,CAAC,CAAC,KAAK,EAAE;MACjD,IAAI,CAACtE,WAAW,CAACM,QAAO,GAAI+E,MAAM,CAACd,OAAO,CAAC,CAAC,KAAK,EAAE;IACrD,CAAC;IACD+E,cAAcA,CAAA,EAAE;MACd,MAAMvF,eAAc,GAAI,CAAC,CAAC;MAC9B,MAAMC,aAAY,GAAI,YAAY;MAClC,IAAI,CAACnB,YAAY,CAACoB,OAAO,CAAChB,QAAO,IAAK;QACpCA,QAAQ,CAACQ,WAAW,CAACQ,OAAO,CAACC,UAAS,IAAK;UACzC,MAAM;YAAEC,IAAI;YAAEC,MAAM;YAAEC;UAAQ,IAAIH,UAAU;UAC5C,IAAI,CAACH,eAAe,CAACI,IAAI,CAAC,EAAE;YAC1BJ,eAAe,CAACI,IAAI,IAAI;cACtBA,IAAI,EAAEA,IAAI;cACVG,MAAM,EAAE,EAAE;cACVC,OAAO,EAAE,EAAE;cACXC,eAAe,EAAE;YACnB,CAAC;UACH;UACAT,eAAe,CAACI,IAAI,CAAC,CAACG,MAAM,CAACZ,IAAI,CAACU,MAAM,CAAC;UACzC,IAAIC,OAAO,EAAE;YACX,MAAMI,UAAS,GAAI,IAAIC,IAAI,CAAE,GAAEV,aAAa,IAAII,MAAO,EAAC,CAAC;YACzD,MAAMO,WAAU,GAAI,IAAID,IAAI,CAAE,GAAEV,aAAa,IAAIK,OAAQ,EAAC,CAAC;YAC3D,MAAMO,IAAG,GAAIC,IAAI,CAACC,GAAG,CAACH,WAAU,GAAIF,UAAU,CAAC;YAC/CV,eAAe,CAACI,IAAI,CAAC,CAACK,eAAc,IAAKI,IAAI;YAC7Cb,eAAe,CAACI,IAAI,CAAC,CAACI,OAAO,CAACb,IAAI,CAACW,OAAO,CAAC;UAC7C;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,MAAOmF,gBAAgB,GAAE5F,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QACpF,MAAMd,IAAG,GAAI,IAAIO,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC;QACpC,MAAMsF,KAAI,GAAItF,IAAI,CAACuF,QAAQ,CAAC,CAAC;QAC7B,IAAID,KAAI,KAAM,CAAC,EAAE;UACf,OAAOhD,KAAI,GAAI,CAAC;QAClB;QACA,OAAOA,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACLZ,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE0D,gBAAgB,CAAC;MACvE,MAAOG,gBAAgB,GAAE/F,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAClF,MAAMd,IAAG,GAAI,IAAIO,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC;QACpC,MAAMsF,KAAI,GAAItF,IAAI,CAACuF,QAAQ,CAAC,CAAC;QAC7B,IAAID,KAAI,KAAM,CAAC,EAAE;UACf,OAAOhD,KAAI,GAAI,CAAC;QAClB;QACA,OAAOA,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MAELZ,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE6D,gBAAgB,CAAC;MACtE,MAAMC,WAAU,GAAIhG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC3E,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACf,OAAOhD,KAAI,GAAIxB,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAG,UAAU,CAAC,CAACzD,MAAM;QAExE;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACP,MAAMoD,OAAM,GAAIjG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QACzE,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOhD,KAAI,GAAIxB,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACmD,IAAG,IAAKA,IAAG,KAAM,UAAU,CAAC,CAACzD,MAAM;QACzE;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACL,MAAMqD,UAAS,GAAIlG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC5E,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOhD,KAAI,GAAIxB,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAI,UAAS,IAAKA,IAAG,GAAI,UAAU,CAAC,CAACzD,MAAM;QAC5F;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACL,MAAMsD,SAAQ,GAAInG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC3E,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOhD,KAAI,GAAIxB,QAAQ,CAACV,OAAO,CAACvB,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAI,UAAU,CAAC,CAACzD,MAAM;QACxE;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACP,MAAMuD,WAAU,GAAIpG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC7E,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOhD,KAAI,GAAIxB,QAAQ,CAACV,OAAO,CAACvB,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAI,UAAS,IAAKA,IAAG,GAAI,UAAU,CAAC,CAACzD,MAAM;QAC7F;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACH;MACA;MACA;MACA;MACA;MACA,IAAI,CAACjG,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIiK,WAAW;MAC7C,IAAI,CAACpJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIkK,OAAO;MAC7C,IAAI,CAACrJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAImK,UAAU;MAChD,IAAI,CAACtJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIqK,WAAW;MACjD,IAAI,CAACxJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIoK,SAAS;MAInD,MAAME,WAAU,GAAIrG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC3E,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACf,OAAOhD,KAAI,GAAIxB,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAG,UAAU,CAAC,CAACzD,MAAM;QACxE;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACP,MAAMyD,OAAM,GAAItG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QACzE,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOhD,KAAI,GAAIxB,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACmD,IAAG,IAAKA,IAAG,KAAM,UAAU,CAAC,CAACzD,MAAM;QACzE;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACL,MAAM0D,UAAS,GAAIvG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC5E,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOhD,KAAI,GAAIxB,QAAQ,CAACX,MAAM,CAACtB,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAI,UAAS,IAAKA,IAAG,GAAI,UAAU,CAAC,CAACzD,MAAM;QAC5F;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACL,MAAM2D,SAAQ,GAAIxG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC3E,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOhD,KAAI,GAAIxB,QAAQ,CAACV,OAAO,CAACvB,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAI,UAAU,CAAC,CAACzD,MAAM;QACxE;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MACP,MAAM4D,WAAU,GAAIzG,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACX,MAAM,CAAC,CAACqD,KAAK,EAAExB,QAAQ,KAAK;QAC7E,MAAMwE,KAAI,GAAI,IAAI/E,IAAI,CAACO,QAAQ,CAACd,IAAI,CAAC,CAACuF,QAAQ,CAAC,CAAC;QAChD,IAAID,KAAI,KAAM,CAAC,EAAE;UACjB,OAAOhD,KAAI,GAAIxB,QAAQ,CAACV,OAAO,CAACvB,MAAM,CAACmD,IAAG,IAAKA,IAAG,GAAI,UAAS,IAAKA,IAAG,GAAI,UAAU,CAAC,CAACzD,MAAM;QAC7F;QACA,OAAO+D,KAAK;MACd,CAAC,EAAE,CAAC,CAAC;MAEH,IAAI,CAACjG,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIsK,WAAW;MAC7C,IAAI,CAACzJ,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIuK,OAAO;MAC7C,IAAI,CAAC1J,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIwK,UAAU;MAChD,IAAI,CAAC3J,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAI0K,WAAW;MACjD,IAAI,CAAC7J,UAAU,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACf,IAAI,CAAC,CAAC,IAAIyK,SAAS;MAEnD,MAAMrF,MAAK,GAAInB,MAAM,CAACC,MAAM,CAACE,eAAe,CAAC,CAACiB,GAAG,CAACC,QAAO,IAAK;QAC5D,MAAMC,UAAS,GAAIL,IAAI,CAACM,KAAK,CAACF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,CAAC;QAC1E,MAAMY,YAAW,GAAIP,IAAI,CAACM,KAAK,CAAEF,QAAQ,CAACT,eAAc,IAAK,IAAG,GAAI,EAAC,GAAI,EAAE,CAAC,IAAK,IAAG,GAAI,EAAE,CAAC,CAAC;QAC5F,OAAO;UACLL,IAAI,EAAEc,QAAQ,CAACd,IAAI;UACnBG,MAAM,EAAEW,QAAQ,CAACX,MAAM;UACvBC,OAAO,EAAEU,QAAQ,CAACV,OAAO;UACzBW,UAAU,EAAEA,UAAU;UACtBE,YAAY,EAAEA;QAChB,CAAC;MACH,CAAC;MACD,OAAOL,MAAM;IACf,CAAC;IAEGpD,WAAWA,CAAA,EAAG;MACZ,MAAMC,GAAE,GAAI,IAAI,CAACC,KAAK,CAACyI,QAAQ,CAACvI,UAAU,CAAC,IAAI,CAAC;MAChD,IAAI,CAACxB,KAAI,GAAI,IAAIf,KAAK,CAACoC,GAAG,EAAE;QAC1BI,IAAI,EAAE,KAAK;QACXrC,IAAI,EAAE,IAAI,CAACa,UAAU;QACrB0B,OAAO,EAAE,IAAI,CAACtB;MAChB,CAAC,CAAC;IACJ;EAEF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}